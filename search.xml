<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python2</title>
      <link href="/cn/44363/"/>
      <url>/cn/44363/</url>
      
        <content type="html"><![CDATA[<p>‘’’python<br>class basics:</p><pre><code># 一、获取多行输入组成二维数组n = 3  # 表示接下来有 3 行输入arr = [list(map(int, input().split())) for _ in range(n)]&quot;&quot;&quot;说明：- input().split()：把一行字符串按空格切分成列表，例如 &quot;1 2 3&quot; -&gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]- map(int, ...)：将列表中的每个字符串转成整数- list(...)：将 map 返回的迭代器转为列表- [ ... for _ in range(n)]：执行 n 次输入，构成二维列表- _ 是变量名的占位符，表示“我不关心这个变量”，也可写成 i 或 line 等&quot;&quot;&quot;# 二、获取一行输入并分别赋值给多个变量a, b = map(int, input().split())&quot;&quot;&quot;说明：- input()：获取如 &quot;3 5&quot; 的输入- .split()：分割为 [&quot;3&quot;, &quot;5&quot;]- map(int, ...)：转换为整数 [3, 5]- a, b = ...：拆包赋值给变量&quot;&quot;&quot;# 三、map 是什么？&quot;&quot;&quot;map 是 Python 的内置函数，用法为 map(function, iterable)- 会将 function 作用于 iterable 的每个元素- 返回一个“懒计算”的迭代器对象（map 类型）例如：nums = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]mapped = map(int, nums)      # 返回 map 对象print(list(mapped))          # 输出 [1, 2, 3]&quot;&quot;&quot;</code></pre><p>class algorizm:<br>    # 冒泡排序<br>    def bubble(nums):<br>        “””<br>        一层循环用于确定循环次数<br>        每次循环中，两两确认大小直至将最大的元素放在末尾<br>        每放一个元素到末尾，下次两两确认循环就不需要遍历到最后面已经排序号的区间<br>        :param nums:<br>        :return:<br>        “””<br>        for i in range(len(nums) - 1):<br>            for j in range(len(nums) - i - 1):<br>                if nums[j] &gt; nums[j+1]: nums[j], nums[j + 1] &#x3D; nums[j+1], nums[j]<br>        return nums</p><pre><code># 选择排序def select(nums):    &quot;&quot;&quot;    分两侧，一侧是排序完的，一侧没有    先将第一个元素默认当成最小的，取其索引赋值为 min_i    遍历当前 i 元素右侧全部元素，找有没有比这个更小的值，有则这两个交换位置    :param nums:    :return:    &quot;&quot;&quot;    for i in range(len(nums) - 1):        min_i = i  # 开始记录当前索引        for j in range(i + 1, len(nums)):            if nums[j] &lt; nums[min_i]: min_i = j  # 出现更小的值，重新把更小值的索引给到 min_i        if i != min_i:  # 发现跟当前索引不同，说明有更小值，需要进行交换            nums[i], nums[min_i] = nums[min_i], nums[i]  # 交换两者位置    return nums</code></pre><p>‘’’</p><h1 id="task"><a href="#task" class="headerlink" title="task"></a>task</h1><p>‘’’<br>import os<br>import sys</p><p>from datetime import datetime, timedelta</p><p>def last_bell_time():<br>    “””<br>    某个设备每隔 x 分钟响一次铃，问在给定时间前最后一次响铃的具体时间。</p><pre><code>【输入说明】- 第一行输入一个整数 T，表示有 T 组测试数据- 每组测试数据输入一行：一个时间字符串 + 一个整数 x（分钟）【输出说明】- 每组输出最近一次响铃的时间，格式为 yyyy-MM-dd HH:MM:SS【样例输入】21973-12-06 00:08:38 52001-01-01 00:00:01 1【样例输出】1973-12-06 00:05:002001-01-01 00:00:00【解题思路】- 目标是找到当前时间之前最近一次响铃的时间。- 可以将时间统一转化为“从1970-01-01 00:00:00开始的总秒数”- 时间间隔为 x 分钟，即 x × 60 秒- 使用整除运算 `(totalsec // interval) * interval` 找到最近一次响铃的秒数- 然后将这个秒数再转回时间格式并输出【重点函数】- datetime.strptime(str, fmt)：将字符串转换为 datetime 对象- datetime.strftime(fmt)：将 datetime 对象格式化为字符串- timedelta(seconds=n)：创建一个时间差（可加减时间）- total_seconds()：计算两个时间对象之间的差值，返回秒数【完整代码】&quot;&quot;&quot;T = int(input())for _ in range(T):    line = input()    strtime, x = line.rsplit(&quot; &quot;, 1)  # 拆分出时间字符串 和 响铃间隔分钟数    start = datetime(1970, 1, 1, 0, 0, 0)  # 以 1970年为基准    objtime = datetime.strptime(strtime, &quot;%Y-%m-%d %H:%M:%S&quot;)  # 字符串 -&gt; 时间对象    totalsec = int((objtime - start).total_seconds())  # 当前时间距离1970的总秒数    interval = int(x) * 60  # 响铃间隔（单位：秒）    lasttimesec = (totalsec // interval) * interval  # 上一次响铃时刻的秒数    lasttime = start + timedelta(seconds=lasttimesec)  # 秒数转回时间对象    print(lasttime.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;))  # 输出格式化后的时间字符串</code></pre><h1 id="对角线格子值相同的对数统计"><a href="#对角线格子值相同的对数统计" class="headerlink" title="对角线格子值相同的对数统计"></a>对角线格子值相同的对数统计</h1><p>def count_diagonal_pairs():<br>    “””<br>    小蓝正在和朋友们玩一种新的连连看游戏。</p><pre><code>在一个 n × m 的矩形网格中，每个格子中都有一个整数，第 i 行第 j 列上的整数为 A[i][j]。玩家需要寻找一对格子 (a,b)-(c,d)，使得：    1. A[a][b] == A[c][d]    2. |a - c| == |b - d| &gt; 0问有多少对格子满足以上条件。---------------------------------------✅ 条件转化为：满足 |a - c| == |b - d| 的点，表示它们在 ↘ 或 ↙ 方向上的对角线上。所以我们按如下方式判断是否在同一对角线上：    - ↘ 方向：i - j 相同（从左上到右下）    - ↙ 方向：i + j 相同（从右上到左下）---------------------------------------解题思路：- 用两个字典 diag1, diag2，分别记录 ↘ 和 ↙ 对角线上每个数字 val 出现的次数。- 遍历每个格子，如果当前数值 val 在该对角线上已出现 k 次，就可以与前面 k 个 val 组成 k 个合法格子对。- 每次发现就累计 k，之后把 val 的出现次数 +1。数据结构：diag1[i - j][val] -&gt; 统计↘方向上该值出现次数diag2[i + j][val] -&gt; 统计↙方向上该值出现次数注意：只能使用 os 和 sys 标准库，所以不用 collections.defaultdict&quot;&quot;&quot;import sysinput = sys.stdin.readlinen, m = map(int, input().split())grid = [list(map(int, input().split())) for _ in range(n)]diag1 = &#123;&#125;  # ↘：i - j 为键diag2 = &#123;&#125;  # ↙：i + j 为键ans = 0for i in range(n):    for j in range(m):        val = grid[i][j]        # 处理 ↘ 方向 (i - j)        key1 = i - j        if key1 not in diag1:            diag1[key1] = &#123;&#125;        if val in diag1[key1]:            ans += diag1[key1][val]            diag1[key1][val] += 1        else:            diag1[key1][val] = 1        # 处理 ↙ 方向 (i + j)        key2 = i + j        if key2 not in diag2:            diag2[key2] = &#123;&#125;        if val in diag2[key2]:            ans += diag2[key2][val]            diag2[key2][val] += 1        else:            diag2[key2][val] = 1print(ans * 2)</code></pre><h1 id="数字字符串计数（包含3和7）"><a href="#数字字符串计数（包含3和7）" class="headerlink" title="数字字符串计数（包含3和7）"></a>数字字符串计数（包含3和7）</h1><p>def count_valid_strings():<br>    “””<br>    小蓝要构造一个长度为 10000 的数字字符串，有以下要求：</p><pre><code>1. 不能出现数字 0；2. 必须包含数字 3 和数字 7。求满足要求的字符串个数，结果对 10^9 + 7 取模。解题思路：- 所有可能的字符串总数为 9^10000（每位可选1~9）- 使用容斥原理排除不合法情况：    - 不含3的有 8^10000 种    - 不含7的有 8^10000 种    - 同时不含3和7的有 7^10000 种- 合法数量 = 9^10000 - 2 * 8^10000 + 7^10000- 使用快速幂计算大指数，最后对 10^9 + 7 取模&quot;&quot;&quot;MOD = 10 ** 9 + 7total = pow(9, 10000, MOD)  # 所有字符串no_3 = pow(8, 10000, MOD)  # 不包含3no_7 = pow(8, 10000, MOD)  # 不包含7no_3_and_7 = pow(7, 10000, MOD)  # 同时不包含3和7# 使用容斥原理计算合法数量result = (total - 2 * no_3 + no_3_and_7) % MODprint(result)</code></pre><h1 id="硬币兑换"><a href="#硬币兑换" class="headerlink" title="硬币兑换"></a>硬币兑换</h1><p>def max_coin_count():<br>    “””<br>    小蓝手中有 2023 种不同面值的新版硬币，<br>    第 i 种硬币面值为 i，数量也为 i。<br>    可以使用两个新版硬币兑换一个面值为 coin1 + coin2 的旧版硬币。<br>    问：通过任意兑换后，某个面值的硬币最多能有多少个？<br>    “””<br>    # 初始化一个结果数组，result[x] 表示面值为 x 的旧硬币最多能获得多少个<br>    result &#x3D; [0 for _ in range(4047)]  # 最大面值是 2023 + 2023 &#x3D; 4046</p><pre><code># 枚举所有面值的组合 i 和 j（i &lt; j），避免重复组合for i in range(1, 2024):    for j in range(i + 1, 2024):        # 由于第 i 面值有 i 个硬币，所以可以和 j 面值的硬币兑换 i 次        result[i + j] += i# 最终取兑换后任意面值中数量最多的那个print(max(result))</code></pre><h1 id="2023"><a href="#2023" class="headerlink" title="2023"></a>2023</h1><p>“””<br>12345678 到 98765432 有多少个数完全不包含2023<br>def findIt(i):<br>  find01 &#x3D; i.find(‘2’)<br>  if find01 &#x3D;&#x3D; -1: return 0</p><p>  find02 &#x3D; i.find(‘0’, find01+1)<br>  if find02 &#x3D;&#x3D; -1: return 0</p><p>  find03 &#x3D; i.find(‘2’, find02+1)<br>  if find03 &#x3D;&#x3D; -1: return 0</p><p>  find04 &#x3D; i.find(‘3’, find03+1)<br>  if find04 &#x3D;&#x3D; -1: return 0</p><p>  return 1</p><p>count &#x3D; 0<br>for i in range(12345678, 98765432 + 1):<br>  if findIt(str(i)) &#x3D;&#x3D; 0: count +&#x3D; 1<br>print(count)<br>“””</p><h1 id="轮转数组"><a href="#轮转数组" class="headerlink" title="轮转数组"></a>轮转数组</h1><p>def rotate(self, nums, k: int) -&gt; None:<br>    “””<br>    给定一个整数数组 nums，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。<br>    “””<br>    def reverse(left: int, right: int):<br>        while left &lt; right:<br>            nums[left], nums[right] &#x3D; nums[right], nums[left]<br>            left +&#x3D; 1<br>            right -&#x3D; 1<br>    n &#x3D; len(nums)<br>    k %&#x3D; n  # 防止轮转次数超过元素数量<br>    reverse(0, n-1)  # 先整体翻转<br>    reverse(0, k-1)  # 再把前 k 个翻转<br>    reverse(k, n-1)  # 再反转后面几个</p><h1 id="加一"><a href="#加一" class="headerlink" title="加一"></a>加一</h1><p>def plusOne(self, digits):</p><pre><code>for i in range(len(digits) - 1, -1, -1):  # 倒叙遍历到 0    if digits[i] &lt; 9:  # 如果小于9直接加1返回        digits[i] += 1        return digits    digits[i] = 0  # 否则进一位    return [1] + [0] * len(digits)</code></pre><h1 id="寻找数组的中心下标"><a href="#寻找数组的中心下标" class="headerlink" title="寻找数组的中心下标"></a>寻找数组的中心下标</h1><p>def pivotIndex(self, nums) -&gt; int:<br>    “””<br>    给你一个整数数组 nums ，请计算数组的 中心下标 。<br>    数组 中心下标 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。<br>    如果中心下标位于数组最左端，那么左侧数之和视为 0 ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。<br>    如果数组有多个中心下标，应该返回 最靠近左边 的那一个。如果数组不存在中心下标，返回 -1 。<br>    “””<br>    suml, sumr &#x3D; 0, sum(nums)<br>    for i in range(len(nums)):<br>        sumr -&#x3D; nums[i]<br>        if sumr &#x3D;&#x3D; suml:<br>            return i<br>        suml +&#x3D; nums[i]<br>    return -1</p><h1 id="前后缀"><a href="#前后缀" class="headerlink" title="!!!前后缀"></a>!!!前后缀</h1><p>def prefixSuffix(nums):<br>    “””<br>    给你一个整数数组 nums，返回一个新的数组 answer，其中 answer[i] 等于 nums 中 左侧所有元素的和 与 右侧所有元素的和 之和。<br>    要求：不要使用额外的数组（即 O(1) 额外空间，除了 answer 本身）。时间复杂度为 O(n)。<br>    “””<br>    n &#x3D; len(nums)<br>    pre &#x3D; [0] * n<br>    suf &#x3D; [0] * n<br>    for i in range(1, n):<br>        pre[i] &#x3D; pre[i - 1] + nums[i - 1]<br>    for i in range(n - 2, -1, -1):<br>        suf[i] &#x3D; suf[i + 1] + nums[i + 1]<br>    return [p + s for p, s in zip(pre, suf)]<br>‘’’</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pythonRevive</title>
      <link href="/cn/5613/"/>
      <url>/cn/5613/</url>
      
        <content type="html"><![CDATA[<h1 id="蓝桥杯-Python-软件赛最基础复习笔记"><a href="#蓝桥杯-Python-软件赛最基础复习笔记" class="headerlink" title="蓝桥杯 Python 软件赛最基础复习笔记"></a>蓝桥杯 Python 软件赛最基础复习笔记</h1><blockquote><p>鼠鼠裸考临时抱佛脚用的</p></blockquote><hr><h2 id="1-输入输出与基础语法"><a href="#1-输入输出与基础语法" class="headerlink" title="1. 输入输出与基础语法"></a>1. 输入输出与基础语法</h2><h3 id="1-1-输入方式总结"><a href="#1-1-输入方式总结" class="headerlink" title="1.1 输入方式总结"></a>1.1 输入方式总结</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单个整数</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一行多个整数</span></span><br><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行输入</span></span><br><span class="line">lines = [<span class="built_in">input</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行整数</span></span><br><span class="line">nums = [<span class="built_in">int</span>(<span class="built_in">input</span>()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多组测试数据（EOF判断）</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    <span class="comment"># line 为字符串</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-map-的使用技巧"><a href="#2-map-的使用技巧" class="headerlink" title="2. map 的使用技巧"></a>2. map 的使用技巧</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取一行字符串转为整数列表</span></span><br><span class="line">arr = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br></pre></td></tr></table></figure><hr><h2 id="3-基础排序算法"><a href="#3-基础排序算法" class="headerlink" title="3. 基础排序算法"></a>3. 基础排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n - i - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j + <span class="number">1</span>]:</span><br><span class="line">                arr[j], arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>], arr[j]</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">selection_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        min_idx = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[min_idx]:</span><br><span class="line">                min_idx = j</span><br><span class="line">        arr[i], arr[min_idx] = arr[min_idx], arr[i]</span><br></pre></td></tr></table></figure><hr><h2 id="4-快速幂与模运算"><a href="#4-快速幂与模运算" class="headerlink" title="4. 快速幂与模运算"></a>4. 快速幂与模运算</h2><h3 id="快速幂模板"><a href="#快速幂模板" class="headerlink" title="快速幂模板"></a>快速幂模板</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quick_pow</span>(<span class="params">a, b, mod</span>):</span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        <span class="keyword">if</span> b % <span class="number">2</span>:</span><br><span class="line">            res = res * a % mod</span><br><span class="line">        a = a * a % mod</span><br><span class="line">        b //= <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><hr><h2 id="5-容斥原理"><a href="#5-容斥原理" class="headerlink" title="5. 容斥原理"></a>5. 容斥原理</h2><h3 id="容斥原理公式："><a href="#容斥原理公式：" class="headerlink" title="容斥原理公式："></a>容斥原理公式：</h3><p>容斥原理常用于求多个集合中交集补集的大小：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|A ∪ B| = |A| + |B| - |A ∩ B|</span><br><span class="line">|A ∪ B ∪ C| = |A| + |B| + |C| - |A∩B| - |A∩C| - |B∩C| + |A∩B∩C|</span><br></pre></td></tr></table></figure><h3 id="模板：容斥原理计数（求不被整除的个数）"><a href="#模板：容斥原理计数（求不被整除的个数）" class="headerlink" title="模板：容斥原理计数（求不被整除的个数）"></a>模板：容斥原理计数（求不被整除的个数）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_not_divisible</span>(<span class="params">n, a, b</span>):</span><br><span class="line">    ab = a * b // math.gcd(a, b)</span><br><span class="line">    <span class="keyword">return</span> n - (n // a + n // b - n // ab)</span><br></pre></td></tr></table></figure><hr><h2 id="6-时间处理"><a href="#6-时间处理" class="headerlink" title="6. 时间处理"></a>6. 时间处理</h2><h3 id="求某一天是星期几"><a href="#求某一天是星期几" class="headerlink" title="求某一天是星期几"></a>求某一天是星期几</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">date = datetime.date(<span class="number">2024</span>, <span class="number">4</span>, <span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(date.weekday())  <span class="comment"># 0 表示星期一，6 表示星期日</span></span><br></pre></td></tr></table></figure><h3 id="日期加减"><a href="#日期加减" class="headerlink" title="日期加减"></a>日期加减</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">today = datetime.date.today()</span><br><span class="line">delta = datetime.timedelta(days=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(today + delta)  <span class="comment"># 三天后</span></span><br></pre></td></tr></table></figure><hr><h2 id="7-对角线格子统计"><a href="#7-对角线格子统计" class="headerlink" title="7. 对角线格子统计"></a>7. 对角线格子统计</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一个 N×M 的网格，统计左上角到右下角一条斜线穿过了多少个格子。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_crossed_cells</span>(<span class="params">n, m</span>):</span><br><span class="line">    <span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line">    <span class="keyword">return</span> n + m - gcd(n, m)</span><br></pre></td></tr></table></figure><hr><h1 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">basics</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 一、获取多行输入组成二维数组</span></span><br><span class="line">    n = <span class="number">3</span>  <span class="comment"># 表示接下来有 3 行输入</span></span><br><span class="line">    arr = [<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    说明：</span></span><br><span class="line"><span class="string">    - input().split()：把一行字符串按空格切分成列表，例如 &quot;1 2 3&quot; -&gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span></span><br><span class="line"><span class="string">    - map(int, ...)：将列表中的每个字符串转成整数</span></span><br><span class="line"><span class="string">    - list(...)：将 map 返回的迭代器转为列表</span></span><br><span class="line"><span class="string">    - [ ... for _ in range(n)]：执行 n 次输入，构成二维列表</span></span><br><span class="line"><span class="string">    - _ 是变量名的占位符，表示“我不关心这个变量”，也可写成 i 或 line 等</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 二、获取一行输入并分别赋值给多个变量</span></span><br><span class="line">    a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    说明：</span></span><br><span class="line"><span class="string">    - input()：获取如 &quot;3 5&quot; 的输入</span></span><br><span class="line"><span class="string">    - .split()：分割为 [&quot;3&quot;, &quot;5&quot;]</span></span><br><span class="line"><span class="string">    - map(int, ...)：转换为整数 [3, 5]</span></span><br><span class="line"><span class="string">    - a, b = ...：拆包赋值给变量</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 三、map 是什么？</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    map 是 Python 的内置函数，用法为 map(function, iterable)</span></span><br><span class="line"><span class="string">    - 会将 function 作用于 iterable 的每个元素</span></span><br><span class="line"><span class="string">    - 返回一个“懒计算”的迭代器对象（map 类型）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    例如：</span></span><br><span class="line"><span class="string">    nums = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span></span><br><span class="line"><span class="string">    mapped = map(int, nums)      # 返回 map 对象</span></span><br><span class="line"><span class="string">    print(list(mapped))          # 输出 [1, 2, 3]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">algorizm</span>:</span><br><span class="line">    <span class="comment"># 冒泡排序</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bubble</span>(<span class="params">nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        一层循环用于确定循环次数</span></span><br><span class="line"><span class="string">        每次循环中，两两确认大小直至将最大的元素放在末尾</span></span><br><span class="line"><span class="string">        每放一个元素到末尾，下次两两确认循环就不需要遍历到最后面已经排序号的区间</span></span><br><span class="line"><span class="string">        :param nums:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums) - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums) - i - <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> nums[j] &gt; nums[j+<span class="number">1</span>]: nums[j], nums[j + <span class="number">1</span>] = nums[j+<span class="number">1</span>], nums[j]</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择排序</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select</span>(<span class="params">nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        分两侧，一侧是排序完的，一侧没有</span></span><br><span class="line"><span class="string">        先将第一个元素默认当成最小的，取其索引赋值为 min_i</span></span><br><span class="line"><span class="string">        遍历当前 i 元素右侧全部元素，找有没有比这个更小的值，有则这两个交换位置</span></span><br><span class="line"><span class="string">        :param nums:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums) - <span class="number">1</span>):</span><br><span class="line">            min_i = i  <span class="comment"># 开始记录当前索引</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> nums[j] &lt; nums[min_i]: min_i = j  <span class="comment"># 出现更小的值，重新把更小值的索引给到 min_i</span></span><br><span class="line">            <span class="keyword">if</span> i != min_i:  <span class="comment"># 发现跟当前索引不同，说明有更小值，需要进行交换</span></span><br><span class="line">                nums[i], nums[min_i] = nums[min_i], nums[i]  <span class="comment"># 交换两者位置</span></span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">last_bell_time</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    某个设备每隔 x 分钟响一次铃，问在给定时间前最后一次响铃的具体时间。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    【输入说明】</span></span><br><span class="line"><span class="string">    - 第一行输入一个整数 T，表示有 T 组测试数据</span></span><br><span class="line"><span class="string">    - 每组测试数据输入一行：一个时间字符串 + 一个整数 x（分钟）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    【输出说明】</span></span><br><span class="line"><span class="string">    - 每组输出最近一次响铃的时间，格式为 yyyy-MM-dd HH:MM:SS</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    【样例输入】</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    1973-12-06 00:08:38 5</span></span><br><span class="line"><span class="string">    2001-01-01 00:00:01 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    【样例输出】</span></span><br><span class="line"><span class="string">    1973-12-06 00:05:00</span></span><br><span class="line"><span class="string">    2001-01-01 00:00:00</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    【解题思路】</span></span><br><span class="line"><span class="string">    - 目标是找到当前时间之前最近一次响铃的时间。</span></span><br><span class="line"><span class="string">    - 可以将时间统一转化为“从1970-01-01 00:00:00开始的总秒数”</span></span><br><span class="line"><span class="string">    - 时间间隔为 x 分钟，即 x × 60 秒</span></span><br><span class="line"><span class="string">    - 使用整除运算 `(totalsec // interval) * interval` 找到最近一次响铃的秒数</span></span><br><span class="line"><span class="string">    - 然后将这个秒数再转回时间格式并输出</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    【重点函数】</span></span><br><span class="line"><span class="string">    - datetime.strptime(str, fmt)：将字符串转换为 datetime 对象</span></span><br><span class="line"><span class="string">    - datetime.strftime(fmt)：将 datetime 对象格式化为字符串</span></span><br><span class="line"><span class="string">    - timedelta(seconds=n)：创建一个时间差（可加减时间）</span></span><br><span class="line"><span class="string">    - total_seconds()：计算两个时间对象之间的差值，返回秒数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    【完整代码】</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    T = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(T):</span><br><span class="line">        line = <span class="built_in">input</span>()</span><br><span class="line">        strtime, x = line.rsplit(<span class="string">&quot; &quot;</span>, <span class="number">1</span>)  <span class="comment"># 拆分出时间字符串 和 响铃间隔分钟数</span></span><br><span class="line"></span><br><span class="line">        start = datetime(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 以 1970年为基准</span></span><br><span class="line">        objtime = datetime.strptime(strtime, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)  <span class="comment"># 字符串 -&gt; 时间对象</span></span><br><span class="line">        totalsec = <span class="built_in">int</span>((objtime - start).total_seconds())  <span class="comment"># 当前时间距离1970的总秒数</span></span><br><span class="line"></span><br><span class="line">        interval = <span class="built_in">int</span>(x) * <span class="number">60</span>  <span class="comment"># 响铃间隔（单位：秒）</span></span><br><span class="line">        lasttimesec = (totalsec // interval) * interval  <span class="comment"># 上一次响铃时刻的秒数</span></span><br><span class="line"></span><br><span class="line">        lasttime = start + timedelta(seconds=lasttimesec)  <span class="comment"># 秒数转回时间对象</span></span><br><span class="line">        <span class="built_in">print</span>(lasttime.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>))  <span class="comment"># 输出格式化后的时间字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对角线格子值相同的对数统计</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_diagonal_pairs</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    小蓝正在和朋友们玩一种新的连连看游戏。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    在一个 n × m 的矩形网格中，每个格子中都有一个整数，第 i 行第 j 列上的整数为 A[i][j]。</span></span><br><span class="line"><span class="string">    玩家需要寻找一对格子 (a,b)-(c,d)，使得：</span></span><br><span class="line"><span class="string">        1. A[a][b] == A[c][d]</span></span><br><span class="line"><span class="string">        2. |a - c| == |b - d| &gt; 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    问有多少对格子满足以上条件。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ---------------------------------------</span></span><br><span class="line"><span class="string">    ✅ 条件转化为：</span></span><br><span class="line"><span class="string">    满足 |a - c| == |b - d| 的点，表示它们在 ↘ 或 ↙ 方向上的对角线上。</span></span><br><span class="line"><span class="string">    所以我们按如下方式判断是否在同一对角线上：</span></span><br><span class="line"><span class="string">        - ↘ 方向：i - j 相同（从左上到右下）</span></span><br><span class="line"><span class="string">        - ↙ 方向：i + j 相同（从右上到左下）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ---------------------------------------</span></span><br><span class="line"><span class="string">    解题思路：</span></span><br><span class="line"><span class="string">    - 用两个字典 diag1, diag2，分别记录 ↘ 和 ↙ 对角线上每个数字 val 出现的次数。</span></span><br><span class="line"><span class="string">    - 遍历每个格子，如果当前数值 val 在该对角线上已出现 k 次，就可以与前面 k 个 val 组成 k 个合法格子对。</span></span><br><span class="line"><span class="string">    - 每次发现就累计 k，之后把 val 的出现次数 +1。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    数据结构：</span></span><br><span class="line"><span class="string">    diag1[i - j][val] -&gt; 统计↘方向上该值出现次数</span></span><br><span class="line"><span class="string">    diag2[i + j][val] -&gt; 统计↙方向上该值出现次数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    注意：只能使用 os 和 sys 标准库，所以不用 collections.defaultdict</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    <span class="built_in">input</span> = sys.stdin.readline</span><br><span class="line"></span><br><span class="line">    n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    grid = [<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">    diag1 = &#123;&#125;  <span class="comment"># ↘：i - j 为键</span></span><br><span class="line">    diag2 = &#123;&#125;  <span class="comment"># ↙：i + j 为键</span></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            val = grid[i][j]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 处理 ↘ 方向 (i - j)</span></span><br><span class="line">            key1 = i - j</span><br><span class="line">            <span class="keyword">if</span> key1 <span class="keyword">not</span> <span class="keyword">in</span> diag1:</span><br><span class="line">                diag1[key1] = &#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> val <span class="keyword">in</span> diag1[key1]:</span><br><span class="line">                ans += diag1[key1][val]</span><br><span class="line">                diag1[key1][val] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                diag1[key1][val] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 处理 ↙ 方向 (i + j)</span></span><br><span class="line">            key2 = i + j</span><br><span class="line">            <span class="keyword">if</span> key2 <span class="keyword">not</span> <span class="keyword">in</span> diag2:</span><br><span class="line">                diag2[key2] = &#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> val <span class="keyword">in</span> diag2[key2]:</span><br><span class="line">                ans += diag2[key2][val]</span><br><span class="line">                diag2[key2][val] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                diag2[key2][val] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(ans * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字字符串计数（包含3和7）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_valid_strings</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    小蓝要构造一个长度为 10000 的数字字符串，有以下要求：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    1. 不能出现数字 0；</span></span><br><span class="line"><span class="string">    2. 必须包含数字 3 和数字 7。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    求满足要求的字符串个数，结果对 10^9 + 7 取模。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    解题思路：</span></span><br><span class="line"><span class="string">    - 所有可能的字符串总数为 9^10000（每位可选1~9）</span></span><br><span class="line"><span class="string">    - 使用容斥原理排除不合法情况：</span></span><br><span class="line"><span class="string">        - 不含3的有 8^10000 种</span></span><br><span class="line"><span class="string">        - 不含7的有 8^10000 种</span></span><br><span class="line"><span class="string">        - 同时不含3和7的有 7^10000 种</span></span><br><span class="line"><span class="string">    - 合法数量 = 9^10000 - 2 * 8^10000 + 7^10000</span></span><br><span class="line"><span class="string">    - 使用快速幂计算大指数，最后对 10^9 + 7 取模</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    MOD = <span class="number">10</span> ** <span class="number">9</span> + <span class="number">7</span></span><br><span class="line"></span><br><span class="line">    total = <span class="built_in">pow</span>(<span class="number">9</span>, <span class="number">10000</span>, MOD)  <span class="comment"># 所有字符串</span></span><br><span class="line">    no_3 = <span class="built_in">pow</span>(<span class="number">8</span>, <span class="number">10000</span>, MOD)  <span class="comment"># 不包含3</span></span><br><span class="line">    no_7 = <span class="built_in">pow</span>(<span class="number">8</span>, <span class="number">10000</span>, MOD)  <span class="comment"># 不包含7</span></span><br><span class="line">    no_3_and_7 = <span class="built_in">pow</span>(<span class="number">7</span>, <span class="number">10000</span>, MOD)  <span class="comment"># 同时不包含3和7</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用容斥原理计算合法数量</span></span><br><span class="line">    result = (total - <span class="number">2</span> * no_3 + no_3_and_7) % MOD</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 硬币兑换</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max_coin_count</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    小蓝手中有 2023 种不同面值的新版硬币，</span></span><br><span class="line"><span class="string">    第 i 种硬币面值为 i，数量也为 i。</span></span><br><span class="line"><span class="string">    可以使用两个新版硬币兑换一个面值为 coin1 + coin2 的旧版硬币。</span></span><br><span class="line"><span class="string">    问：通过任意兑换后，某个面值的硬币最多能有多少个？</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 初始化一个结果数组，result[x] 表示面值为 x 的旧硬币最多能获得多少个</span></span><br><span class="line">    result = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4047</span>)]  <span class="comment"># 最大面值是 2023 + 2023 = 4046</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 枚举所有面值的组合 i 和 j（i &lt; j），避免重复组合</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">2024</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="number">2024</span>):</span><br><span class="line">            <span class="comment"># 由于第 i 面值有 i 个硬币，所以可以和 j 面值的硬币兑换 i 次</span></span><br><span class="line">            result[i + j] += i</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最终取兑换后任意面值中数量最多的那个</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">max</span>(result))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2023</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">12345678 到 98765432 有多少个数完全不包含2023</span></span><br><span class="line"><span class="string">def findIt(i):</span></span><br><span class="line"><span class="string">  find01 = i.find(&#x27;2&#x27;)</span></span><br><span class="line"><span class="string">  if find01 == -1: return 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  find02 = i.find(&#x27;0&#x27;, find01+1)</span></span><br><span class="line"><span class="string">  if find02 == -1: return 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  find03 = i.find(&#x27;2&#x27;, find02+1)</span></span><br><span class="line"><span class="string">  if find03 == -1: return 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  find04 = i.find(&#x27;3&#x27;, find03+1)</span></span><br><span class="line"><span class="string">  if find04 == -1: return 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  return 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">count = 0</span></span><br><span class="line"><span class="string">for i in range(12345678, 98765432 + 1):</span></span><br><span class="line"><span class="string">  if findIt(str(i)) == 0: count += 1</span></span><br><span class="line"><span class="string">print(count)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 轮转数组</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">self, nums, k: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    给定一个整数数组 nums，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            nums[left], nums[right] = nums[right], nums[left]</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    k %= n  <span class="comment"># 防止轮转次数超过元素数量</span></span><br><span class="line">    reverse(<span class="number">0</span>, n-<span class="number">1</span>)  <span class="comment"># 先整体翻转</span></span><br><span class="line">    reverse(<span class="number">0</span>, k-<span class="number">1</span>)  <span class="comment"># 再把前 k 个翻转</span></span><br><span class="line">    reverse(k, n-<span class="number">1</span>)  <span class="comment"># 再反转后面几个</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加一</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plusOne</span>(<span class="params">self, digits</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(digits) - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):  <span class="comment"># 倒叙遍历到 0</span></span><br><span class="line">        <span class="keyword">if</span> digits[i] &lt; <span class="number">9</span>:  <span class="comment"># 如果小于9直接加1返回</span></span><br><span class="line">            digits[i] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> digits</span><br><span class="line">        digits[i] = <span class="number">0</span>  <span class="comment"># 否则进一位</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="number">1</span>] + [<span class="number">0</span>] * <span class="built_in">len</span>(digits)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寻找数组的中心下标</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pivotIndex</span>(<span class="params">self, nums</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    给你一个整数数组 nums ，请计算数组的 中心下标 。</span></span><br><span class="line"><span class="string">    数组 中心下标 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</span></span><br><span class="line"><span class="string">    如果中心下标位于数组最左端，那么左侧数之和视为 0 ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</span></span><br><span class="line"><span class="string">    如果数组有多个中心下标，应该返回 最靠近左边 的那一个。如果数组不存在中心下标，返回 -1 。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    suml, sumr = <span class="number">0</span>, <span class="built_in">sum</span>(nums)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">        sumr -= nums[i]</span><br><span class="line">        <span class="keyword">if</span> sumr == suml:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        suml += nums[i]</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 前后缀</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prefixSuffix</span>(<span class="params">nums</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    给你一个整数数组 nums，返回一个新的数组 answer，其中 answer[i] 等于 nums 中 左侧所有元素的和 与 右侧所有元素的和 之和。</span></span><br><span class="line"><span class="string">    要求：不要使用额外的数组（即 O(1) 额外空间，除了 answer 本身）。时间复杂度为 O(n)。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    pre = [<span class="number">0</span>] * n</span><br><span class="line">    suf = [<span class="number">0</span>] * n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        pre[i] = pre[i - <span class="number">1</span>] + nums[i - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        suf[i] = suf[i + <span class="number">1</span>] + nums[i + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> [p + s <span class="keyword">for</span> p, s <span class="keyword">in</span> <span class="built_in">zip</span>(pre, suf)]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python 康复训练</title>
      <link href="/cn/22493/"/>
      <url>/cn/22493/</url>
      
        <content type="html"><![CDATA[<h1 id="Python的康复训练"><a href="#Python的康复训练" class="headerlink" title="Python的康复训练"></a><strong>Python的康复训练</strong></h1><blockquote><p>长时间没写 Python，直接让 Claude跑了篇康复训练笔记给我 XD</p></blockquote><h1 id="第一章：Python基础语法"><a href="#第一章：Python基础语法" class="headerlink" title="第一章：Python基础语法"></a><strong>第一章：Python基础语法</strong></h1><p>本章主要介绍Python语言的基本语法。熟悉这些基础知识是进行任何编程活动的前提。</p><h2 id="1-1-变量与数据类型"><a href="#1-1-变量与数据类型" class="headerlink" title="1.1 变量与数据类型"></a><strong>1.1 变量与数据类型</strong></h2><p>在Python中，变量是存储数据的容器。Python是动态类型语言，这意味着我们不需要显式声明变量的类型。</p><h3 id="各数据类型对比"><a href="#各数据类型对比" class="headerlink" title="各数据类型对比"></a><strong>各数据类型对比</strong></h3><table><thead><tr><th>数据类型</th><th>存储结构</th><th>是否有序</th><th>是否可变</th><th>是否允许重复</th><th>查找速度</th><th>插入&#x2F;删除速度</th><th>适用场景</th></tr></thead><tbody><tr><td><strong><code>list</code>（列表）</strong></td><td>动态数组</td><td>✅ 有序</td><td>✅ 可变</td><td>✅ 允许</td><td>O(n)（线性搜索）</td><td>末尾 O(1)，中间 O(n)</td><td>需要动态存储有序数据</td></tr><tr><td><strong><code>tuple</code>（元组）</strong></td><td>动态数组</td><td>✅ 有序</td><td>❌ 不可变</td><td>✅ 允许</td><td>O(n)</td><td>❌ 不可修改</td><td>需要不可变数据，如字典键</td></tr><tr><td><strong><code>dict</code>（字典）</strong></td><td>哈希表</td><td>✅ 有序 (Python 3.7+)</td><td>✅ 可变</td><td>✅ 允许</td><td>O(1)</td><td>O(1)</td><td>需要键值映射的查找表</td></tr><tr><td><strong><code>set</code>（集合）</strong></td><td>哈希表</td><td>❌ 无序</td><td>✅ 可变</td><td>❌ 不允许</td><td>O(1)</td><td>O(1)</td><td>需要去重或集合运算</td></tr><tr><td><strong><code>str</code>（字符串）</strong></td><td>动态数组</td><td>✅ 有序</td><td>❌ 不可变</td><td>✅ 允许</td><td>O(n)</td><td>❌ 不可修改</td><td>处理文本数据</td></tr></tbody></table><h3 id="数据类型选择指南"><a href="#数据类型选择指南" class="headerlink" title="数据类型选择指南"></a><strong>数据类型选择指南</strong></h3><table><thead><tr><th>需求</th><th>推荐数据类型</th><th>说明</th></tr></thead><tbody><tr><td><strong>快速查找键值</strong></td><td><code>dict</code></td><td>O(1) 查找速度</td></tr><tr><td><strong>存储唯一值</strong></td><td><code>set</code></td><td>自动去重，O(1) 查找</td></tr><tr><td><strong>存储有序列表</strong></td><td><code>list</code></td><td>可变，支持索引</td></tr><tr><td><strong>存储不可变数据</strong></td><td><code>tuple</code></td><td>节省内存，可作 <code>dict</code> 键</td></tr><tr><td><strong>存储文本</strong></td><td><code>str</code></td><td>不可变，可作为 <code>dict</code> 键</td></tr></tbody></table><table><thead><tr><th>数据类型</th><th>适用场景</th></tr></thead><tbody><tr><td><code>list</code></td><td>需要存储有序数据，适合增删改</td></tr><tr><td><code>tuple</code></td><td>需要不可变数据，适合作为 <code>dict</code> 键</td></tr><tr><td><code>dict</code></td><td>需要键值映射，适合快速查找</td></tr><tr><td><code>set</code></td><td>需要去重或集合运算</td></tr><tr><td><code>str</code></td><td>需要存储文本，适合索引操作</td></tr></tbody></table><h3 id="1-1-1-基本数据类型"><a href="#1-1-1-基本数据类型" class="headerlink" title="1.1.1 基本数据类型"></a><strong>1.1.1 基本数据类型</strong></h3><ol><li><strong>整数(int)</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span>  <span class="comment"># 普通整数</span></span><br><span class="line">b = <span class="number">0b1010</span>  <span class="comment"># 二进制数，值为10</span></span><br><span class="line">c = <span class="number">0o12</span>  <span class="comment"># 八进制数，值为10</span></span><br><span class="line">d = <span class="number">0xA</span>  <span class="comment"># 十六进制数，值为10</span></span><br><span class="line">big_num = <span class="number">1_000_000</span>  <span class="comment"># 使用下划线使大数更易读</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>浮点数(float)</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pi = <span class="number">3.14159</span></span><br><span class="line">e = <span class="number">2.71828</span></span><br><span class="line">scientific = <span class="number">3.14e-10</span>  <span class="comment"># 科学计数法</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>字符串(str)</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串可以用单引号或双引号</span></span><br><span class="line">name = <span class="string">&quot;Python&quot;</span></span><br><span class="line">message = <span class="string">&#x27;Hello, World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行字符串使用三引号</span></span><br><span class="line">multi_line = <span class="string">&quot;&quot;&quot;这是第一行</span></span><br><span class="line"><span class="string">这是第二行</span></span><br><span class="line"><span class="string">这是第三行&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串格式化</span></span><br><span class="line">name = <span class="string">&quot;Alice&quot;</span></span><br><span class="line">age = <span class="number">25</span></span><br><span class="line"><span class="comment"># f-string (推荐)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;My name is <span class="subst">&#123;name&#125;</span> and I am <span class="subst">&#123;age&#125;</span> years old&quot;</span>)</span><br><span class="line"><span class="comment"># format方法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My name is &#123;&#125; and I am &#123;&#125; years old&quot;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line"><span class="comment"># %操作符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My name is %s and I am %d years old&quot;</span> % (name, age))</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>布尔值(bool)</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">is_active = <span class="literal">True</span></span><br><span class="line">is_empty = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 布尔运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span>)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span>)   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="keyword">not</span> <span class="literal">True</span>)        <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h3 id="1-1-2-类型转换"><a href="#1-1-2-类型转换" class="headerlink" title="1.1.2 类型转换"></a><strong>1.1.2 类型转换</strong></h3><p>Python提供了多种类型转换函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串转换</span></span><br><span class="line">str_num = <span class="string">&quot;123&quot;</span></span><br><span class="line">num = <span class="built_in">int</span>(str_num)      <span class="comment"># 字符串转整数: 123</span></span><br><span class="line">float_num = <span class="built_in">float</span>(str_num)  <span class="comment"># 字符串转浮点数: 123.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字转字符串</span></span><br><span class="line">num = <span class="number">123</span></span><br><span class="line">str_num = <span class="built_in">str</span>(num)      <span class="comment"># 数字转字符串: &quot;123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查数据类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">123</span>))        <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;hello&quot;</span>))    <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">3.14</span>))       <span class="comment"># &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">True</span>))       <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类型判断</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="number">123</span>, <span class="built_in">int</span>))        <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="string">&quot;hello&quot;</span>, <span class="built_in">str</span>))    <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="1-1-3-变量命名规则"><a href="#1-1-3-变量命名规则" class="headerlink" title="1.1.3 变量命名规则"></a><strong>1.1.3 变量命名规则</strong></h3><ol><li>变量名只能包含字母、数字和下划线</li><li>变量名必须以字母或下划线开头</li><li>变量名区分大小写</li><li>不能使用Python关键字</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确的命名</span></span><br><span class="line">user_name = <span class="string">&quot;Alice&quot;</span></span><br><span class="line">age1 = <span class="number">25</span></span><br><span class="line">_private = <span class="string">&quot;private variable&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误的命名</span></span><br><span class="line"><span class="comment"># 2name = &quot;John&quot;    # 不能以数字开头</span></span><br><span class="line"><span class="comment"># my-name = &quot;Bob&quot;   # 不能使用连字符</span></span><br><span class="line"><span class="comment"># class = &quot;Python&quot;  # 不能使用关键字</span></span><br></pre></td></tr></table></figure><h2 id="1-2-数据结构"><a href="#1-2-数据结构" class="headerlink" title="1.2 数据结构"></a><strong>1.2 数据结构</strong></h2><p>Python内置了丰富的数据结构，每种数据结构都有其特定的使用场景和优势。</p><h3 id="1-2-1-列表-List"><a href="#1-2-1-列表-List" class="headerlink" title="1.2.1 列表(List)"></a><strong>1.2.1 列表(List)</strong></h3><p>列表是Python中最常用的数据结构之一，它是一个可变的、有序的元素集合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建列表</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">mixed = [<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>, <span class="number">3.14</span>, <span class="literal">True</span>]  <span class="comment"># 列表可以包含不同类型的元素</span></span><br><span class="line">empty_list = []  <span class="comment"># 空列表</span></span><br><span class="line">list_from_range = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))  <span class="comment"># 使用range创建列表: [0, 1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表索引和切片</span></span><br><span class="line">lst = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">0</span>])       <span class="comment"># 第一个元素: 10</span></span><br><span class="line"><span class="built_in">print</span>(lst[-<span class="number">1</span>])      <span class="comment"># 最后一个元素: 50</span></span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">1</span>:<span class="number">3</span>])     <span class="comment"># 切片，获取索引1到2的元素: [20, 30]</span></span><br><span class="line"><span class="built_in">print</span>(lst[::<span class="number">2</span>])     <span class="comment"># 步长为2: [10, 30, 50]</span></span><br><span class="line"><span class="built_in">print</span>(lst[::-<span class="number">1</span>])    <span class="comment"># 反转列表: [50, 40, 30, 20, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表常用方法</span></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">lst.append(<span class="number">4</span>)        <span class="comment"># 添加元素到末尾: [1, 2, 3, 4]</span></span><br><span class="line">lst.insert(<span class="number">1</span>, <span class="number">5</span>)     <span class="comment"># 在索引1处插入5: [1, 5, 2, 3, 4]</span></span><br><span class="line">lst.extend([<span class="number">6</span>, <span class="number">7</span>])   <span class="comment"># 扩展列表: [1, 5, 2, 3, 4, 6, 7]</span></span><br><span class="line">lst.remove(<span class="number">5</span>)        <span class="comment"># 删除第一个值为5的元素</span></span><br><span class="line">popped = lst.pop()   <span class="comment"># 移除并返回最后一个元素</span></span><br><span class="line">lst.sort()           <span class="comment"># 排序（原地排序）</span></span><br><span class="line">lst.reverse()        <span class="comment"># 反转列表</span></span><br><span class="line">index = lst.index(<span class="number">3</span>) <span class="comment"># 获取元素3的索引</span></span><br><span class="line">count = lst.count(<span class="number">2</span>) <span class="comment"># 计算元素2出现的次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表推导式</span></span><br><span class="line">squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]              <span class="comment"># [0, 1, 4, 9, 16]</span></span><br><span class="line">evens = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]    <span class="comment"># [0, 2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure><h3 id="1-2-2-元组-Tuple"><a href="#1-2-2-元组-Tuple" class="headerlink" title="1.2.2 元组(Tuple)"></a><strong>1.2.2 元组(Tuple)</strong></h3><p>元组是不可变的序列类型，一旦创建就不能修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建元组</span></span><br><span class="line">point = (<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">single_element = (<span class="number">1</span>,)  <span class="comment"># 单元素元组必须加逗号</span></span><br><span class="line">empty_tuple = ()</span><br><span class="line">tuple_from_list = <span class="built_in">tuple</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组解包</span></span><br><span class="line">x, y = point  <span class="comment"># x=3, y=4</span></span><br><span class="line">a, *rest, b = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)  <span class="comment"># a=1, rest=[2,3,4], b=5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组操作</span></span><br><span class="line">coordinates = (<span class="number">1</span>, <span class="number">2</span>) + (<span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># 连接元组: (1, 2, 3, 4)</span></span><br><span class="line">repeated = (<span class="number">1</span>, <span class="number">2</span>) * <span class="number">3</span>          <span class="comment"># 重复元组: (1, 2, 1, 2, 1, 2)</span></span><br><span class="line">exists = <span class="number">3</span> <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)        <span class="comment"># 成员检测: True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组方法</span></span><br><span class="line">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">count = tup.count(<span class="number">2</span>)    <span class="comment"># 计数：2出现了2次</span></span><br><span class="line">index = tup.index(<span class="number">3</span>)    <span class="comment"># 获取3的索引：3</span></span><br></pre></td></tr></table></figure><h3 id="1-2-3-集合-Set"><a href="#1-2-3-集合-Set" class="headerlink" title="1.2.3 集合(Set)"></a><strong>1.2.3 集合(Set)</strong></h3><p>集合是无序的、不重复元素的集合，支持数学运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建集合</span></span><br><span class="line">numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">set_from_list = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>])  <span class="comment"># 重复元素会被去除</span></span><br><span class="line">empty_set = <span class="built_in">set</span>()  <span class="comment"># 注意：&#123;&#125;创建的是空字典，不是空集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合操作</span></span><br><span class="line">s1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1 | s2)     <span class="comment"># 并集: &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"><span class="built_in">print</span>(s1 &amp; s2)     <span class="comment"># 交集: &#123;3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(s1 - s2)     <span class="comment"># 差集: &#123;1, 2&#125;</span></span><br><span class="line"><span class="built_in">print</span>(s1 ^ s2)     <span class="comment"># 对称差集: &#123;1, 2, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合方法</span></span><br><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s.add(<span class="number">4</span>)           <span class="comment"># 添加单个元素</span></span><br><span class="line">s.update([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])<span class="comment"># 添加多个元素</span></span><br><span class="line">s.remove(<span class="number">4</span>)        <span class="comment"># 删除元素（元素不存在会报错）</span></span><br><span class="line">s.discard(<span class="number">4</span>)       <span class="comment"># 删除元素（元素不存在不会报错）</span></span><br><span class="line">popped = s.pop()   <span class="comment"># 随机移除并返回一个元素</span></span><br><span class="line">s.clear()          <span class="comment"># 清空集合</span></span><br></pre></td></tr></table></figure><h3 id="1-2-4-字典-Dictionary"><a href="#1-2-4-字典-Dictionary" class="headerlink" title="1.2.4 字典(Dictionary)"></a><strong>1.2.4 字典(Dictionary)</strong></h3><p>字典是键值对的集合，提供了高效的查找机制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建字典</span></span><br><span class="line">person = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="string">&quot;skills&quot;</span>: [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;Java&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">dict_from_pairs = <span class="built_in">dict</span>([(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">2</span>)])</span><br><span class="line">empty_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问和修改</span></span><br><span class="line"><span class="built_in">print</span>(person[<span class="string">&quot;name&quot;</span>])              <span class="comment"># 访问值：Alice</span></span><br><span class="line">person[<span class="string">&quot;age&quot;</span>] = <span class="number">26</span>                 <span class="comment"># 修改值</span></span><br><span class="line">person[<span class="string">&quot;location&quot;</span>] = <span class="string">&quot;New York&quot;</span>    <span class="comment"># 添加新键值对</span></span><br><span class="line">value = person.get(<span class="string">&quot;salary&quot;</span>, <span class="number">0</span>)    <span class="comment"># 安全访问，如果键不存在返回默认值0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典方法</span></span><br><span class="line">keys = person.keys()               <span class="comment"># 获取所有键</span></span><br><span class="line">values = person.values()           <span class="comment"># 获取所有值</span></span><br><span class="line">items = person.items()             <span class="comment"># 获取所有键值对</span></span><br><span class="line">person.update(&#123;<span class="string">&quot;salary&quot;</span>: <span class="number">5000</span>&#125;)    <span class="comment"># 更新或添加多个键值对</span></span><br><span class="line">popped = person.pop(<span class="string">&quot;age&quot;</span>)         <span class="comment"># 移除并返回指定键的值</span></span><br><span class="line">person.clear()                     <span class="comment"># 清空字典</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典推导式</span></span><br><span class="line">squares = &#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)&#125;  <span class="comment"># &#123;0:0, 1:1, 2:4, 3:9, 4:16&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套字典</span></span><br><span class="line">employees = &#123;</span><br><span class="line">    <span class="string">&quot;emp1&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>, <span class="string">&quot;salary&quot;</span>: <span class="number">5000</span>&#125;,</span><br><span class="line">    <span class="string">&quot;emp2&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;salary&quot;</span>: <span class="number">6000</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-控制结构"><a href="#1-3-控制结构" class="headerlink" title="1.3 控制结构"></a><strong>1.3 控制结构</strong></h2><p>Python提供了多种控制结构来控制程序的执行流程。</p><h3 id="1-3-1-条件语句-if"><a href="#1-3-1-条件语句-if" class="headerlink" title="1.3.1 条件语句(if)"></a><strong>1.3.1 条件语句(if)</strong></h3><p>Python使用缩进来标识代码块，条件语句的基本结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本if语句</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;成年人&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">12</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;青少年&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;儿童&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 条件表达式（三元运算符）</span></span><br><span class="line">status = <span class="string">&quot;成年&quot;</span> <span class="keyword">if</span> age &gt;= <span class="number">18</span> <span class="keyword">else</span> <span class="string">&quot;未成年&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复合条件</span></span><br><span class="line">score = <span class="number">85</span></span><br><span class="line">is_student = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">60</span> <span class="keyword">and</span> is_student:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;及格&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多条件判断</span></span><br><span class="line">grade = <span class="string">&quot;A&quot;</span> <span class="keyword">if</span> score &gt;= <span class="number">90</span> <span class="keyword">else</span> <span class="string">&quot;B&quot;</span> <span class="keyword">if</span> score &gt;= <span class="number">80</span> <span class="keyword">else</span> <span class="string">&quot;C&quot;</span> <span class="keyword">if</span> score &gt;= <span class="number">70</span> <span class="keyword">else</span> <span class="string">&quot;D&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成员判断</span></span><br><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;apple&quot;</span> <span class="keyword">in</span> fruits:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;有苹果&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 身份判断</span></span><br><span class="line">x = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> x <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x是None&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 真值判断</span></span><br><span class="line"><span class="comment"># 以下值在条件判断中都被视为False：</span></span><br><span class="line"><span class="comment"># False, None, 0, 0.0, &#x27;&#x27;, [], &#123;&#125;, set()</span></span><br><span class="line">empty_list = []</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> empty_list:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;列表为空&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="1-3-2-for循环"><a href="#1-3-2-for循环" class="headerlink" title="1.3.2 for循环"></a><strong>1.3.2 for循环</strong></h3><p>Python的for循环可以遍历任何可迭代对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本for循环</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># 打印0到4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历列表</span></span><br><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> fruits:</span><br><span class="line">    <span class="built_in">print</span>(fruit)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用enumerate获取索引和值</span></span><br><span class="line"><span class="keyword">for</span> index, fruit <span class="keyword">in</span> <span class="built_in">enumerate</span>(fruits):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;索引 <span class="subst">&#123;index&#125;</span>: <span class="subst">&#123;fruit&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历字典</span></span><br><span class="line">person = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> person:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;person[key]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更pythonic的字典遍历</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> person.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环嵌套</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;(<span class="subst">&#123;i&#125;</span>, <span class="subst">&#123;j&#125;</span>)&quot;</span>, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()  <span class="comment"># 换行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表推导式中的for</span></span><br><span class="line">squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用zip同时遍历多个序列</span></span><br><span class="line">names = [<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>]</span><br><span class="line">ages = [<span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>]</span><br><span class="line"><span class="keyword">for</span> name, age <span class="keyword">in</span> <span class="built_in">zip</span>(names, ages):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> is <span class="subst">&#123;age&#125;</span> years old&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="1-3-3-while循环"><a href="#1-3-3-while循环" class="headerlink" title="1.3.3 while循环"></a><strong>1.3.3 while循环</strong></h3><p>while循环在条件为真时重复执行代码块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本while循环</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用while循环处理用户输入</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    response = <span class="built_in">input</span>(<span class="string">&quot;请输入&#x27;quit&#x27;退出: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> response.lower() == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;你输入了: <span class="subst">&#123;response&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带else的while循环</span></span><br><span class="line"><span class="comment"># 当while循环正常结束（不是通过break）时执行else块</span></span><br><span class="line">number = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> number &lt; <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(number)</span><br><span class="line">    number += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;循环正常结束&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用while循环实现倒计时</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">countdown = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> countdown &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(countdown)</span><br><span class="line">    countdown -= <span class="number">1</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)  <span class="comment"># 暂停1秒</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;发射！&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="1-3-4-循环控制语句"><a href="#1-3-4-循环控制语句" class="headerlink" title="1.3.4 循环控制语句"></a><strong>1.3.4 循环控制语句</strong></h3><p>Python提供了几种控制循环执行的语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># break: 立即退出循环</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># 只打印0到4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># continue: 跳过当前迭代</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># 打印0,1,3,4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pass: 空操作</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">pass</span>  <span class="comment"># 什么都不做</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环中的else子句</span></span><br><span class="line"><span class="comment"># 当循环正常完成（不是通过break退出）时执行</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;循环正常完成&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在嵌套循环中使用break和continue</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">if</span> i == j:</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 跳过当前内循环迭代</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;(<span class="subst">&#123;i&#125;</span>, <span class="subst">&#123;j&#125;</span>)&quot;</span>, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h3 id="1-3-5-异常处理"><a href="#1-3-5-异常处理" class="headerlink" title="1.3.5 异常处理"></a><strong>1.3.5 异常处理</strong></h3><p>虽然这通常在后面的章节介绍，但基本的异常处理也是控制流的重要部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本的try-except结构</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数字: &quot;</span>))</span><br><span class="line">    result = <span class="number">10</span> / number</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;结果是: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入必须是数字&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不能除以零&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;计算成功完成&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无论如何都会执行这里&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="第二章：函数与模块"><a href="#第二章：函数与模块" class="headerlink" title="第二章：函数与模块"></a><strong>第二章：函数与模块</strong></h1><h2 id="2-1-函数的定义与调用"><a href="#2-1-函数的定义与调用" class="headerlink" title="2.1 函数的定义与调用"></a><strong>2.1 函数的定义与调用</strong></h2><p>函数是可重用的代码块，它可以接收参数、执行特定任务并返回结果。</p><h3 id="2-1-1-基本函数定义"><a href="#2-1-1-基本函数定义" class="headerlink" title="2.1.1 基本函数定义"></a><strong>2.1.1 基本函数定义</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本函数定义</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    向指定的人打招呼</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        name: 人名</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        打招呼的字符串</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Hello, <span class="subst">&#123;name&#125;</span>!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line"><span class="built_in">print</span>(greet(<span class="string">&quot;Alice&quot;</span>))  <span class="comment"># 输出: Hello, Alice!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多返回值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_coordinates</span>():</span><br><span class="line">    x = <span class="number">10</span></span><br><span class="line">    y = <span class="number">20</span></span><br><span class="line">    <span class="keyword">return</span> x, y  <span class="comment"># 实际上返回一个元组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解包多返回值</span></span><br><span class="line">x, y = get_coordinates()</span><br></pre></td></tr></table></figure><h3 id="2-1-2-函数参数"><a href="#2-1-2-函数参数" class="headerlink" title="2.1.2 函数参数"></a><strong>2.1.2 函数参数</strong></h3><p>Python提供了多种参数传递方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 位置参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">base, exponent</span>):</span><br><span class="line">    <span class="keyword">return</span> base ** exponent</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(power(<span class="number">2</span>, <span class="number">3</span>))  <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name, greeting=<span class="string">&quot;Hello&quot;</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;greeting&#125;</span>, <span class="subst">&#123;name&#125;</span>!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(greet(<span class="string">&quot;Alice&quot;</span>))          <span class="comment"># Hello, Alice!</span></span><br><span class="line"><span class="built_in">print</span>(greet(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Hi&quot;</span>))      <span class="comment"># Hi, Bob!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键字参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_profile</span>(<span class="params">name, age, city</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;name&#125;</span> is <span class="subst">&#123;age&#125;</span> years old and lives in <span class="subst">&#123;city&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(create_profile(age=<span class="number">25</span>, city=<span class="string">&quot;Beijing&quot;</span>, name=<span class="string">&quot;Alice&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可变位置参数 (*args)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_all</span>(<span class="params">*numbers</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(numbers)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sum_all(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))  <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可变关键字参数 (**kwargs)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">**info</span>):</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> info.items():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">print_info(name=<span class="string">&quot;Alice&quot;</span>, age=<span class="number">25</span>, city=<span class="string">&quot;Beijing&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 混合使用各种参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complex_function</span>(<span class="params">pos1, pos2, *args, default=<span class="string">&quot;default&quot;</span>, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;位置参数: <span class="subst">&#123;pos1&#125;</span>, <span class="subst">&#123;pos2&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;可变位置参数: <span class="subst">&#123;args&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;默认参数: <span class="subst">&#123;default&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;关键字参数: <span class="subst">&#123;kwargs&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">complex_function(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, x=<span class="number">10</span>, y=<span class="number">20</span>)</span><br></pre></td></tr></table></figure><h3 id="2-1-3-作用域和命名空间"><a href="#2-1-3-作用域和命名空间" class="headerlink" title="2.1.3 作用域和命名空间"></a><strong>2.1.3 作用域和命名空间</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局变量和局部变量</span></span><br><span class="line">global_var = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>():</span><br><span class="line">    local_var = <span class="number">20</span></span><br><span class="line">    <span class="built_in">print</span>(global_var)  <span class="comment"># 可以访问全局变量</span></span><br><span class="line">    <span class="built_in">print</span>(local_var)   <span class="comment"># 局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># global关键字</span></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">increment</span>():</span><br><span class="line">    <span class="keyword">global</span> counter</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> counter</span><br><span class="line"></span><br><span class="line"><span class="comment"># nonlocal关键字（用于嵌套函数）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> x</span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭包示例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_counter</span>():</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> count</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="keyword">return</span> increment</span><br></pre></td></tr></table></figure><h2 id="2-2-高级函数特性"><a href="#2-2-高级函数特性" class="headerlink" title="2.2 高级函数特性"></a><strong>2.2 高级函数特性</strong></h2><h3 id="2-2-1-装饰器"><a href="#2-2-1-装饰器" class="headerlink" title="2.2.1 装饰器"></a><strong>2.2.1 装饰器</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;函数 <span class="subst">&#123;func.__name__&#125;</span> 执行时间: <span class="subst">&#123;end - start&#125;</span>秒&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@timer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">slow_function</span>():</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;完成&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带参数的装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">repeat</span>(<span class="params">times</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(times):</span><br><span class="line">                result = func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@repeat(<span class="params"><span class="number">3</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Hello <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-2-2-生成器"><a href="#2-2-2-生成器" class="headerlink" title="2.2.2 生成器"></a><strong>2.2.2 生成器</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成器函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">countdown</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用生成器</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> countdown(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器表达式</span></span><br><span class="line">squares = (x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无限生成器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">infinite_sequence</span>():</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> num</span><br><span class="line">        num += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="2-3-模块和包"><a href="#2-3-模块和包" class="headerlink" title="2.3 模块和包"></a><strong>2.3 模块和包</strong></h2><h3 id="2-3-1-模块导入"><a href="#2-3-1-模块导入" class="headerlink" title="2.3.1 模块导入"></a><strong>2.3.1 模块导入</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本导入</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.pi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入特定内容</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, choice</span><br><span class="line"><span class="built_in">print</span>(randint(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用别名</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入所有内容（不推荐）</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><h3 id="2-3-2-创建自己的模块"><a href="#2-3-2-创建自己的模块" class="headerlink" title="2.3.2 创建自己的模块"></a><strong>2.3.2 创建自己的模块</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mymodule.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Hello, <span class="subst">&#123;name&#125;</span>!&quot;</span></span><br><span class="line"></span><br><span class="line">PI = <span class="number">3.14159</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在其他文件中使用</span></span><br><span class="line"><span class="keyword">import</span> mymodule</span><br><span class="line"><span class="built_in">print</span>(mymodule.greet(<span class="string">&quot;Alice&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="2-3-3-包的结构"><a href="#2-3-3-包的结构" class="headerlink" title="2.3.3 包的结构"></a><strong>2.3.3 包的结构</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mypackage/</span><br><span class="line">    __init__.py</span><br><span class="line">    module1.py</span><br><span class="line">    module2.py</span><br><span class="line">    subpackage/</span><br><span class="line">        __init__.py</span><br><span class="line">        module3.py</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __init__.py 示例</span></span><br><span class="line"><span class="keyword">from</span> .module1 <span class="keyword">import</span> function1</span><br><span class="line"><span class="keyword">from</span> .module2 <span class="keyword">import</span> function2</span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">&#x27;function1&#x27;</span>, <span class="string">&#x27;function2&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="2-3-4-常用标准库"><a href="#2-3-4-常用标准库" class="headerlink" title="2.3.4 常用标准库"></a><strong>2.3.4 常用标准库</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日期和时间处理</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line">now = datetime.now()</span><br><span class="line">future = now + timedelta(days=<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件路径处理</span></span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line">path = os.path.join(<span class="string">&#x27;folder&#x27;</span>, <span class="string">&#x27;subfolder&#x27;</span>, <span class="string">&#x27;file.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># JSON处理</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>&#125;</span><br><span class="line">json_str = json.dumps(data)</span><br><span class="line">parsed_data = json.loads(json_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则表达式</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">pattern = <span class="string">r&#x27;\d+&#x27;</span></span><br><span class="line">text = <span class="string">&quot;abc123def456&quot;</span></span><br><span class="line">numbers = re.findall(pattern, text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机数</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random_num = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">random_choice = random.choice([<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统相关</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.version)</span><br><span class="line"><span class="built_in">print</span>(sys.platform)</span><br></pre></td></tr></table></figure><h1 id="第三章：面向对象编程（OOP）"><a href="#第三章：面向对象编程（OOP）" class="headerlink" title="第三章：面向对象编程（OOP）"></a><strong>第三章：面向对象编程（OOP）</strong></h1><h2 id="3-1-类与对象基础"><a href="#3-1-类与对象基础" class="headerlink" title="3.1 类与对象基础"></a><strong>3.1 类与对象基础</strong></h2><h3 id="3-1-1-类的定义与实例化"><a href="#3-1-1-类的定义与实例化" class="headerlink" title="3.1.1 类的定义与实例化"></a><strong>3.1.1 类的定义与实例化</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="comment"># 类变量（所有实例共享）</span></span><br><span class="line">    species = <span class="string">&quot;Human&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构造方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="comment"># 实例变量（每个实例独有）</span></span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line">        <span class="variable language_">self</span>._private = <span class="literal">None</span>      <span class="comment"># 约定私有（单下划线）</span></span><br><span class="line">        <span class="variable language_">self</span>.__very_private = <span class="number">0</span>   <span class="comment"># 名称改写私有（双下划线）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Hello, my name is <span class="subst">&#123;self.name&#125;</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取年龄描述</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_age_description</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.age &lt; <span class="number">18</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;未成年&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;成年人&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实例</span></span><br><span class="line">person1 = Person(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>)</span><br><span class="line">person2 = Person(<span class="string">&quot;Bob&quot;</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问属性和方法</span></span><br><span class="line"><span class="built_in">print</span>(person1.name)          <span class="comment"># 访问实例变量</span></span><br><span class="line"><span class="built_in">print</span>(Person.species)        <span class="comment"># 访问类变量</span></span><br><span class="line"><span class="built_in">print</span>(person1.greet())      <span class="comment"># 调用方法</span></span><br></pre></td></tr></table></figure><h3 id="3-1-2-属性装饰器"><a href="#3-1-2-属性装饰器" class="headerlink" title="3.1.2 属性装饰器"></a><strong>3.1.2 属性装饰器</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>._score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用property装饰器</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._score</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置器</span></span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">score</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, <span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;分数必须是整数&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;分数必须在0-100之间&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>._score = value</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 只读属性</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">grade</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._score &gt;= <span class="number">90</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>._score &gt;= <span class="number">80</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>._score &gt;= <span class="number">70</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用属性</span></span><br><span class="line">student = Student()</span><br><span class="line">student.score = <span class="number">85</span>  <span class="comment"># 使用setter</span></span><br><span class="line"><span class="built_in">print</span>(student.score)  <span class="comment"># 使用getter</span></span><br><span class="line"><span class="built_in">print</span>(student.grade)  <span class="comment"># 访问只读属性</span></span><br></pre></td></tr></table></figure><h3 id="3-1-3-静态方法和类方法"><a href="#3-1-3-静态方法和类方法" class="headerlink" title="3.1.3 静态方法和类方法"></a><strong>3.1.3 静态方法和类方法</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MathOperations</span>:</span><br><span class="line">    <span class="comment"># 类变量</span></span><br><span class="line">    pi = <span class="number">3.14159</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.value = value</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例方法（需要实例）</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">double</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.value * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 静态方法（不需要实例）</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_positive</span>(<span class="params">number</span>):</span><br><span class="line">        <span class="keyword">return</span> number &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类方法（可访问类变量）</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">circle_area</span>(<span class="params">cls, radius</span>):</span><br><span class="line">        <span class="keyword">return</span> cls.pi * radius ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类方法作为替代构造函数</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_string</span>(<span class="params">cls, string_value</span>):</span><br><span class="line">        value = <span class="built_in">float</span>(string_value)</span><br><span class="line">        <span class="keyword">return</span> cls(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">math_ops = MathOperations(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(math_ops.double())                    <span class="comment"># 实例方法</span></span><br><span class="line"><span class="built_in">print</span>(MathOperations.is_positive(<span class="number">10</span>))       <span class="comment"># 静态方法</span></span><br><span class="line"><span class="built_in">print</span>(MathOperations.circle_area(<span class="number">5</span>))        <span class="comment"># 类方法</span></span><br><span class="line">new_ops = MathOperations.from_string(<span class="string">&quot;10&quot;</span>)  <span class="comment"># 替代构造函数</span></span><br></pre></td></tr></table></figure><h2 id="3-2-继承与多态"><a href="#3-2-继承与多态" class="headerlink" title="3.2 继承与多态"></a><strong>3.2 继承与多态</strong></h2><h3 id="3-2-1-基本继承"><a href="#3-2-1-基本继承" class="headerlink" title="3.2.1 基本继承"></a><strong>3.2.1 基本继承</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">&quot;子类必须实现这个方法&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">introduce</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;I am <span class="subst">&#123;self.name&#125;</span>, and I can <span class="subst">&#123;self.speak()&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;woof!&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 扩展父类方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">introduce</span>(<span class="params">self</span>):</span><br><span class="line">        base_intro = <span class="built_in">super</span>().introduce()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;base_intro&#125;</span> I&#x27;m a good boy!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;meow!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">dog = Dog(<span class="string">&quot;Buddy&quot;</span>)</span><br><span class="line">cat = Cat(<span class="string">&quot;Whiskers&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(dog.introduce())</span><br><span class="line"><span class="built_in">print</span>(cat.introduce())</span><br></pre></td></tr></table></figure><h3 id="3-2-2-多重继承"><a href="#3-2-2-多重继承" class="headerlink" title="3.2.2 多重继承"></a><strong>3.2.2 多重继承</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Flyable</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fly</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I can fly!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Swimmable</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swim</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I can swim!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Duck</span>(Animal, Flyable, Swimmable):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;quack!&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">introduce</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">super</span>().introduce()&#125;</span> <span class="subst">&#123;self.fly()&#125;</span> <span class="subst">&#123;self.swim()&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用多重继承</span></span><br><span class="line">duck = Duck(<span class="string">&quot;Donald&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(duck.introduce())</span><br><span class="line"><span class="built_in">print</span>(Duck.__mro__)  <span class="comment"># 查看方法解析顺序</span></span><br></pre></td></tr></table></figure><h3 id="3-2-3-抽象基类"><a href="#3-2-3-抽象基类" class="headerlink" title="3.2.3 抽象基类"></a><strong>3.2.3 抽象基类</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span>(<span class="title class_ inherited__">ABC</span>):</span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, width, height</span>):</span><br><span class="line">        <span class="variable language_">self</span>.width = width</span><br><span class="line">        <span class="variable language_">self</span>.height = height</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.width * <span class="variable language_">self</span>.height</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (<span class="variable language_">self</span>.width + <span class="variable language_">self</span>.height)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, radius</span>):</span><br><span class="line">        <span class="variable language_">self</span>.radius = radius</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14159</span> * <span class="variable language_">self</span>.radius ** <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * <span class="number">3.14159</span> * <span class="variable language_">self</span>.radius</span><br></pre></td></tr></table></figure><h2 id="3-3-魔术方法"><a href="#3-3-魔术方法" class="headerlink" title="3.3 魔术方法"></a><strong>3.3 魔术方法</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="variable language_">self</span>.x = x</span><br><span class="line">        <span class="variable language_">self</span>.y = y</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 字符串表示</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Vector(<span class="subst">&#123;self.x&#125;</span>, <span class="subst">&#123;self.y&#125;</span>)&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Vector(x=<span class="subst">&#123;self.x&#125;</span>, y=<span class="subst">&#123;self.y&#125;</span>)&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 运算符重载</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> Vector(<span class="variable language_">self</span>.x + other.x, <span class="variable language_">self</span>.y + other.y)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__sub__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> Vector(<span class="variable language_">self</span>.x - other.x, <span class="variable language_">self</span>.y - other.y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 比较运算</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.x == other.x <span class="keyword">and</span> <span class="variable language_">self</span>.y == other.y</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 长度</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>((<span class="variable language_">self</span>.x ** <span class="number">2</span> + <span class="variable language_">self</span>.y ** <span class="number">2</span>) ** <span class="number">0.5</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调用对象</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, scale</span>):</span><br><span class="line">        <span class="keyword">return</span> Vector(<span class="variable language_">self</span>.x * scale, <span class="variable language_">self</span>.y * scale)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">v1 = Vector(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">v2 = Vector(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(v1 + v2)        <span class="comment"># 加法</span></span><br><span class="line"><span class="built_in">print</span>(v1 == v2)       <span class="comment"># 比较</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(v1))        <span class="comment"># 长度</span></span><br><span class="line"><span class="built_in">print</span>(v1(<span class="number">2</span>))          <span class="comment"># 调用</span></span><br></pre></td></tr></table></figure><h2 id="3-4-设计模式示例"><a href="#3-4-设计模式示例" class="headerlink" title="3.4 设计模式示例"></a><strong>3.4 设计模式示例</strong></h2><h3 id="3-4-1-单例模式"><a href="#3-4-1-单例模式" class="headerlink" title="3.4.1 单例模式"></a><strong>3.4.1 单例模式</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>:</span><br><span class="line">    _instance = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">if</span> cls._instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls._instance = <span class="built_in">super</span>().__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 初始化代码（只在第一次创建实例时执行）</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(<span class="variable language_">self</span>, <span class="string">&#x27;initialized&#x27;</span>):</span><br><span class="line">            <span class="variable language_">self</span>.initialized = <span class="literal">True</span></span><br><span class="line">            <span class="variable language_">self</span>.data = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试单例</span></span><br><span class="line">s1 = Singleton()</span><br><span class="line">s2 = Singleton()</span><br><span class="line"><span class="built_in">print</span>(s1 <span class="keyword">is</span> s2)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="3-4-2-工厂模式"><a href="#3-4-2-工厂模式" class="headerlink" title="3.4.2 工厂模式"></a><strong>3.4.2 工厂模式</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Woof!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Meow!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnimalFactory</span>:</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_animal</span>(<span class="params">animal_type</span>):</span><br><span class="line">        <span class="keyword">if</span> animal_type.lower() == <span class="string">&quot;dog&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> Dog()</span><br><span class="line">        <span class="keyword">elif</span> animal_type.lower() == <span class="string">&quot;cat&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> Cat()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Unknown animal type&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用工厂</span></span><br><span class="line">factory = AnimalFactory()</span><br><span class="line">dog = factory.create_animal(<span class="string">&quot;dog&quot;</span>)</span><br><span class="line">cat = factory.create_animal(<span class="string">&quot;cat&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="第四章：文件操作与异常处理"><a href="#第四章：文件操作与异常处理" class="headerlink" title="第四章：文件操作与异常处理"></a><strong>第四章：文件操作与异常处理</strong></h1><h2 id="4-1-文件操作"><a href="#4-1-文件操作" class="headerlink" title="4.1 文件操作"></a><strong>4.1 文件操作</strong></h2><h3 id="4-1-1-基本文件操作"><a href="#4-1-1-基本文件操作" class="headerlink" title="4.1.1 基本文件操作"></a><strong>4.1.1 基本文件操作</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开文件的不同模式</span></span><br><span class="line"><span class="comment"># &#x27;r&#x27;: 只读（默认）</span></span><br><span class="line"><span class="comment"># &#x27;w&#x27;: 写入（会覆盖）</span></span><br><span class="line"><span class="comment"># &#x27;a&#x27;: 追加</span></span><br><span class="line"><span class="comment"># &#x27;x&#x27;: 独占写入</span></span><br><span class="line"><span class="comment"># &#x27;b&#x27;: 二进制模式</span></span><br><span class="line"><span class="comment"># &#x27;t&#x27;: 文本模式（默认）</span></span><br><span class="line"><span class="comment"># &#x27;+&#x27;: 读写模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本读取操作</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="comment"># 读取整个文件</span></span><br><span class="line">    content = file.read()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 读取指定字节数</span></span><br><span class="line">    file.seek(<span class="number">0</span>)  <span class="comment"># 回到文件开头</span></span><br><span class="line">    chunk = file.read(<span class="number">10</span>)  <span class="comment"># 读取10个字符</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 读取一行</span></span><br><span class="line">    file.seek(<span class="number">0</span>)</span><br><span class="line">    line = file.readline()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 读取所有行到列表</span></span><br><span class="line">    file.seek(<span class="number">0</span>)</span><br><span class="line">    lines = file.readlines()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 逐行读取（内存友好）</span></span><br><span class="line">    file.seek(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">        <span class="built_in">print</span>(line.strip())  <span class="comment"># strip()去除首尾空白字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本写入操作</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="comment"># 写入字符串</span></span><br><span class="line">    file.write(<span class="string">&#x27;Hello, World!\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 写入多行</span></span><br><span class="line">    lines = [<span class="string">&#x27;Line 1\n&#x27;</span>, <span class="string">&#x27;Line 2\n&#x27;</span>, <span class="string">&#x27;Line 3\n&#x27;</span>]</span><br><span class="line">    file.writelines(lines)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加模式</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;log.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&#x27;New log entry\n&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="4-1-2-高级文件操作"><a href="#4-1-2-高级文件操作" class="headerlink" title="4.1.2 高级文件操作"></a><strong>4.1.2 高级文件操作</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件路径操作</span></span><br><span class="line">current_dir = os.getcwd()  <span class="comment"># 获取当前工作目录</span></span><br><span class="line">file_path = os.path.join(<span class="string">&#x27;folder&#x27;</span>, <span class="string">&#x27;subfolder&#x27;</span>, <span class="string">&#x27;file.txt&#x27;</span>)  <span class="comment"># 构建路径</span></span><br><span class="line">abs_path = os.path.abspath(file_path)  <span class="comment"># 获取绝对路径</span></span><br><span class="line">dir_name = os.path.dirname(file_path)  <span class="comment"># 获取目录名</span></span><br><span class="line">base_name = os.path.basename(file_path)  <span class="comment"># 获取文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件操作</span></span><br><span class="line">os.makedirs(<span class="string">&#x27;new_folder&#x27;</span>, exist_ok=<span class="literal">True</span>)  <span class="comment"># 创建目录</span></span><br><span class="line">os.rename(<span class="string">&#x27;old.txt&#x27;</span>, <span class="string">&#x27;new.txt&#x27;</span>)  <span class="comment"># 重命名文件</span></span><br><span class="line">os.remove(<span class="string">&#x27;file.txt&#x27;</span>)  <span class="comment"># 删除文件</span></span><br><span class="line">shutil.copy(<span class="string">&#x27;source.txt&#x27;</span>, <span class="string">&#x27;dest.txt&#x27;</span>)  <span class="comment"># 复制文件</span></span><br><span class="line">shutil.move(<span class="string">&#x27;source.txt&#x27;</span>, <span class="string">&#x27;new_location&#x27;</span>)  <span class="comment"># 移动文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件信息</span></span><br><span class="line">file_exists = os.path.exists(<span class="string">&#x27;file.txt&#x27;</span>)  <span class="comment"># 检查文件是否存在</span></span><br><span class="line">is_file = os.path.isfile(<span class="string">&#x27;file.txt&#x27;</span>)  <span class="comment"># 是否是文件</span></span><br><span class="line">is_dir = os.path.isdir(<span class="string">&#x27;folder&#x27;</span>)  <span class="comment"># 是否是目录</span></span><br><span class="line">file_size = os.path.getsize(<span class="string">&#x27;file.txt&#x27;</span>)  <span class="comment"># 获取文件大小</span></span><br><span class="line">file_stats = os.stat(<span class="string">&#x27;file.txt&#x27;</span>)  <span class="comment"># 获取文件详细信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历目录</span></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">&#x27;folder&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;当前目录: <span class="subst">&#123;root&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;子目录: <span class="subst">&#123;dirs&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;文件: <span class="subst">&#123;files&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="4-1-3-二进制文件操作"><a href="#4-1-3-二进制文件操作" class="headerlink" title="4.1.3 二进制文件操作"></a><strong>4.1.3 二进制文件操作</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取二进制文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;image.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    binary_data = file.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入二进制文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;copy.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(binary_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用struct处理二进制数据</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据打包成二进制</span></span><br><span class="line">data = struct.pack(<span class="string">&#x27;iif&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3.14</span>)  <span class="comment"># i:int, f:float</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从二进制解包数据</span></span><br><span class="line">numbers = struct.unpack(<span class="string">&#x27;iif&#x27;</span>, data)</span><br></pre></td></tr></table></figure><h2 id="4-2-异常处理"><a href="#4-2-异常处理" class="headerlink" title="4.2 异常处理"></a><strong>4.2 异常处理</strong></h2><h3 id="4-2-1-基本异常处理"><a href="#4-2-1-基本异常处理" class="headerlink" title="4.2.1 基本异常处理"></a><strong>4.2.1 基本异常处理</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># try-except 基本结构</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数字: &quot;</span>))</span><br><span class="line">    result = <span class="number">10</span> / x</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入必须是数字&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不能除以零&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;结果是: <span class="subst">&#123;result&#125;</span>&quot;</span>)  <span class="comment"># 只在try块成功时执行</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这总是会执行&quot;</span>)  <span class="comment"># 无论是否发生异常都会执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个异常在一起处理</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 可能引发异常的代码</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> (ValueError, TypeError) <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;发生了值错误或类型错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="4-2-2-自定义异常"><a href="#4-2-2-自定义异常" class="headerlink" title="4.2.2 自定义异常"></a><strong>4.2.2 自定义异常</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义自定义异常</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, message, error_code</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(message)</span><br><span class="line">        <span class="variable language_">self</span>.error_code = error_code</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用自定义异常</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_age</span>(<span class="params">age</span>):</span><br><span class="line">    <span class="keyword">if</span> age &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> CustomError(<span class="string">&quot;年龄不能为负数&quot;</span>, <span class="number">1001</span>)</span><br><span class="line">    <span class="keyword">if</span> age &gt; <span class="number">150</span>:</span><br><span class="line">        <span class="keyword">raise</span> CustomError(<span class="string">&quot;年龄超出正常范围&quot;</span>, <span class="number">1002</span>)</span><br><span class="line">    <span class="keyword">return</span> age</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理自定义异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    age = process_age(-<span class="number">5</span>)</span><br><span class="line"><span class="keyword">except</span> CustomError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;错误 <span class="subst">&#123;e.error_code&#125;</span>: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="4-2-3-上下文管理器"><a href="#4-2-3-上下文管理器" class="headerlink" title="4.2.3 上下文管理器"></a><strong>4.2.3 上下文管理器</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义上下文管理器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileManager</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filename, mode</span>):</span><br><span class="line">        <span class="variable language_">self</span>.filename = filename</span><br><span class="line">        <span class="variable language_">self</span>.mode = mode</span><br><span class="line">        <span class="variable language_">self</span>.file = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.file = <span class="built_in">open</span>(<span class="variable language_">self</span>.filename, <span class="variable language_">self</span>.mode)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.file</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.file:</span><br><span class="line">            <span class="variable language_">self</span>.file.close()</span><br><span class="line">        <span class="comment"># 返回True表示异常已处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用自定义上下文管理器</span></span><br><span class="line"><span class="keyword">with</span> FileManager(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&#x27;Hello, World!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># contextlib装饰器创建上下文管理器</span></span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timer</span>():</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">yield</span>  <span class="comment"># 这里是with块中的代码执行点</span></span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;执行时间: <span class="subst">&#123;end - start&#125;</span>秒&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用timer上下文管理器</span></span><br><span class="line"><span class="keyword">with</span> timer():</span><br><span class="line">    <span class="comment"># 执行一些耗时操作</span></span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="4-2-4-调试和日志"><a href="#4-2-4-调试和日志" class="headerlink" title="4.2.4 调试和日志"></a><strong>4.2.4 调试和日志</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志</span></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>,</span><br><span class="line">    filename=<span class="string">&#x27;app.log&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建logger</span></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用不同级别的日志</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    logger.debug(<span class="string">&quot;调试信息&quot;</span>)</span><br><span class="line">    logger.info(<span class="string">&quot;普通信息&quot;</span>)</span><br><span class="line">    logger.warning(<span class="string">&quot;警告信息&quot;</span>)</span><br><span class="line">    result = <span class="number">1</span> / <span class="number">0</span>  <span class="comment"># 故意制造错误</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    logger.error(<span class="string">&quot;发生错误&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">    logger.critical(<span class="string">&quot;严重错误&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 断言</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_square_root</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">assert</span> n &gt;= <span class="number">0</span>, <span class="string">&quot;输入必须是非负数&quot;</span></span><br><span class="line">    <span class="keyword">return</span> n ** <span class="number">0.5</span></span><br></pre></td></tr></table></figure><h1 id="第五章：高级Python特性"><a href="#第五章：高级Python特性" class="headerlink" title="第五章：高级Python特性"></a><strong>第五章：高级Python特性</strong></h1><h2 id="5-1-迭代器和生成器"><a href="#5-1-迭代器和生成器" class="headerlink" title="5.1 迭代器和生成器"></a><strong>5.1 迭代器和生成器</strong></h2><h3 id="5-1-1-迭代器"><a href="#5-1-1-迭代器" class="headerlink" title="5.1.1 迭代器"></a><strong>5.1.1 迭代器</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义迭代器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CountDown</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, start</span>):</span><br><span class="line">        <span class="variable language_">self</span>.start = start</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.start &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        <span class="variable language_">self</span>.start -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.start + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用迭代器</span></span><br><span class="line">counter = CountDown(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> counter:</span><br><span class="line">    <span class="built_in">print</span>(num)  <span class="comment"># 5, 4, 3, 2, 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现可迭代的范围类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Range</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, start, end</span>):</span><br><span class="line">        <span class="variable language_">self</span>.start = start</span><br><span class="line">        <span class="variable language_">self</span>.end = end</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        current = <span class="variable language_">self</span>.start</span><br><span class="line">        <span class="keyword">while</span> current &lt; <span class="variable language_">self</span>.end:</span><br><span class="line">            <span class="keyword">yield</span> current</span><br><span class="line">            current += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用自定义范围</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># 1, 2, 3, 4</span></span><br></pre></td></tr></table></figure><h3 id="5-1-2-生成器"><a href="#5-1-2-生成器" class="headerlink" title="5.1.2 生成器"></a><strong>5.1.2 生成器</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成器函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>():</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用生成器</span></span><br><span class="line">fib = fibonacci()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>(fib))  <span class="comment"># 前10个斐波那契数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器表达式</span></span><br><span class="line">squares = (x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(squares))  <span class="comment"># [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器管道</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">numbers</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">squares</span>(<span class="params">numbers</span>):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="keyword">yield</span> n**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evens</span>(<span class="params">numbers</span>):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">yield</span> n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用生成器管道</span></span><br><span class="line">pipeline = evens(squares(numbers()))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(pipeline))  <span class="comment"># [4, 16, 36, 64, 100]</span></span><br></pre></td></tr></table></figure><h2 id="5-2-装饰器进阶"><a href="#5-2-装饰器进阶" class="headerlink" title="5.2 装饰器进阶"></a><strong>5.2 装饰器进阶</strong></h2><h3 id="5-2-1-带参数的装饰器"><a href="#5-2-1-带参数的装饰器" class="headerlink" title="5.2.1 带参数的装饰器"></a><strong>5.2.1 带参数的装饰器</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 带参数的装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">repeat</span>(<span class="params">times</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(times):</span><br><span class="line">                result = func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@repeat(<span class="params"><span class="number">3</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Hello <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类作为装饰器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trace</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, handle_result=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.handle_result = handle_result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Calling <span class="subst">&#123;func.__name__&#125;</span>&quot;</span>)</span><br><span class="line">            result = func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.handle_result:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Result: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@Trace(<span class="params">handle_result=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><h3 id="5-2-2-多重装饰器"><a href="#5-2-2-多重装饰器" class="headerlink" title="5.2.2 多重装饰器"></a><strong>5.2.2 多重装饰器</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bold</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;&lt;b&gt;<span class="subst">&#123;func()&#125;</span>&lt;/b&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">italic</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;&lt;i&gt;<span class="subst">&#123;func()&#125;</span>&lt;/i&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@bold</span></span><br><span class="line"><span class="meta">@italic</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hello())  <span class="comment"># &lt;b&gt;&lt;i&gt;Hello, World!&lt;/i&gt;&lt;/b&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-3-元类和类装饰器"><a href="#5-3-元类和类装饰器" class="headerlink" title="5.3 元类和类装饰器"></a><strong>5.3 元类和类装饰器</strong></h2><h3 id="5-3-1-元类"><a href="#5-3-1-元类" class="headerlink" title="5.3.1 元类"></a><strong>5.3.1 元类</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义元类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingletonMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    _instances = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> cls._instances:</span><br><span class="line">            cls._instances[cls] = <span class="built_in">super</span>().__call__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instances[cls]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用元类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Database</span>(metaclass=SingletonMeta):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.connected = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.connected = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证单例</span></span><br><span class="line">db1 = Database()</span><br><span class="line">db2 = Database()</span><br><span class="line"><span class="built_in">print</span>(db1 <span class="keyword">is</span> db2)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 属性验证元类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ValidateMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, attrs</span>):</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> attrs.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, <span class="built_in">property</span>):</span><br><span class="line">                attrs[<span class="string">f&#x27;_validate_<span class="subst">&#123;key&#125;</span>&#x27;</span>] = cls.create_validator(key)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_validator</span>(<span class="params">name</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">validator</span>(<span class="params">self, value</span>):</span><br><span class="line">            <span class="keyword">if</span> value &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> must be positive&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        <span class="keyword">return</span> validator</span><br></pre></td></tr></table></figure><h3 id="5-3-2-描述符"><a href="#5-3-2-描述符" class="headerlink" title="5.3.2 描述符"></a><strong>5.3.2 描述符</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 描述符示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Positive</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>._value = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._value.get(instance, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Value must be positive&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>._value[instance] = value</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">    x = Positive()</span><br><span class="line">    y = Positive()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="variable language_">self</span>.x = x</span><br><span class="line">        <span class="variable language_">self</span>.y = y</span><br></pre></td></tr></table></figure><h2 id="5-4-并发编程"><a href="#5-4-并发编程" class="headerlink" title="5.4 并发编程"></a><strong>5.4 并发编程</strong></h2><h3 id="5-4-1-多线程"><a href="#5-4-1-多线程" class="headerlink" title="5.4.1 多线程"></a><strong>5.4.1 多线程</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程安全的计数器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.value = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="variable language_">self</span>.lock:</span><br><span class="line">            current = <span class="variable language_">self</span>.value</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)  <span class="comment"># 模拟耗时操作</span></span><br><span class="line">            <span class="variable language_">self</span>.value = current + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建多个线程</span></span><br><span class="line">counter = Counter()</span><br><span class="line">threads = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    thread = threading.Thread(target=counter.increment)</span><br><span class="line">    threads.append(thread)</span><br><span class="line">    thread.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待所有线程完成</span></span><br><span class="line"><span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">    thread.join()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Final count: <span class="subst">&#123;counter.value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用线程池</span></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">3</span>) <span class="keyword">as</span> executor:</span><br><span class="line">    results = executor.<span class="built_in">map</span>(worker, <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(results))</span><br></pre></td></tr></table></figure><h3 id="5-4-2-多进程"><a href="#5-4-2-多进程" class="headerlink" title="5.4.2 多进程"></a><strong>5.4.2 多进程</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pool</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Worker <span class="subst">&#123;name&#125;</span>: <span class="subst">&#123;os.getpid()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建多个进程</span></span><br><span class="line">processes = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    p = Process(target=worker, args=(i,))</span><br><span class="line">    processes.append(p)</span><br><span class="line">    p.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待所有进程完成</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用进程池</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Pool(<span class="number">5</span>) <span class="keyword">as</span> p:</span><br><span class="line">    <span class="built_in">print</span>(p.<span class="built_in">map</span>(f, <span class="built_in">range</span>(<span class="number">10</span>)))</span><br></pre></td></tr></table></figure><h3 id="5-4-3-异步编程"><a href="#5-4-3-异步编程" class="headerlink" title="5.4.3 异步编程"></a><strong>5.4.3 异步编程</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">async_hello</span>(<span class="params">name, delay</span>):</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(delay)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Hello, <span class="subst">&#123;name&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 创建任务</span></span><br><span class="line">    tasks = [</span><br><span class="line">        async_hello(<span class="string">&quot;Alice&quot;</span>, <span class="number">2</span>),</span><br><span class="line">        async_hello(<span class="string">&quot;Bob&quot;</span>, <span class="number">1</span>),</span><br><span class="line">        async_hello(<span class="string">&quot;Charlie&quot;</span>, <span class="number">3</span>)</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment"># 并发执行</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*tasks)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行异步程序</span></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步上下文管理器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AsyncResource</span>:</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">__aenter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;获取资源&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">__aexit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;释放资源&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">use_resource</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> AsyncResource() <span class="keyword">as</span> res:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;使用资源&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="第六章：常用标准库"><a href="#第六章：常用标准库" class="headerlink" title="第六章：常用标准库"></a><strong>第六章：常用标准库</strong></h1><h2 id="6-1-文本处理"><a href="#6-1-文本处理" class="headerlink" title="6.1 文本处理"></a><strong>6.1 文本处理</strong></h2><h3 id="6-1-1-string-模块"><a href="#6-1-1-string-模块" class="headerlink" title="6.1.1 string 模块"></a><strong>6.1.1 string 模块</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用字符串常量</span></span><br><span class="line"><span class="built_in">print</span>(string.ascii_letters)   <span class="comment"># 所有字母</span></span><br><span class="line"><span class="built_in">print</span>(string.digits)         <span class="comment"># 数字</span></span><br><span class="line"><span class="built_in">print</span>(string.punctuation)    <span class="comment"># 标点符号</span></span><br><span class="line"><span class="built_in">print</span>(string.whitespace)     <span class="comment"># 空白字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串模板</span></span><br><span class="line">template = string.Template(<span class="string">&#x27;Hello, $name! You have $amount dollars.&#x27;</span>)</span><br><span class="line">result = template.substitute(name=<span class="string">&#x27;Alice&#x27;</span>, amount=<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h3 id="6-1-2-re-模块（正则表达式）"><a href="#6-1-2-re-模块（正则表达式）" class="headerlink" title="6.1.2 re 模块（正则表达式）"></a><strong>6.1.2 re 模块（正则表达式）</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;My email is user@example.com and phone is 123-456-7890&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配模式</span></span><br><span class="line">email_pattern = <span class="string">r&#x27;\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]&#123;2,&#125;\b&#x27;</span></span><br><span class="line">phone_pattern = <span class="string">r&#x27;\d&#123;3&#125;-\d&#123;3&#125;-\d&#123;4&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找所有匹配</span></span><br><span class="line">emails = re.findall(email_pattern, text)</span><br><span class="line">phones = re.findall(phone_pattern, text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line">new_text = re.sub(phone_pattern, <span class="string">&#x27;***-***-****&#x27;</span>, text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割文本</span></span><br><span class="line">words = re.split(<span class="string">r&#x27;\W+&#x27;</span>, text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用编译后的正则表达式（提高性能）</span></span><br><span class="line">email_regex = re.<span class="built_in">compile</span>(email_pattern)</span><br><span class="line">matches = email_regex.finditer(text)</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> matches:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Found email at position <span class="subst">&#123;<span class="keyword">match</span>.start()&#125;</span>: <span class="subst">&#123;<span class="keyword">match</span>.group()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="6-2-日期和时间"><a href="#6-2-日期和时间" class="headerlink" title="6.2 日期和时间"></a><strong>6.2 日期和时间</strong></h2><h3 id="6-2-1-datetime-模块"><a href="#6-2-1-datetime-模块" class="headerlink" title="6.2.1 datetime 模块"></a><strong>6.2.1 datetime 模块</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, date, time, timedelta</span><br><span class="line"><span class="keyword">import</span> pytz  <span class="comment"># 处理时区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前日期和时间</span></span><br><span class="line">now = datetime.now()</span><br><span class="line">today = date.today()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建日期和时间</span></span><br><span class="line">specific_date = date(<span class="number">2023</span>, <span class="number">12</span>, <span class="number">31</span>)</span><br><span class="line">specific_time = time(<span class="number">13</span>, <span class="number">30</span>, <span class="number">0</span>)</span><br><span class="line">specific_datetime = datetime(<span class="number">2023</span>, <span class="number">12</span>, <span class="number">31</span>, <span class="number">13</span>, <span class="number">30</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期格式化</span></span><br><span class="line">formatted = now.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">parsed = datetime.strptime(<span class="string">&quot;2023-12-31 13:30:00&quot;</span>, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间计算</span></span><br><span class="line">tomorrow = today + timedelta(days=<span class="number">1</span>)</span><br><span class="line">next_week = today + timedelta(weeks=<span class="number">1</span>)</span><br><span class="line">two_hours_later = now + timedelta(hours=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理时区</span></span><br><span class="line">utc = pytz.UTC</span><br><span class="line">pacific = pytz.timezone(<span class="string">&#x27;US/Pacific&#x27;</span>)</span><br><span class="line">utc_time = datetime.now(utc)</span><br><span class="line">pacific_time = utc_time.astimezone(pacific)</span><br></pre></td></tr></table></figure><h2 id="6-3-数据处理"><a href="#6-3-数据处理" class="headerlink" title="6.3 数据处理"></a><strong>6.3 数据处理</strong></h2><h3 id="6-3-1-json-模块"><a href="#6-3-1-json-模块" class="headerlink" title="6.3.1 json 模块"></a><strong>6.3.1 json 模块</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python对象转JSON</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="string">&#x27;cities&#x27;</span>: [<span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;London&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;active&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">&#x27;height&#x27;</span>: <span class="number">1.75</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化到字符串</span></span><br><span class="line">json_str = json.dumps(data, indent=<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(json_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列化到文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(data, f, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从字符串解析</span></span><br><span class="line">parsed_data = json.loads(json_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从文件解析</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    loaded_data = json.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义JSON编码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">person_encoder</span>(<span class="params">obj</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, Person):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;name&#x27;</span>: obj.name, <span class="string">&#x27;age&#x27;</span>: obj.age&#125;</span><br><span class="line">    <span class="keyword">raise</span> TypeError(<span class="string">f&#x27;Object of type <span class="subst">&#123;<span class="built_in">type</span>(obj)&#125;</span> is not JSON serializable&#x27;</span>)</span><br><span class="line"></span><br><span class="line">person = Person(<span class="string">&#x27;Bob&#x27;</span>, <span class="number">25</span>)</span><br><span class="line">json_str = json.dumps(person, default=person_encoder)</span><br></pre></td></tr></table></figure><h3 id="6-3-2-csv-模块"><a href="#6-3-2-csv-模块" class="headerlink" title="6.3.2 csv 模块"></a><strong>6.3.2 csv 模块</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入CSV文件</span></span><br><span class="line">data = [</span><br><span class="line">    [<span class="string">&#x27;Name&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;City&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;Alice&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;New York&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;Bob&#x27;</span>, <span class="number">30</span>, <span class="string">&#x27;London&#x27;</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.writer(f)</span><br><span class="line">    writer.writerows(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用字典写入</span></span><br><span class="line">dict_data = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;New York&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">30</span>, <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;London&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;dict_data.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    fieldnames = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;city&#x27;</span>]</span><br><span class="line">    writer = csv.DictWriter(f, fieldnames=fieldnames)</span><br><span class="line">    writer.writeheader()</span><br><span class="line">    writer.writerows(dict_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取CSV文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="built_in">print</span>(row)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取为字典</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;dict_data.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.DictReader(f)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        <span class="built_in">print</span>(row[<span class="string">&#x27;name&#x27;</span>], row[<span class="string">&#x27;age&#x27;</span>])</span><br></pre></td></tr></table></figure><h2 id="6-4-系统和OS操作"><a href="#6-4-系统和OS操作" class="headerlink" title="6.4 系统和OS操作"></a><strong>6.4 系统和OS操作</strong></h2><h3 id="6-4-1-os-和-sys-模块"><a href="#6-4-1-os-和-sys-模块" class="headerlink" title="6.4.1 os 和 sys 模块"></a><strong>6.4.1 os 和 sys 模块</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统信息</span></span><br><span class="line"><span class="built_in">print</span>(sys.platform)          <span class="comment"># 操作系统平台</span></span><br><span class="line"><span class="built_in">print</span>(sys.version)          <span class="comment"># Python版本</span></span><br><span class="line"><span class="built_in">print</span>(platform.system())    <span class="comment"># 操作系统名称</span></span><br><span class="line"><span class="built_in">print</span>(os.name)             <span class="comment"># 操作系统类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line"><span class="built_in">print</span>(os.environ.get(<span class="string">&#x27;PATH&#x27;</span>))</span><br><span class="line">os.environ[<span class="string">&#x27;MY_VAR&#x27;</span>] = <span class="string">&#x27;value&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 路径操作</span></span><br><span class="line">current_dir = os.getcwd()</span><br><span class="line">os.chdir(<span class="string">&#x27;..&#x27;</span>)             <span class="comment"># 改变当前目录</span></span><br><span class="line">path = os.path.join(<span class="string">&#x27;folder&#x27;</span>, <span class="string">&#x27;subfolder&#x27;</span>, <span class="string">&#x27;file.txt&#x27;</span>)</span><br><span class="line">abs_path = os.path.abspath(path)</span><br><span class="line">norm_path = os.path.normpath(path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目录操作</span></span><br><span class="line">os.makedirs(<span class="string">&#x27;new/nested/directory&#x27;</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.removedirs(<span class="string">&#x27;new/nested/directory&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;当前目录: <span class="subst">&#123;root&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;子目录: <span class="subst">&#123;dirs&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;文件: <span class="subst">&#123;files&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进程管理</span></span><br><span class="line">pid = os.getpid()          <span class="comment"># 当前进程ID</span></span><br><span class="line">os.system(<span class="string">&#x27;echo Hello&#x27;</span>)    <span class="comment"># 执行系统命令</span></span><br></pre></td></tr></table></figure><h3 id="6-4-2-argparse-模块"><a href="#6-4-2-argparse-模块" class="headerlink" title="6.4.2 argparse 模块"></a><strong>6.4.2 argparse 模块</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;示例命令行程序&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 添加参数</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;name&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;用户名&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-a&#x27;</span>, <span class="string">&#x27;--age&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&#x27;年龄&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-v&#x27;</span>, <span class="string">&#x27;--verbose&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;显示详细信息&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析参数</span></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 使用参数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Hello, <span class="subst">&#123;args.name&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> args.age:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;You are <span class="subst">&#123;args.age&#125;</span> years old&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> args.verbose:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Verbose mode enabled&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="6-4-3-logging-模块"><a href="#6-4-3-logging-模块" class="headerlink" title="6.4.3 logging 模块"></a><strong>6.4.3 logging 模块</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本配置</span></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>,</span><br><span class="line">    filename=<span class="string">&#x27;app.log&#x27;</span>,</span><br><span class="line">    filemode=<span class="string">&#x27;w&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建logger</span></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建控制台处理器</span></span><br><span class="line">console_handler = logging.StreamHandler()</span><br><span class="line">console_handler.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件处理器</span></span><br><span class="line">file_handler = logging.FileHandler(<span class="string">&#x27;error.log&#x27;</span>)</span><br><span class="line">file_handler.setLevel(logging.ERROR)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建格式器</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">console_handler.setFormatter(formatter)</span><br><span class="line">file_handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加处理器到logger</span></span><br><span class="line">logger.addHandler(console_handler)</span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录不同级别的日志</span></span><br><span class="line">logger.debug(<span class="string">&#x27;调试信息&#x27;</span>)</span><br><span class="line">logger.info(<span class="string">&#x27;一般信息&#x27;</span>)</span><br><span class="line">logger.warning(<span class="string">&#x27;警告信息&#x27;</span>)</span><br><span class="line">logger.error(<span class="string">&#x27;错误信息&#x27;</span>)</span><br><span class="line">logger.critical(<span class="string">&#x27;严重错误&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="第七章：算法与数据结构"><a href="#第七章：算法与数据结构" class="headerlink" title="第七章：算法与数据结构"></a><strong>第七章：算法与数据结构</strong></h1><h2 id="7-1-基本数据结构实现"><a href="#7-1-基本数据结构实现" class="headerlink" title="7.1 基本数据结构实现"></a><strong>7.1 基本数据结构实现</strong></h2><h3 id="7-1-1-链表"><a href="#7-1-1-链表" class="headerlink" title="7.1.1 链表"></a><strong>7.1.1 链表</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="variable language_">self</span>.data = data</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.head = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, data</span>):</span><br><span class="line">        new_node = Node(data)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.head:</span><br><span class="line">            <span class="variable language_">self</span>.head = new_node</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        current = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> current.<span class="built_in">next</span>:</span><br><span class="line">            current = current.<span class="built_in">next</span></span><br><span class="line">        current.<span class="built_in">next</span> = new_node</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prepend</span>(<span class="params">self, data</span>):</span><br><span class="line">        new_node = Node(data)</span><br><span class="line">        new_node.<span class="built_in">next</span> = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="variable language_">self</span>.head = new_node</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.head:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.head.data == data:</span><br><span class="line">            <span class="variable language_">self</span>.head = <span class="variable language_">self</span>.head.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        current = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> current.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">if</span> current.<span class="built_in">next</span>.data == data:</span><br><span class="line">                current.<span class="built_in">next</span> = current.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            current = current.<span class="built_in">next</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display</span>(<span class="params">self</span>):</span><br><span class="line">        elements = []</span><br><span class="line">        current = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> current:</span><br><span class="line">            elements.append(current.data)</span><br><span class="line">            current = current.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> elements</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">ll = LinkedList()</span><br><span class="line">ll.append(<span class="number">1</span>)</span><br><span class="line">ll.append(<span class="number">2</span>)</span><br><span class="line">ll.prepend(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(ll.display())  <span class="comment"># [0, 1, 2]</span></span><br><span class="line">ll.delete(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(ll.display())  <span class="comment"># [0, 2]</span></span><br></pre></td></tr></table></figure><h3 id="7-1-2-栈和队列"><a href="#7-1-2-栈和队列" class="headerlink" title="7.1.2 栈和队列"></a><strong>7.1.2 栈和队列</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 栈实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.items = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="variable language_">self</span>.items.append(item)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.items.pop()</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">&quot;Stack is empty&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.items[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">&quot;Stack is empty&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.items) == <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.items)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列实现</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.items = deque()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="variable language_">self</span>.items.append(item)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.items.popleft()</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">&quot;Queue is empty&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">front</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.is_empty():</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.items[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">raise</span> IndexError(<span class="string">&quot;Queue is empty&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.items) == <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.items)</span><br></pre></td></tr></table></figure><h3 id="7-1-3-二叉树"><a href="#7-1-3-二叉树" class="headerlink" title="7.1.3 二叉树"></a><strong>7.1.3 二叉树</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="variable language_">self</span>.data = data</span><br><span class="line">        <span class="variable language_">self</span>.left = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.root:</span><br><span class="line">            <span class="variable language_">self</span>.root = TreeNode(data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>._insert_recursive(<span class="variable language_">self</span>.root, data)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_insert_recursive</span>(<span class="params">self, node, data</span>):</span><br><span class="line">        <span class="keyword">if</span> data &lt; node.data:</span><br><span class="line">            <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                node.left = TreeNode(data)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>._insert_recursive(node.left, data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> node.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                node.right = TreeNode(data)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>._insert_recursive(node.right, data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 中序遍历</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inorder</span>(<span class="params">self</span>):</span><br><span class="line">        elements = []</span><br><span class="line">        <span class="variable language_">self</span>._inorder_recursive(<span class="variable language_">self</span>.root, elements)</span><br><span class="line">        <span class="keyword">return</span> elements</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_inorder_recursive</span>(<span class="params">self, node, elements</span>):</span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            <span class="variable language_">self</span>._inorder_recursive(node.left, elements)</span><br><span class="line">            elements.append(node.data)</span><br><span class="line">            <span class="variable language_">self</span>._inorder_recursive(node.right, elements)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 前序遍历</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">preorder</span>(<span class="params">self</span>):</span><br><span class="line">        elements = []</span><br><span class="line">        <span class="variable language_">self</span>._preorder_recursive(<span class="variable language_">self</span>.root, elements)</span><br><span class="line">        <span class="keyword">return</span> elements</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_preorder_recursive</span>(<span class="params">self, node, elements</span>):</span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            elements.append(node.data)</span><br><span class="line">            <span class="variable language_">self</span>._preorder_recursive(node.left, elements)</span><br><span class="line">            <span class="variable language_">self</span>._preorder_recursive(node.right, elements)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 后序遍历</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">postorder</span>(<span class="params">self</span>):</span><br><span class="line">        elements = []</span><br><span class="line">        <span class="variable language_">self</span>._postorder_recursive(<span class="variable language_">self</span>.root, elements)</span><br><span class="line">        <span class="keyword">return</span> elements</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_postorder_recursive</span>(<span class="params">self, node, elements</span>):</span><br><span class="line">        <span class="keyword">if</span> node:</span><br><span class="line">            <span class="variable language_">self</span>._postorder_recursive(node.left, elements)</span><br><span class="line">            <span class="variable language_">self</span>._postorder_recursive(node.right, elements)</span><br><span class="line">            elements.append(node.data)</span><br></pre></td></tr></table></figure><h2 id="7-2-排序算法"><a href="#7-2-排序算法" class="headerlink" title="7.2 排序算法"></a><strong>7.2 排序算法</strong></h2><h3 id="7-2-1-基本排序算法"><a href="#7-2-1-基本排序算法" class="headerlink" title="7.2.1 基本排序算法"></a><strong>7.2.1 基本排序算法</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 冒泡排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, n-i-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>]:</span><br><span class="line">                arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">selection_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        min_idx = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[min_idx]:</span><br><span class="line">                min_idx = j</span><br><span class="line">        arr[i], arr[min_idx] = arr[min_idx], arr[i]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insertion_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">        key = arr[i]</span><br><span class="line">        j = i-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> arr[j] &gt; key:</span><br><span class="line">            arr[j+<span class="number">1</span>] = arr[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        arr[j+<span class="number">1</span>] = key</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h3 id="7-2-2-高级排序算法"><a href="#7-2-2-高级排序算法" class="headerlink" title="7.2.2 高级排序算法"></a><strong>7.2.2 高级排序算法</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 快速排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(arr) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    </span><br><span class="line">    pivot = arr[<span class="built_in">len</span>(arr) // <span class="number">2</span>]</span><br><span class="line">    left = [x <span class="keyword">for</span> x <span class="keyword">in</span> arr <span class="keyword">if</span> x &lt; pivot]</span><br><span class="line">    middle = [x <span class="keyword">for</span> x <span class="keyword">in</span> arr <span class="keyword">if</span> x == pivot]</span><br><span class="line">    right = [x <span class="keyword">for</span> x <span class="keyword">in</span> arr <span class="keyword">if</span> x &gt; pivot]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> quick_sort(left) + middle + quick_sort(right)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 归并排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(arr) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    </span><br><span class="line">    mid = <span class="built_in">len</span>(arr) // <span class="number">2</span></span><br><span class="line">    left = merge_sort(arr[:mid])</span><br><span class="line">    right = merge_sort(arr[mid:])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> merge(left, right)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">left, right</span>):</span><br><span class="line">    result = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(left) <span class="keyword">and</span> j &lt; <span class="built_in">len</span>(right):</span><br><span class="line">        <span class="keyword">if</span> left[i] &lt;= right[j]:</span><br><span class="line">            result.append(left[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    result.extend(left[i:])</span><br><span class="line">    result.extend(right[j:])</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 堆排序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heapify</span>(<span class="params">arr, n, i</span>):</span><br><span class="line">    largest = i</span><br><span class="line">    left = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">    right = <span class="number">2</span> * i + <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> left &lt; n <span class="keyword">and</span> arr[left] &gt; arr[largest]:</span><br><span class="line">        largest = left</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> right &lt; n <span class="keyword">and</span> arr[right] &gt; arr[largest]:</span><br><span class="line">        largest = right</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> largest != i:</span><br><span class="line">        arr[i], arr[largest] = arr[largest], arr[i]</span><br><span class="line">        heapify(arr, n, largest)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heap_sort</span>(<span class="params">arr</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n // <span class="number">2</span> - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        heapify(arr, n, i)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        arr[<span class="number">0</span>], arr[i] = arr[i], arr[<span class="number">0</span>]</span><br><span class="line">        heapify(arr, i, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h2 id="7-3-搜索算法"><a href="#7-3-搜索算法" class="headerlink" title="7.3 搜索算法"></a><strong>7.3 搜索算法</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二分查找</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">arr, target</span>):</span><br><span class="line">    left, right = <span class="number">0</span>, <span class="built_in">len</span>(arr) - <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> arr[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> arr[mid] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 深度优先搜索 (DFS)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">graph, start, visited=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> visited <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        visited = <span class="built_in">set</span>()</span><br><span class="line">    </span><br><span class="line">    visited.add(start)</span><br><span class="line">    <span class="built_in">print</span>(start, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> next_vertex <span class="keyword">in</span> graph[start]:</span><br><span class="line">        <span class="keyword">if</span> next_vertex <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">            dfs(graph, next_vertex, visited)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> visited</span><br><span class="line"></span><br><span class="line"><span class="comment"># 广度优先搜索 (BFS)</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bfs</span>(<span class="params">graph, start</span>):</span><br><span class="line">    visited = <span class="built_in">set</span>([start])</span><br><span class="line">    queue = deque([start])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        vertex = queue.popleft()</span><br><span class="line">        <span class="built_in">print</span>(vertex, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> neighbor <span class="keyword">in</span> graph[vertex]:</span><br><span class="line">            <span class="keyword">if</span> neighbor <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                visited.add(neighbor)</span><br><span class="line">                queue.append(neighbor)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> visited</span><br></pre></td></tr></table></figure><h1 id="第八章：动态规划与贪心算法"><a href="#第八章：动态规划与贪心算法" class="headerlink" title="第八章：动态规划与贪心算法"></a><strong>第八章：动态规划与贪心算法</strong></h1><h2 id="8-1-动态规划基础"><a href="#8-1-动态规划基础" class="headerlink" title="8.1 动态规划基础"></a><strong>8.1 动态规划基础</strong></h2><h3 id="8-1-1-基本概念与实现方法"><a href="#8-1-1-基本概念与实现方法" class="headerlink" title="8.1.1 基本概念与实现方法"></a><strong>8.1.1 基本概念与实现方法</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 斐波那契数列 - 展示不同实现方法</span></span><br><span class="line"><span class="comment"># 1. 递归实现（效率低）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib_recursive</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> fib_recursive(n-<span class="number">1</span>) + fib_recursive(n-<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 记忆化递归（自顶向下）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib_memo</span>(<span class="params">n, memo=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> memo <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        memo = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> memo:</span><br><span class="line">        <span class="keyword">return</span> memo[n]</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    memo[n] = fib_memo(n-<span class="number">1</span>, memo) + fib_memo(n-<span class="number">2</span>, memo)</span><br><span class="line">    <span class="keyword">return</span> memo[n]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 动态规划（自底向上）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib_dp</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    dp = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">        dp[i] = dp[i-<span class="number">1</span>] + dp[i-<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> dp[n]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 空间优化的动态规划</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib_optimized</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    prev2, prev1 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">        curr = prev1 + prev2</span><br><span class="line">        prev2, prev1 = prev1, curr</span><br><span class="line">    <span class="keyword">return</span> prev1</span><br></pre></td></tr></table></figure><h3 id="8-1-2-经典动态规划问题"><a href="#8-1-2-经典动态规划问题" class="headerlink" title="8.1.2 经典动态规划问题"></a><strong>8.1.2 经典动态规划问题</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 最长递增子序列 (LIS)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">longest_increasing_subsequence</span>(<span class="params">arr</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> arr:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    dp = [<span class="number">1</span>] * n  <span class="comment"># dp[i]表示以arr[i]结尾的LIS长度</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">            <span class="keyword">if</span> arr[i] &gt; arr[j]:</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(dp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 编辑距离</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_distance</span>(<span class="params">word1, word2</span>):</span><br><span class="line">    m, n = <span class="built_in">len</span>(word1), <span class="built_in">len</span>(word2)</span><br><span class="line">    dp = [[<span class="number">0</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化边界</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        dp[i][<span class="number">0</span>] = i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">        dp[<span class="number">0</span>][j] = j</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 填充dp表</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> word1[i-<span class="number">1</span>] == word2[j-<span class="number">1</span>]:</span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(dp[i-<span class="number">1</span>][j],      <span class="comment"># 删除</span></span><br><span class="line">                              dp[i][j-<span class="number">1</span>],        <span class="comment"># 插入</span></span><br><span class="line">                              dp[i-<span class="number">1</span>][j-<span class="number">1</span>]) + <span class="number">1</span>  <span class="comment"># 替换</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[m][n]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 背包问题</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">knapsack</span>(<span class="params">weights, values, capacity</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(weights)</span><br><span class="line">    dp = [[<span class="number">0</span>] * (capacity + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(capacity + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> weights[i-<span class="number">1</span>] &lt;= w:</span><br><span class="line">                dp[i][w] = <span class="built_in">max</span>(dp[i-<span class="number">1</span>][w],</span><br><span class="line">                              dp[i-<span class="number">1</span>][w-weights[i-<span class="number">1</span>]] + values[i-<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dp[i][w] = dp[i-<span class="number">1</span>][w]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[n][capacity]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 最长公共子序列 (LCS)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">longest_common_subsequence</span>(<span class="params">text1, text2</span>):</span><br><span class="line">    m, n = <span class="built_in">len</span>(text1), <span class="built_in">len</span>(text2)</span><br><span class="line">    dp = [[<span class="number">0</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> text1[i-<span class="number">1</span>] == text2[j-<span class="number">1</span>]:</span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 重构最长公共子序列</span></span><br><span class="line">    lcs = []</span><br><span class="line">    i, j = m, n</span><br><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> j &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> text1[i-<span class="number">1</span>] == text2[j-<span class="number">1</span>]:</span><br><span class="line">            lcs.append(text1[i-<span class="number">1</span>])</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> dp[i-<span class="number">1</span>][j] &gt; dp[i][j-<span class="number">1</span>]:</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">reversed</span>(lcs))</span><br></pre></td></tr></table></figure><h2 id="8-2-贪心算法"><a href="#8-2-贪心算法" class="headerlink" title="8.2 贪心算法"></a><strong>8.2 贪心算法</strong></h2><h3 id="8-2-1-基本贪心问题"><a href="#8-2-1-基本贪心问题" class="headerlink" title="8.2.1 基本贪心问题"></a><strong>8.2.1 基本贪心问题</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 找零钱问题</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_change</span>(<span class="params">coins, amount</span>):</span><br><span class="line">    coins.sort(reverse=<span class="literal">True</span>)  <span class="comment"># 从大到小排序</span></span><br><span class="line">    result = []</span><br><span class="line">    remaining = amount</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line">        <span class="keyword">while</span> remaining &gt;= coin:</span><br><span class="line">            result.append(coin)</span><br><span class="line">            remaining -= coin</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result <span class="keyword">if</span> remaining == <span class="number">0</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 活动选择问题</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">activity_selection</span>(<span class="params">start, finish</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(start)</span><br><span class="line">    <span class="comment"># 按结束时间排序</span></span><br><span class="line">    activities = <span class="built_in">sorted</span>(<span class="built_in">zip</span>(start, finish), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">    selected = [activities[<span class="number">0</span>]]</span><br><span class="line">    last_finish = activities[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="keyword">if</span> activities[i][<span class="number">0</span>] &gt;= last_finish:</span><br><span class="line">            selected.append(activities[i])</span><br><span class="line">            last_finish = activities[i][<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> selected</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 区间调度问题</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">interval_scheduling</span>(<span class="params">intervals</span>):</span><br><span class="line">    <span class="comment"># 按结束时间排序</span></span><br><span class="line">    intervals.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">    selected = [intervals[<span class="number">0</span>]]</span><br><span class="line">    last_end = intervals[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> interval <span class="keyword">in</span> intervals[<span class="number">1</span>:]:</span><br><span class="line">        <span class="keyword">if</span> interval[<span class="number">0</span>] &gt;= last_end:</span><br><span class="line">            selected.append(interval)</span><br><span class="line">            last_end = interval[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> selected</span><br></pre></td></tr></table></figure><h3 id="8-2-2-高级贪心问题"><a href="#8-2-2-高级贪心问题" class="headerlink" title="8.2.2 高级贪心问题"></a><strong>8.2.2 高级贪心问题</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. Huffman编码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuffmanNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, char, freq</span>):</span><br><span class="line">        <span class="variable language_">self</span>.char = char</span><br><span class="line">        <span class="variable language_">self</span>.freq = freq</span><br><span class="line">        <span class="variable language_">self</span>.left = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_huffman_tree</span>(<span class="params">chars, freqs</span>):</span><br><span class="line">    nodes = [HuffmanNode(c, f) <span class="keyword">for</span> c, f <span class="keyword">in</span> <span class="built_in">zip</span>(chars, freqs)]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(nodes) &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 获取频率最小的两个节点</span></span><br><span class="line">        nodes.sort(key=<span class="keyword">lambda</span> x: x.freq)</span><br><span class="line">        left = nodes.pop(<span class="number">0</span>)</span><br><span class="line">        right = nodes.pop(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建新的内部节点</span></span><br><span class="line">        internal = HuffmanNode(<span class="literal">None</span>, left.freq + right.freq)</span><br><span class="line">        internal.left = left</span><br><span class="line">        internal.right = right</span><br><span class="line">        </span><br><span class="line">        nodes.append(internal)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> nodes[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_huffman_codes</span>(<span class="params">root, code=<span class="string">&quot;&quot;</span>, codes=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> codes <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        codes = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> root:</span><br><span class="line">        <span class="keyword">if</span> root.char:</span><br><span class="line">            codes[root.char] = code</span><br><span class="line">        get_huffman_codes(root.left, code + <span class="string">&quot;0&quot;</span>, codes)</span><br><span class="line">        get_huffman_codes(root.right, code + <span class="string">&quot;1&quot;</span>, codes)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> codes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 最小生成树 (Prim算法)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prim_mst</span>(<span class="params">graph</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(graph)</span><br><span class="line">    selected = [<span class="literal">False</span>] * n</span><br><span class="line">    selected[<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line">    edges = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">        minimum = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        x = y = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> selected[i]:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> selected[j] <span class="keyword">and</span> graph[i][j]:</span><br><span class="line">                        <span class="keyword">if</span> graph[i][j] &lt; minimum:</span><br><span class="line">                            minimum = graph[i][j]</span><br><span class="line">                            x, y = i, j</span><br><span class="line">        </span><br><span class="line">        selected[y] = <span class="literal">True</span></span><br><span class="line">        edges.append((x, y, graph[x][y]))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> edges</span><br></pre></td></tr></table></figure><h1 id="第九章：高级算法与技巧"><a href="#第九章：高级算法与技巧" class="headerlink" title="第九章：高级算法与技巧"></a><strong>第九章：高级算法与技巧</strong></h1><h2 id="9-1-图论算法"><a href="#9-1-图论算法" class="headerlink" title="9.1 图论算法"></a><strong>9.1 图论算法</strong></h2><h3 id="9-1-1-图的表示与基本操作"><a href="#9-1-1-图的表示与基本操作" class="headerlink" title="9.1.1 图的表示与基本操作"></a><strong>9.1.1 图的表示与基本操作</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 图的邻接表表示</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.graph = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_vertex</span>(<span class="params">self, vertex</span>):</span><br><span class="line">        <span class="keyword">if</span> vertex <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.graph:</span><br><span class="line">            <span class="variable language_">self</span>.graph[vertex] = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_edge</span>(<span class="params">self, v1, v2, directed=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="keyword">if</span> v1 <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.graph:</span><br><span class="line">            <span class="variable language_">self</span>.add_vertex(v1)</span><br><span class="line">        <span class="keyword">if</span> v2 <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.graph:</span><br><span class="line">            <span class="variable language_">self</span>.add_vertex(v2)</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.graph[v1].append(v2)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> directed:</span><br><span class="line">            <span class="variable language_">self</span>.graph[v2].append(v1)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_vertices</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(<span class="variable language_">self</span>.graph.keys())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_edges</span>(<span class="params">self</span>):</span><br><span class="line">        edges = []</span><br><span class="line">        <span class="keyword">for</span> vertex <span class="keyword">in</span> <span class="variable language_">self</span>.graph:</span><br><span class="line">            <span class="keyword">for</span> neighbor <span class="keyword">in</span> <span class="variable language_">self</span>.graph[vertex]:</span><br><span class="line">                edges.append((vertex, neighbor))</span><br><span class="line">        <span class="keyword">return</span> edges</span><br></pre></td></tr></table></figure><h3 id="9-1-2-最短路径算法"><a href="#9-1-2-最短路径算法" class="headerlink" title="9.1.2 最短路径算法"></a><strong>9.1.2 最短路径算法</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dijkstra最短路径算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dijkstra</span>(<span class="params">graph, start</span>):</span><br><span class="line">    distances = &#123;vertex: <span class="built_in">float</span>(<span class="string">&#x27;infinity&#x27;</span>) <span class="keyword">for</span> vertex <span class="keyword">in</span> graph&#125;</span><br><span class="line">    distances[start] = <span class="number">0</span></span><br><span class="line">    unvisited = <span class="built_in">set</span>(graph.keys())</span><br><span class="line">    path = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> unvisited:</span><br><span class="line">        current = <span class="built_in">min</span>(unvisited, key=<span class="keyword">lambda</span> vertex: distances[vertex])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> distances[current] == <span class="built_in">float</span>(<span class="string">&#x27;infinity&#x27;</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> neighbor, weight <span class="keyword">in</span> graph[current].items():</span><br><span class="line">            distance = distances[current] + weight</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> distance &lt; distances[neighbor]:</span><br><span class="line">                distances[neighbor] = distance</span><br><span class="line">                path[neighbor] = current</span><br><span class="line">                </span><br><span class="line">        unvisited.remove(current)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> distances, path</span><br><span class="line"></span><br><span class="line"><span class="comment"># Floyd-Warshall算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">floyd_warshall</span>(<span class="params">graph</span>):</span><br><span class="line">    vertices = <span class="built_in">list</span>(graph.keys())</span><br><span class="line">    n = <span class="built_in">len</span>(vertices)</span><br><span class="line">    dist = &#123;i: &#123;j: <span class="built_in">float</span>(<span class="string">&#x27;infinity&#x27;</span>) <span class="keyword">for</span> j <span class="keyword">in</span> vertices&#125; <span class="keyword">for</span> i <span class="keyword">in</span> vertices&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化距离矩阵</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> vertices:</span><br><span class="line">        dist[i][i] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> graph[i]:</span><br><span class="line">            dist[i][j] = graph[i][j]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 核心算法</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> vertices:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> vertices:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> vertices:</span><br><span class="line">                <span class="keyword">if</span> dist[i][k] + dist[k][j] &lt; dist[i][j]:</span><br><span class="line">                    dist[i][j] = dist[i][k] + dist[k][j]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dist</span><br></pre></td></tr></table></figure><h3 id="9-1-3-最小生成树算法"><a href="#9-1-3-最小生成树算法" class="headerlink" title="9.1.3 最小生成树算法"></a><strong>9.1.3 最小生成树算法</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Kruskal算法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, vertices</span>):</span><br><span class="line">        <span class="variable language_">self</span>.parent = &#123;v: v <span class="keyword">for</span> v <span class="keyword">in</span> vertices&#125;</span><br><span class="line">        <span class="variable language_">self</span>.rank = &#123;v: <span class="number">0</span> <span class="keyword">for</span> v <span class="keyword">in</span> vertices&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.parent[item] != item:</span><br><span class="line">            <span class="variable language_">self</span>.parent[item] = <span class="variable language_">self</span>.find(<span class="variable language_">self</span>.parent[item])</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.parent[item]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">union</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        xroot, yroot = <span class="variable language_">self</span>.find(x), <span class="variable language_">self</span>.find(y)</span><br><span class="line">        <span class="keyword">if</span> xroot == yroot:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.rank[xroot] &lt; <span class="variable language_">self</span>.rank[yroot]:</span><br><span class="line">            <span class="variable language_">self</span>.parent[xroot] = yroot</span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>.rank[xroot] &gt; <span class="variable language_">self</span>.rank[yroot]:</span><br><span class="line">            <span class="variable language_">self</span>.parent[yroot] = xroot</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.parent[yroot] = xroot</span><br><span class="line">            <span class="variable language_">self</span>.rank[xroot] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">kruskal</span>(<span class="params">graph</span>):</span><br><span class="line">    edges = []</span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> graph:</span><br><span class="line">        <span class="keyword">for</span> v, weight <span class="keyword">in</span> graph[u].items():</span><br><span class="line">            edges.append((weight, u, v))</span><br><span class="line">    </span><br><span class="line">    edges.sort()  <span class="comment"># 按权重排序</span></span><br><span class="line">    vertices = <span class="built_in">list</span>(graph.keys())</span><br><span class="line">    uf = UnionFind(vertices)</span><br><span class="line">    mst = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> weight, u, v <span class="keyword">in</span> edges:</span><br><span class="line">        <span class="keyword">if</span> uf.find(u) != uf.find(v):</span><br><span class="line">            uf.union(u, v)</span><br><span class="line">            mst.append((u, v, weight))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> mst</span><br></pre></td></tr></table></figure><h2 id="9-2-高级数据结构"><a href="#9-2-高级数据结构" class="headerlink" title="9.2 高级数据结构"></a><strong>9.2 高级数据结构</strong></h2><h3 id="9-2-1-平衡二叉树（AVL树）"><a href="#9-2-1-平衡二叉树（AVL树）" class="headerlink" title="9.2.1 平衡二叉树（AVL树）"></a><strong>9.2.1 平衡二叉树（AVL树）</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AVLNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="variable language_">self</span>.key = key</span><br><span class="line">        <span class="variable language_">self</span>.left = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.right = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.height = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AVLTree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_height</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> node.height</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_balance</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.get_height(node.left) - <span class="variable language_">self</span>.get_height(node.right)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">right_rotate</span>(<span class="params">self, y</span>):</span><br><span class="line">        x = y.left</span><br><span class="line">        T2 = x.right</span><br><span class="line">        </span><br><span class="line">        x.right = y</span><br><span class="line">        y.left = T2</span><br><span class="line">        </span><br><span class="line">        y.height = <span class="built_in">max</span>(<span class="variable language_">self</span>.get_height(y.left),</span><br><span class="line">                      <span class="variable language_">self</span>.get_height(y.right)) + <span class="number">1</span></span><br><span class="line">        x.height = <span class="built_in">max</span>(<span class="variable language_">self</span>.get_height(x.left),</span><br><span class="line">                      <span class="variable language_">self</span>.get_height(x.right)) + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">left_rotate</span>(<span class="params">self, x</span>):</span><br><span class="line">        y = x.right</span><br><span class="line">        T2 = y.left</span><br><span class="line">        </span><br><span class="line">        y.left = x</span><br><span class="line">        x.right = T2</span><br><span class="line">        </span><br><span class="line">        x.height = <span class="built_in">max</span>(<span class="variable language_">self</span>.get_height(x.left),</span><br><span class="line">                      <span class="variable language_">self</span>.get_height(x.right)) + <span class="number">1</span></span><br><span class="line">        y.height = <span class="built_in">max</span>(<span class="variable language_">self</span>.get_height(y.left),</span><br><span class="line">                      <span class="variable language_">self</span>.get_height(y.right)) + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, root, key</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> AVLNode(key)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> key &lt; root.key:</span><br><span class="line">            root.left = <span class="variable language_">self</span>.insert(root.left, key)</span><br><span class="line">        <span class="keyword">elif</span> key &gt; root.key:</span><br><span class="line">            root.right = <span class="variable language_">self</span>.insert(root.right, key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        </span><br><span class="line">        root.height = <span class="built_in">max</span>(<span class="variable language_">self</span>.get_height(root.left),</span><br><span class="line">                         <span class="variable language_">self</span>.get_height(root.right)) + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        balance = <span class="variable language_">self</span>.get_balance(root)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 左左情况</span></span><br><span class="line">        <span class="keyword">if</span> balance &gt; <span class="number">1</span> <span class="keyword">and</span> key &lt; root.left.key:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.right_rotate(root)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 右右情况</span></span><br><span class="line">        <span class="keyword">if</span> balance &lt; -<span class="number">1</span> <span class="keyword">and</span> key &gt; root.right.key:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.left_rotate(root)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 左右情况</span></span><br><span class="line">        <span class="keyword">if</span> balance &gt; <span class="number">1</span> <span class="keyword">and</span> key &gt; root.left.key:</span><br><span class="line">            root.left = <span class="variable language_">self</span>.left_rotate(root.left)</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.right_rotate(root)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 右左情况</span></span><br><span class="line">        <span class="keyword">if</span> balance &lt; -<span class="number">1</span> <span class="keyword">and</span> key &lt; root.right.key:</span><br><span class="line">            root.right = <span class="variable language_">self</span>.right_rotate(root.right)</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.left_rotate(root)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h3 id="9-2-2-红黑树"><a href="#9-2-2-红黑树" class="headerlink" title="9.2.2 红黑树"></a><strong>9.2.2 红黑树</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Color</span>:</span><br><span class="line">    RED = <span class="literal">True</span></span><br><span class="line">    BLACK = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RBNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="variable language_">self</span>.key = key</span><br><span class="line">        <span class="variable language_">self</span>.left = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.right = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.parent = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.color = Color.RED</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedBlackTree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.NIL = RBNode(<span class="literal">None</span>)</span><br><span class="line">        <span class="variable language_">self</span>.NIL.color = Color.BLACK</span><br><span class="line">        <span class="variable language_">self</span>.root = <span class="variable language_">self</span>.NIL</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">left_rotate</span>(<span class="params">self, x</span>):</span><br><span class="line">        y = x.right</span><br><span class="line">        x.right = y.left</span><br><span class="line">        <span class="keyword">if</span> y.left != <span class="variable language_">self</span>.NIL:</span><br><span class="line">            y.left.parent = x</span><br><span class="line">        y.parent = x.parent</span><br><span class="line">        <span class="keyword">if</span> x.parent == <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.root = y</span><br><span class="line">        <span class="keyword">elif</span> x == x.parent.left:</span><br><span class="line">            x.parent.left = y</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x.parent.right = y</span><br><span class="line">        y.left = x</span><br><span class="line">        x.parent = y</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">right_rotate</span>(<span class="params">self, x</span>):</span><br><span class="line">        y = x.left</span><br><span class="line">        x.left = y.right</span><br><span class="line">        <span class="keyword">if</span> y.right != <span class="variable language_">self</span>.NIL:</span><br><span class="line">            y.right.parent = x</span><br><span class="line">        y.parent = x.parent</span><br><span class="line">        <span class="keyword">if</span> x.parent == <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.root = y</span><br><span class="line">        <span class="keyword">elif</span> x == x.parent.right:</span><br><span class="line">            x.parent.right = y</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            x.parent.left = y</span><br><span class="line">        y.right = x</span><br><span class="line">        x.parent = y</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, key</span>):</span><br><span class="line">        node = RBNode(key)</span><br><span class="line">        node.left = <span class="variable language_">self</span>.NIL</span><br><span class="line">        node.right = <span class="variable language_">self</span>.NIL</span><br><span class="line">        </span><br><span class="line">        y = <span class="literal">None</span></span><br><span class="line">        x = <span class="variable language_">self</span>.root</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> x != <span class="variable language_">self</span>.NIL:</span><br><span class="line">            y = x</span><br><span class="line">            <span class="keyword">if</span> node.key &lt; x.key:</span><br><span class="line">                x = x.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x = x.right</span><br><span class="line">        </span><br><span class="line">        node.parent = y</span><br><span class="line">        <span class="keyword">if</span> y == <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.root = node</span><br><span class="line">        <span class="keyword">elif</span> node.key &lt; y.key:</span><br><span class="line">            y.left = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            y.right = node</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.fix_insert(node)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fix_insert</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="keyword">while</span> k.parent <span class="keyword">and</span> k.parent.color == Color.RED:</span><br><span class="line">            <span class="keyword">if</span> k.parent == k.parent.parent.right:</span><br><span class="line">                u = k.parent.parent.left</span><br><span class="line">                <span class="keyword">if</span> u.color == Color.RED:</span><br><span class="line">                    u.color = Color.BLACK</span><br><span class="line">                    k.parent.color = Color.BLACK</span><br><span class="line">                    k.parent.parent.color = Color.RED</span><br><span class="line">                    k = k.parent.parent</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> k == k.parent.left:</span><br><span class="line">                        k = k.parent</span><br><span class="line">                        <span class="variable language_">self</span>.right_rotate(k)</span><br><span class="line">                    k.parent.color = Color.BLACK</span><br><span class="line">                    k.parent.parent.color = Color.RED</span><br><span class="line">                    <span class="variable language_">self</span>.left_rotate(k.parent.parent)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                u = k.parent.parent.right</span><br><span class="line">                <span class="keyword">if</span> u.color == Color.RED:</span><br><span class="line">                    u.color = Color.BLACK</span><br><span class="line">                    k.parent.color = Color.BLACK</span><br><span class="line">                    k.parent.parent.color = Color.RED</span><br><span class="line">                    k = k.parent.parent</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> k == k.parent.right:</span><br><span class="line">                        k = k.parent</span><br><span class="line">                        <span class="variable language_">self</span>.left_rotate(k)</span><br><span class="line">                    k.parent.color = Color.BLACK</span><br><span class="line">                    k.parent.parent.color = Color.RED</span><br><span class="line">                    <span class="variable language_">self</span>.right_rotate(k.parent.parent)</span><br><span class="line">            <span class="keyword">if</span> k == <span class="variable language_">self</span>.root:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="variable language_">self</span>.root.color = Color.BLACK</span><br></pre></td></tr></table></figure><h1 id="Python全面练习题集"><a href="#Python全面练习题集" class="headerlink" title="Python全面练习题集"></a>Python全面练习题集</h1><h2 id="基础语法练习-Easy"><a href="#基础语法练习-Easy" class="headerlink" title="基础语法练习 (Easy)"></a>基础语法练习 (Easy)</h2><h3 id="1-数据类型与变量"><a href="#1-数据类型与变量" class="headerlink" title="1. 数据类型与变量"></a>1. 数据类型与变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习1: 基本数据类型转换</span></span><br><span class="line"><span class="comment"># 要求:</span></span><br><span class="line"><span class="comment"># 1. 将字符串&quot;123.45&quot;分别转换为整数和浮点数</span></span><br><span class="line"><span class="comment"># 2. 将数字转换为字符串</span></span><br><span class="line"><span class="comment"># 3. 演示不同进制数的表示(二进制、八进制、十六进制)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习2: 复数运算</span></span><br><span class="line"><span class="comment"># 要求:创建两个复数并进行加减乘除运算</span></span><br></pre></td></tr></table></figure><h3 id="2-字符串操作"><a href="#2-字符串操作" class="headerlink" title="2. 字符串操作"></a>2. 字符串操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习3: 字符串操作</span></span><br><span class="line"><span class="comment"># 要求:</span></span><br><span class="line"><span class="comment"># 1. 使用切片获取字符串的一部分</span></span><br><span class="line"><span class="comment"># 2. 使用字符串方法:upper(), lower(), strip(), split()</span></span><br><span class="line"><span class="comment"># 3. 检查字符串是否以特定字符开始/结束</span></span><br><span class="line"><span class="comment"># 4. 查找子字符串位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习4: 多行字符串处理</span></span><br><span class="line"><span class="comment"># 要求:处理一个包含多行文本的字符串,统计其中的单词数量</span></span><br></pre></td></tr></table></figure><h3 id="3-集合与字典"><a href="#3-集合与字典" class="headerlink" title="3. 集合与字典"></a>3. 集合与字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习5: 集合操作</span></span><br><span class="line"><span class="comment"># 要求:创建两个集合,演示交集、并集、差集操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习6: 字典操作</span></span><br><span class="line"><span class="comment"># 要求:</span></span><br><span class="line"><span class="comment"># 1. 创建一个嵌套字典</span></span><br><span class="line"><span class="comment"># 2. 使用get()方法安全获取值</span></span><br><span class="line"><span class="comment"># 3. 遍历字典的键值对</span></span><br><span class="line"><span class="comment"># 4. 更新字典内容</span></span><br></pre></td></tr></table></figure><h2 id="中级练习-Medium"><a href="#中级练习-Medium" class="headerlink" title="中级练习 (Medium)"></a>中级练习 (Medium)</h2><h3 id="4-函数进阶"><a href="#4-函数进阶" class="headerlink" title="4. 函数进阶"></a>4. 函数进阶</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习7: 函数参数</span></span><br><span class="line"><span class="comment"># 要求:创建一个函数,展示以下参数的使用:</span></span><br><span class="line"><span class="comment"># 1. 位置参数</span></span><br><span class="line"><span class="comment"># 2. 默认参数</span></span><br><span class="line"><span class="comment"># 3. 关键字参数</span></span><br><span class="line"><span class="comment"># 4. *args和**kwargs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习8: 闭包</span></span><br><span class="line"><span class="comment"># 要求:创建一个计数器闭包,每次调用返回递增的数字</span></span><br></pre></td></tr></table></figure><h3 id="5-装饰器"><a href="#5-装饰器" class="headerlink" title="5. 装饰器"></a>5. 装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习9: 带参数的装饰器</span></span><br><span class="line"><span class="comment"># 要求:创建一个可以设置重试次数的装饰器,用于函数执行失败时自动重试</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习10: 类装饰器</span></span><br><span class="line"><span class="comment"># 要求:创建一个类装饰器,用于记录被装饰函数的调用历史</span></span><br></pre></td></tr></table></figure><h3 id="6-生成器"><a href="#6-生成器" class="headerlink" title="6. 生成器"></a>6. 生成器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习11: 生成器函数</span></span><br><span class="line"><span class="comment"># 要求:实现一个斐波那契数列生成器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习12: 生成器表达式</span></span><br><span class="line"><span class="comment"># 要求:使用生成器表达式实现一个大文件的逐行读取器</span></span><br></pre></td></tr></table></figure><h2 id="高级练习-Hard"><a href="#高级练习-Hard" class="headerlink" title="高级练习 (Hard)"></a>高级练习 (Hard)</h2><h3 id="7-类与对象进阶"><a href="#7-类与对象进阶" class="headerlink" title="7. 类与对象进阶"></a>7. 类与对象进阶</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习13: 魔术方法</span></span><br><span class="line"><span class="comment"># 要求:创建一个分数类,实现以下魔术方法:</span></span><br><span class="line"><span class="comment"># 1. __str__和__repr__</span></span><br><span class="line"><span class="comment"># 2. __add__和__sub__</span></span><br><span class="line"><span class="comment"># 3. __eq__和__lt__</span></span><br><span class="line"><span class="comment"># 4. __len__</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习14: 属性装饰器</span></span><br><span class="line"><span class="comment"># 要求:创建一个温度类,使用@property实现摄氏度和华氏度的转换</span></span><br></pre></td></tr></table></figure><h3 id="8-元类"><a href="#8-元类" class="headerlink" title="8. 元类"></a>8. 元类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习15: 自定义元类</span></span><br><span class="line"><span class="comment"># 要求:创建一个元类,为所有使用该元类的类自动添加日志功能</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习16: 单例模式</span></span><br><span class="line"><span class="comment"># 要求:使用元类实现单例模式</span></span><br></pre></td></tr></table></figure><h3 id="9-并发编程"><a href="#9-并发编程" class="headerlink" title="9. 并发编程"></a>9. 并发编程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习17: 多线程</span></span><br><span class="line"><span class="comment"># 要求:创建一个线程池,并发下载多个URL的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习18: 多进程</span></span><br><span class="line"><span class="comment"># 要求:使用多进程实现一个简单的并行计算任务</span></span><br></pre></td></tr></table></figure><h2 id="专家级练习-Expert"><a href="#专家级练习-Expert" class="headerlink" title="专家级练习 (Expert)"></a>专家级练习 (Expert)</h2><h3 id="10-设计模式"><a href="#10-设计模式" class="headerlink" title="10. 设计模式"></a>10. 设计模式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习19: 观察者模式</span></span><br><span class="line"><span class="comment"># 要求:实现一个简单的事件系统,包含发布者和订阅者</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习20: 工厂模式</span></span><br><span class="line"><span class="comment"># 要求:实现一个形状工厂,可以创建不同的图形对象</span></span><br></pre></td></tr></table></figure><h3 id="11-异步编程"><a href="#11-异步编程" class="headerlink" title="11. 异步编程"></a>11. 异步编程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习21: 异步函数</span></span><br><span class="line"><span class="comment"># 要求:使用async/await实现一个异步网络请求客户端</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习22: 异步上下文管理器</span></span><br><span class="line"><span class="comment"># 要求:实现一个异步数据库连接管理器</span></span><br></pre></td></tr></table></figure><h3 id="12-项目实践"><a href="#12-项目实践" class="headerlink" title="12. 项目实践"></a>12. 项目实践</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习23: 命令行工具</span></span><br><span class="line"><span class="comment"># 要求:创建一个命令行工具,实现以下功能:</span></span><br><span class="line"><span class="comment"># 1. 文件批量重命名</span></span><br><span class="line"><span class="comment"># 2. 支持正则表达式匹配</span></span><br><span class="line"><span class="comment"># 3. 命令行参数解析</span></span><br><span class="line"><span class="comment"># 4. 进度条显示</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习24: 简单Web服务器</span></span><br><span class="line"><span class="comment"># 要求:实现一个基本的HTTP服务器:</span></span><br><span class="line"><span class="comment"># 1. 支持GET/POST请求</span></span><br><span class="line"><span class="comment"># 2. 支持静态文件服务</span></span><br><span class="line"><span class="comment"># 3. 简单的路由系统</span></span><br><span class="line"><span class="comment"># 4. 请求日志记录</span></span><br></pre></td></tr></table></figure><h1 id="Python练习题答案集"><a href="#Python练习题答案集" class="headerlink" title="Python练习题答案集"></a>Python练习题答案集</h1><h2 id="基础语法练习-Easy-1"><a href="#基础语法练习-Easy-1" class="headerlink" title="基础语法练习 (Easy)"></a>基础语法练习 (Easy)</h2><h3 id="1-数据类型与变量-1"><a href="#1-数据类型与变量-1" class="headerlink" title="1. 数据类型与变量"></a>1. 数据类型与变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习1答案: 基本数据类型转换</span></span><br><span class="line">str_num = <span class="string">&quot;123.45&quot;</span></span><br><span class="line">int_num = <span class="built_in">int</span>(<span class="built_in">float</span>(str_num))  <span class="comment"># 先转换为float再转换为int</span></span><br><span class="line">float_num = <span class="built_in">float</span>(str_num)</span><br><span class="line">str_back = <span class="built_in">str</span>(int_num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进制表示</span></span><br><span class="line">binary = <span class="number">0b1010</span>  <span class="comment"># 二进制</span></span><br><span class="line">octal = <span class="number">0o12</span>    <span class="comment"># 八进制</span></span><br><span class="line">hexa = <span class="number">0xA</span>      <span class="comment"># 十六进制</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;整数: <span class="subst">&#123;int_num&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;浮点数: <span class="subst">&#123;float_num&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;字符串: <span class="subst">&#123;str_back&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;二进制: <span class="subst">&#123;binary&#125;</span>, 八进制: <span class="subst">&#123;octal&#125;</span>, 十六进制: <span class="subst">&#123;hexa&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习2答案: 复数运算</span></span><br><span class="line">c1 = <span class="number">3</span> + <span class="number">4j</span></span><br><span class="line">c2 = <span class="number">1</span> - <span class="number">2j</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;加法: <span class="subst">&#123;c1 + c2&#125;</span>&quot;</span>)  <span class="comment"># (4+2j)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;减法: <span class="subst">&#123;c1 - c2&#125;</span>&quot;</span>)  <span class="comment"># (2+6j)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;乘法: <span class="subst">&#123;c1 * c2&#125;</span>&quot;</span>)  <span class="comment"># (11+2j)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;除法: <span class="subst">&#123;c1 / c2&#125;</span>&quot;</span>)  <span class="comment"># (-0.2+2.4j)</span></span><br></pre></td></tr></table></figure><h3 id="2-字符串操作-1"><a href="#2-字符串操作-1" class="headerlink" title="2. 字符串操作"></a>2. 字符串操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习3答案: 字符串操作</span></span><br><span class="line">text = <span class="string">&quot;Hello, Python World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片</span></span><br><span class="line"><span class="built_in">print</span>(text[<span class="number">0</span>:<span class="number">5</span>])      <span class="comment"># Hello</span></span><br><span class="line"><span class="built_in">print</span>(text[-<span class="number">6</span>:-<span class="number">1</span>])    <span class="comment"># World</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串方法</span></span><br><span class="line"><span class="built_in">print</span>(text.upper())   <span class="comment"># HELLO, PYTHON WORLD!</span></span><br><span class="line"><span class="built_in">print</span>(text.lower())   <span class="comment"># hello, python world!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;  space  &quot;</span>.strip())  <span class="comment"># &quot;space&quot;</span></span><br><span class="line">words = text.split()  <span class="comment"># [&#x27;Hello,&#x27;, &#x27;Python&#x27;, &#x27;World!&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查开始/结束</span></span><br><span class="line"><span class="built_in">print</span>(text.startswith(<span class="string">&quot;Hello&quot;</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(text.endswith(<span class="string">&quot;World!&quot;</span>))   <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找子字符串</span></span><br><span class="line"><span class="built_in">print</span>(text.find(<span class="string">&quot;Python&quot;</span>))  <span class="comment"># 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习4答案: 多行字符串处理</span></span><br><span class="line">text = <span class="string">&quot;&quot;&quot;First line</span></span><br><span class="line"><span class="string">Second line</span></span><br><span class="line"><span class="string">Third line with more words</span></span><br><span class="line"><span class="string">Last line&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计单词数量</span></span><br><span class="line">word_count = <span class="built_in">sum</span>(<span class="built_in">len</span>(line.split()) <span class="keyword">for</span> line <span class="keyword">in</span> text.splitlines())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;总单词数: <span class="subst">&#123;word_count&#125;</span>&quot;</span>)  <span class="comment"># 11</span></span><br></pre></td></tr></table></figure><h3 id="3-集合与字典-1"><a href="#3-集合与字典-1" class="headerlink" title="3. 集合与字典"></a>3. 集合与字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习5答案: 集合操作</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合运算</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;交集: <span class="subst">&#123;set1 &amp; set2&#125;</span>&quot;</span>)     <span class="comment"># &#123;4, 5&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;并集: <span class="subst">&#123;set1 | set2&#125;</span>&quot;</span>)     <span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7, 8&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;差集: <span class="subst">&#123;set1 - set2&#125;</span>&quot;</span>)     <span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;对称差集: <span class="subst">&#123;set1 ^ set2&#125;</span>&quot;</span>) <span class="comment"># &#123;1, 2, 3, 6, 7, 8&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习6答案: 字典操作</span></span><br><span class="line"><span class="comment"># 创建嵌套字典</span></span><br><span class="line">student = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">&quot;scores&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;math&quot;</span>: <span class="number">90</span>,</span><br><span class="line">        <span class="string">&quot;english&quot;</span>: <span class="number">85</span>,</span><br><span class="line">        <span class="string">&quot;history&quot;</span>: <span class="number">88</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安全获取值</span></span><br><span class="line"><span class="built_in">print</span>(student.get(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;未设置&quot;</span>))  <span class="comment"># 未设置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历字典</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> student.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新字典</span></span><br><span class="line">student.update(&#123;<span class="string">&quot;phone&quot;</span>: <span class="string">&quot;123-456-789&quot;</span>, <span class="string">&quot;email&quot;</span>: <span class="string">&quot;alice@example.com&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="中级练习-Medium-1"><a href="#中级练习-Medium-1" class="headerlink" title="中级练习 (Medium)"></a>中级练习 (Medium)</h2><h3 id="4-函数进阶-1"><a href="#4-函数进阶-1" class="headerlink" title="4. 函数进阶"></a>4. 函数进阶</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习7答案: 函数参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo_function</span>(<span class="params">pos1, pos2, default_arg=<span class="string">&quot;default&quot;</span>, *args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;位置参数: <span class="subst">&#123;pos1&#125;</span>, <span class="subst">&#123;pos2&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;默认参数: <span class="subst">&#123;default_arg&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;可变位置参数: <span class="subst">&#123;args&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;关键字参数: <span class="subst">&#123;kwargs&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试函数</span></span><br><span class="line">demo_function(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;custom&quot;</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, x=<span class="number">10</span>, y=<span class="number">20</span>)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># 位置参数: 1, 2</span></span><br><span class="line"><span class="comment"># 默认参数: custom</span></span><br><span class="line"><span class="comment"># 可变位置参数: (3, 4, 5)</span></span><br><span class="line"><span class="comment"># 关键字参数: &#123;&#x27;x&#x27;: 10, &#x27;y&#x27;: 20&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习8答案: 闭包</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_counter</span>():</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">counter</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> count</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="keyword">return</span> counter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试闭包</span></span><br><span class="line">counter = create_counter()</span><br><span class="line"><span class="built_in">print</span>(counter())  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(counter())  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(counter())  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h3 id="5-装饰器-1"><a href="#5-装饰器-1" class="headerlink" title="5. 装饰器"></a>5. 装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习9答案: 带参数的装饰器</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">retry</span>(<span class="params">max_attempts=<span class="number">3</span>, delay=<span class="number">1</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            attempts = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> attempts &lt; max_attempts:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    attempts += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> attempts == max_attempts:</span><br><span class="line">                        <span class="keyword">raise</span> e</span><br><span class="line">                    time.sleep(delay)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试装饰器</span></span><br><span class="line"><span class="meta">@retry(<span class="params">max_attempts=<span class="number">3</span>, delay=<span class="number">1</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unstable_function</span>():</span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="keyword">if</span> random.random() &lt; <span class="number">0.7</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Random error&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Success!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习10答案: 类装饰器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FunctionTracker</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func</span>):</span><br><span class="line">        <span class="variable language_">self</span>.func = func</span><br><span class="line">        <span class="variable language_">self</span>.history = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        result = <span class="variable language_">self</span>.func(*args, **kwargs)</span><br><span class="line">        <span class="variable language_">self</span>.history.append(&#123;</span><br><span class="line">            <span class="string">&#x27;args&#x27;</span>: args,</span><br><span class="line">            <span class="string">&#x27;kwargs&#x27;</span>: kwargs,</span><br><span class="line">            <span class="string">&#x27;result&#x27;</span>: result,</span><br><span class="line">            <span class="string">&#x27;time&#x27;</span>: time.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_history</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.history</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionTracker</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试类装饰器</span></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">2</span>, <span class="number">3</span>))  <span class="comment"># 5</span></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">4</span>, <span class="number">5</span>))  <span class="comment"># 9</span></span><br><span class="line"><span class="built_in">print</span>(add.get_history())</span><br></pre></td></tr></table></figure><p>[继续下一部分…]</p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五人定律的闲谈 - 更新中</title>
      <link href="/cn/46722/"/>
      <url>/cn/46722/</url>
      
        <content type="html"><![CDATA[<h1 id="五人定律的闲谈"><a href="#五人定律的闲谈" class="headerlink" title="五人定律的闲谈"></a>五人定律的闲谈</h1><blockquote><p>前段时间听室友聊到了五人定律，具体名称我也不知道叫什么只是听他们说叫五人定律<br>室友给出的具体解释是：你朋友的朋友的朋友… 延伸五层朋友圈后的最后那个人必定会认识某个人<br>然后我对这个定律来说有些想法，正好聊聊</p></blockquote><h1 id="话题的开始"><a href="#话题的开始" class="headerlink" title="话题的开始"></a>话题的开始</h1><p>一开始室友聊到了你朋友的朋友的朋友的朋友肯定会认识维尼平</p><p>然后引出了所谓的这个五人定律，和他另一个室友展开了激烈争辩 XD</p><p>另一个室友说，那显然不可能，阶级差距在那里无论如何都不可能认识的，指明这个定律肯定错误</p><p>然后开始的那个室友说这还有严格的理论支持，经过研究得出的</p><p>然后就是激烈的争辩 XD  但我没怎么听了，等到他们聊的差不多安静了</p><p>我就突然想到这个所谓五人定律本质以及一些延伸的反思</p><h1 id="论证"><a href="#论证" class="headerlink" title="论证"></a>论证</h1><p><strong>首先直接说结论，我觉得这是不成立的</strong></p><p>首先我去搜索了一下，所谓的 5人定律 确实存在，但是和这个定律无关，而是另一个定律，概率论相关的</p><p>如果好奇可以看看 <a href="https://zh.wikipedia.org/wiki/%E4%BA%94%E4%BA%BA%E6%B3%95%E5%88%99">Wiki - 5人法则</a> | <a href="https://baike.baidu.com/item/5%E4%BA%BA%E5%AE%9A%E5%BE%8B">百度百科 - 5人定律</a></p><p>但是对于这个定律，说不定它真的存在呢，说不定只是叫别的名字呢</p><p>所以，来论证下吧：</p><h2 id="成为定律条件"><a href="#成为定律条件" class="headerlink" title="成为定律条件"></a>成为定律条件</h2><p>首先定律规律这种东西，肯定要通过全部样本量或者再怎么说也需要极大部分样本量吧</p><p>如果一个定律不能满足绝大多数的样本量，适用任何情况，这个就不叫定律</p><p>所以作为定律来说，也就是不成立的</p><h2 id="五人定律本身"><a href="#五人定律本身" class="headerlink" title="五人定律本身"></a>五人定律本身</h2><p>用很简单的论证方式来攻破：我朋友的朋友的朋友…一直延伸五层</p><p>最终的那个人，也不可能亚马逊森林中的某个部落的成年男性</p><p>看起来有点极端，再来个比较危险的距离吧</p><p>我出生在普通小康家庭，五层朋友圈最后的那个人，也很难认识印度某个普通小康家庭中的一个小孩吧</p><p>显而易见，这个理论必定是错的</p><h2 id="如何成立"><a href="#如何成立" class="headerlink" title="如何成立"></a>如何成立</h2><p>这样来看这个定律本身是根本不成立的，但是从换个角度想如何会是成立的呢</p><h3 id="先聊聊限定条件这个事"><a href="#先聊聊限定条件这个事" class="headerlink" title="先聊聊限定条件这个事"></a>先聊聊限定条件这个事</h3><p>稍微观察下不难发现，问题出在难以满足大部分样本量，这个定律 <code>你朋友的朋友的朋友的朋友必定认识某个人</code> 几乎没有任何的限制条件</p><p>也就造成了几乎大部分的样本量都是无法满足的</p><p>那很简单，添加限制条件即可呀，就像今天我说 <code>一个数的次方一定不等于这个数</code> 肯定是错的一样</p><p>添加限制成 <code>不为 1 或 0 的某个数的次方一定不等于这个数</code> 这就成立了一样</p><p><code>避开不成立的样本到极致任何东西都可以成为定律</code></p><p>甚至这句话作为定律必定成立的条件就是有限定条件 <code>避开不成立的样本到极致</code> XD</p><p>限定条件就是这样，到最后就会变成确定事件了</p><h3 id="将五人定律限定条件成成立的"><a href="#将五人定律限定条件成成立的" class="headerlink" title="将五人定律限定条件成成立的"></a>将五人定律限定条件成成立的</h3><p>我觉得主要还是对样本量限制：</p><ul><li>处于现代人类社会，不能任何程度上的为孤立群体或个体 （例如原始部落中的一个小部落中的个体）</li><li>需要调整限定范围，提高范围内个体相互认识的概率，达到某个平衡自然随机按照这样抽样就成立</li></ul><h1 id="抛开这个定律本身"><a href="#抛开这个定律本身" class="headerlink" title="抛开这个定律本身"></a>抛开这个定律本身</h1><blockquote><p>其实真的想说的话题是这个，挺有想吐槽的点的说实话</p></blockquote><p>室友提出这个定律本身其实有很多现象，不觉得吗</p><p>包括耳听为虚的营销号夸大事实扩散消息可能，又或是学术捏造，再或是这种简化某个学术模型使其变成一个大众话题</p><p>后面有空了慢慢写吧…</p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 中传参关键字 ref 和 out 笔记</title>
      <link href="/cn/33368/"/>
      <url>/cn/33368/</url>
      
        <content type="html"><![CDATA[<blockquote><p>哎呀，这个两个关键字就写篇 blog 是不是有点小题大做了呀，但是还是记录一下吧<br>突然想到的这两个速记和区分用法，说不定能帮到正在学习 C# 的你</p></blockquote><h1 id="快速说明"><a href="#快速说明" class="headerlink" title="快速说明"></a>快速说明</h1><blockquote><p>看着比较理论枯燥，可以直接跳到 <a href="#%E4%B8%BE%E4%BE%8B%E8%AF%B4%E6%98%8E">举例说明</a> </p></blockquote><p><code>ref</code> 和 <code>out</code> 都是 C# 中用于按引用传递参数的关键字，它们的主要区别在于对参数初始化的要求和使用场景。</p><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><p>两者都按引用传递参数，这意味着方法内部对参数的修改会直接影响到原始变量。<br>在方法声明和调用时都需要显式使用关键字。</p><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><ul><li>初始化要求：<ul><li>传递给 <code>ref</code> 的变量必须在传递之前初始化。</li><li>传递给 <code>out</code> 的变量不必在传递之前初始化，但必须在方法内部赋值。</li></ul></li><li>使用场景：<ul><li>需要在方法内部修改调用方传递的变量时。</li><li>主要用于方法返回多个值，或者需要在方法内部初始化参数时。</li></ul></li><li>侧重点：<ul><li><code>ref</code> 侧重于修改传入的参数。</li><li><code>out</code> 侧重于输出参数，将方法内部的值传递给调用方。</li></ul></li></ul><h2 id="更详细的解释"><a href="#更详细的解释" class="headerlink" title="更详细的解释"></a>更详细的解释</h2><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>ref 就像是给原始变量取了一个别名，方法内部通过这个别名操作的就是原始变量本身。<br>由于操作的是原始变量，因此必须保证变量在传递之前已经有值。<br>可以理解为“有进有出”，既可以传递值给方法，也可以从方法中获取修改后的值。</p><h3 id="out"><a href="#out" class="headerlink" title="out"></a>out</h3><p>out 更像是方法用来“输出”数据的通道。<br>方法内部必须对 out 参数进行赋值，否则会导致编译错误。<br>即使在方法外部初始化了变量，在方法内部也会被覆盖。<br>可以理解为“只出不进”，方法只负责给参数赋值，并将值传递给调用方。</p><h1 id="代码举例说明"><a href="#代码举例说明" class="headerlink" title="代码举例说明"></a>代码举例说明</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Example</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RefExample</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> num</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 首先！通过参数列表获取到了传进来的引用，并将其命名为 num，本质上还是 a</span></span><br><span class="line">        <span class="comment">// 然后！ 对这个获取到的变量直接进行一顿操作，比如下面的 num += 10</span></span><br><span class="line">        num += <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 最后！ 方法执行完毕，回到 Main 方法中去吧 ~</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OutExample</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">int</span> num</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 进入方法！参数列表中可以理解为：新建了一个 int 变量 num，并且和方法外部传进来的变量是关联的</span></span><br><span class="line">        <span class="comment">// 怎么个关联法呢？那就是最终方法结束时，会把这个 num 传出去，就跟方法 return 一个值类似</span></span><br><span class="line">        <span class="comment">// 所以！既然是新建的变量，肯定要初始化呀（声明已经在参数列表中声明过了哦）也就是为什么要赋值，不能直接操作</span></span><br><span class="line"></span><br><span class="line">        num = <span class="number">20</span>;  <span class="comment">// 赋值！</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法结束了，这个变量会输出给方法外部，也就是赋值给 b</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 喂！直接从这里开始看说明哦！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 首先来看 ref 的用法</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> a = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里调用 RefExample 方法，！可以理解为：传入参数是 a 的引用</span></span><br><span class="line">        <span class="comment">// 因为是 a 的一个引用，所以 a 本身肯定要已经存在了对吧，所以需要初始化，也就是上面的 int a = 5;</span></span><br><span class="line">        RefExample(<span class="keyword">ref</span> a);  <span class="comment">// 接着跳到这个方法内部看说明哦 ヾ(•ω•`)</span></span><br><span class="line">        <span class="comment">// 因为在 RefExample 方法内部对 a 进行了操作，所以 a 的值已经被改变啦</span></span><br><span class="line">        </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;使用 ref 后 a 的值为：<span class="subst">&#123;a&#125;</span>&quot;</span>); <span class="comment">// 所以输出：15</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 因为是传递一个变量的引用，所以这个变量肯定得先存在，所以要在这里先初始化</span></span><br><span class="line">        <span class="comment">// 在方法内部不需要对这个变量赋值（或者也可以说初始化），因为已经知道这个变量是什么了（毕竟传递的是引用，不是无名变量）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ---------------------------------- 分割线 ---------------------------------------</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接着来看 out 的用法</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> b;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里调用 OutExample 方法，！可以理解为：执行一个方法，获取了一个返回值并传递赋值给 b</span></span><br><span class="line">        <span class="comment">// 因为 b 是要被赋值（初始化）的，所以当然一开始不需要初始化，只需要声明（声明基本所有情况肯定是必须的哟）</span></span><br><span class="line">        OutExample(<span class="keyword">out</span> b);  <span class="comment">// 接着跳到这个方法内部看说明吧 ヾ(•ω•`)</span></span><br><span class="line">        <span class="comment">// 此时！b 等于是接受了方法执行后的输出，也就是方法内部的 num 这个存在</span></span><br><span class="line">        </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;使用 out 后 b 的值为：<span class="subst">&#123;b&#125;</span>&quot;</span>); <span class="comment">// 输出：20</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这也就是为什么，这里不需要初始化（会接受到方法内部的输出，无论如何都会覆盖掉原本的值）</span></span><br><span class="line">        <span class="comment">// 但是方法内部需要进行赋值或者说初始化（因为此时才要让变量存在，然后去输出出去）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ---------------------------------- 分割线 ---------------------------------------</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接着看看错误情况</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 尝试不初始化 ref 参数，会导致编译错误</span></span><br><span class="line">        <span class="built_in">int</span> c;</span><br><span class="line">        RefExample(<span class="keyword">ref</span> c); <span class="comment">// 编译错误：使用了未赋值的局部变量“c”</span></span><br><span class="line">        <span class="comment">// 可这样理解：此时编译器都不知道 c 的值是多少，其在内存中的位置是薛定谔的猫，那怎么知道其引用是什么呢</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. out 尝试在赋值前使用 out 参数会导致编译错误</span></span><br><span class="line">        <span class="built_in">int</span> d;</span><br><span class="line">        OutExample2(<span class="keyword">out</span> d);  <span class="comment">// 方法实现写下面了</span></span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;使用 out 后 d 的值为：<span class="subst">&#123;d&#125;</span>&quot;</span>);  <span class="comment">// 会导致编译错误，因为 d 在此时尚未赋值</span></span><br><span class="line">        <span class="comment">// 可这样理解：此时编译器中新建的变量 num 是薛定谔的猫，其值是未知的，那怎么知道增加后的值是多少呢</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OutExample2</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">int</span> num</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 需要在方法内部对 d 进行赋值后才能使用，如先： num = 20; </span></span><br><span class="line">        num += <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其他记忆方法"><a href="#其他记忆方法" class="headerlink" title="其他记忆方法"></a>其他记忆方法</h1><h2 id="1-从英文单词的含义出发："><a href="#1-从英文单词的含义出发：" class="headerlink" title="1. 从英文单词的含义出发："></a>1. 从英文单词的含义出发：</h2><p>ref (reference 的缩写)： 意味着“引用”。可以理解为“通过引用传递”，就像给变量取了一个别名，方法内部操作的就是原始变量本身。因此，原始变量必须先“存在”（即初始化）。<br>out (output 的缩写)： 意味着“输出”。可以理解为方法用来“输出”数据的通道。方法负责给 out 参数赋值，并将值传递给调用方。因此，原始变量可以“不存在”（即不初始化），方法会负责“创造”它。</p><h2 id="2-类比生活中的场景："><a href="#2-类比生活中的场景：" class="headerlink" title="2. 类比生活中的场景："></a>2. 类比生活中的场景：</h2><p>ref： 想象你把家里的钥匙（原始变量）交给你的朋友（方法），让他帮你去家里拿东西。你的朋友必须先有钥匙才能进门（初始化）。他拿到东西后，你家里就有了那个东西（修改原始变量）。<br>out： 想象你委托快递员（方法）去商店买东西。你不需要事先给快递员任何东西（不初始化）。快递员到商店买好东西后，会把东西交给你（方法给 out 参数赋值）。</p><h2 id="3-关注初始化要求："><a href="#3-关注初始化要求：" class="headerlink" title="3. 关注初始化要求："></a>3. 关注初始化要求：</h2><p>这是 ref 和 out 最关键的区别，也是最容易记住的点：</p><p>ref 需要“先有后用”： 传递 ref 参数前必须初始化。<br>out 可以“先用后有”： 传递 out 参数前可以不初始化，但方法内部必须赋值。</p><h2 id="4-从方法的功能角度考虑："><a href="#4-从方法的功能角度考虑：" class="headerlink" title="4. 从方法的功能角度考虑："></a>4. 从方法的功能角度考虑：</h2><p>ref 侧重于“修改”： 方法需要修改调用方传入的变量。<br>out 侧重于“输出”： 方法需要返回多个值，或者需要在方法内部初始化参数。</p><h2 id="5-口诀记忆法："><a href="#5-口诀记忆法：" class="headerlink" title="5. 口诀记忆法："></a>5. 口诀记忆法：</h2><p>可以尝试用一些简单的口诀来记忆：</p><p>ref： “引用传递先赋值，方法内外都变化。”<br>out： “输出参数不强求，方法内部必须赋。”</p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈我对Duolingo的看法吧 - 待更新</title>
      <link href="/cn/62686/"/>
      <url>/cn/62686/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>个人投资经验记录 - 更新中</title>
      <link href="/cn/60247/"/>
      <url>/cn/60247/</url>
      
        <content type="html"><![CDATA[<h1 id="加密货币"><a href="#加密货币" class="headerlink" title="加密货币"></a>加密货币</h1><blockquote><p>来自投资学小白的一些经验记录和想法，不构成投资建议！</p></blockquote><h2 id="多单空单做风险对冲"><a href="#多单空单做风险对冲" class="headerlink" title="多单空单做风险对冲"></a>多单空单做风险对冲</h2><blockquote><p>作为经济学和投资的小白，面对近期 Trump 1.20 上台的利好，但又有多项数据的利空因素等强不确定性因素，导致的波动行情</p></blockquote><p>我也算是突然一下意识到这段行情应该同时做多和做空开合约，以对冲风险的</p><p>从前想着同时做多和做空，那不就是不赚不亏吗，还在想那这样对冲基金都在赚什么啊</p><p>现在突然明白了，根本没有那么简单，而且光从这一个多空单同时开来讲就意识到了不少事情</p><h3 id="特殊行情特殊对待"><a href="#特殊行情特殊对待" class="headerlink" title="特殊行情特殊对待"></a>特殊行情特殊对待</h3><p>满足以下行情条件：</p><ul><li>十分明显的 <code>强不确定因素行情</code></li><li>显著的 <code>横盘波动行情</code></li><li>较 <code>可预测波动结束日期</code></li><li>可预测的 <code>最终盘面趋势</code></li></ul><p>其实本质还是做波段，但是以后真的需要多加注意这种类似行情</p><p>完全可以直接考虑多空单同时开合约，对冲风险的同时，还能赚取波段利润</p><p>比如这次对应的就是</p><ul><li>特朗普上台利好，但同时存在多项数据和经济指标利空因素，市场 <code>不确定因素强烈</code></li><li>盘面 <code>横盘波动</code>，且波动幅度较为可预测</li><li><code>波动结束</code> 将会临近特朗普就职前后</li><li>盘面最终 <code>趋势是上涨</code>（特朗普最终上台政策利好，周期性牛市，减少降息已被市场 price in 则增加降息必定利好等）</li></ul><h3 id="交错的部分平仓"><a href="#交错的部分平仓" class="headerlink" title="交错的部分平仓"></a>交错的部分平仓</h3><ol><li>行情 <code>下跌</code>，<code>空单</code> 部分平仓</li><li>行情 <code>上涨</code>，<code>多单</code> 部分平仓</li><li><code>平仓比例</code> 随着 预测波动结束日期进行 <code>实时调整</code><ul><li>例如最终大趋势是上涨，则越临近 <code>波动结束日</code>，空单 <code>平仓比例</code> 就多一些，反之亦然</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 投资 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 投资 </tag>
            
            <tag> 认知 </tag>
            
            <tag> 推荐文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何下载使用 Mixamo 免费模型和动画</title>
      <link href="/cn/34203/"/>
      <url>/cn/34203/</url>
      
        <content type="html"><![CDATA[<h1 id="如何从-Mixamo-下载免费模型和动画"><a href="#如何从-Mixamo-下载免费模型和动画" class="headerlink" title="如何从 Mixamo 下载免费模型和动画"></a>如何从 Mixamo 下载免费模型和动画</h1><p><a href="https://www.mixamo.com/">Mixamo 官网</a></p><blockquote><p>Mixamo 是一个提供免费模型和动画的网站，可以用于游戏开发</p></blockquote><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><ol><li>左上角 Character 可以用于 选择模型，也可以在右侧 Upload Character 自己上传模型</li><li>左上角 Animation 用于 选择动画，此时动画播放是基于你当前的模型的</li><li>这边如果没有自己的模型，推荐就直接使用官方的 X Bot 模型，然后选择动画，然后下载</li></ol><h2 id="下载时选项"><a href="#下载时选项" class="headerlink" title="下载时选项"></a>下载时选项</h2><ul><li>Format: 导出格式选项<ul><li>FBX Binary: 二进制FBX格式，文件较小</li><li>FBX ASCII: 文本格式FBX，文件较大但可读性好</li><li>FBX for Unity: 专门为Unity优化的FBX格式</li></ul></li><li>Skin: 是否包含模型的皮肤数据<ul><li>With Skin: 下载的FBX文件包含模型和动画</li><li>Without Skin: 只下载动画数据，适合已有模型只需要动画的情况</li></ul></li><li>Frame per second(FPS): 动画的帧率<ul><li>数值越高动画越流畅，但文件也越大</li><li>一般游戏用30或60即可</li></ul></li><li>KeyFrame Reduction: 关键帧简化程度<ul><li>None: 不简化，保留所有关键帧</li><li>Simplified: 简化部分关键帧，可以减小文件大小</li><li>High Quality&#x2F;Medium Quality&#x2F;Low Quality: 不同程度的简化，文件大小依次减小<blockquote><p>这边一般我默认选择 FBX Binary 、 With Skin 、 60 FPS 、 None</p></blockquote></li></ul></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>当一些重复产生位移的动画，比如走路，跑步，跳跃等，右侧可能会出现一个 In Place 的选项，推荐勾选，这样避免播放动画时产生位移</li></ol><h1 id="如何在-Unity-中使用-Mixamo-的动画和模型"><a href="#如何在-Unity-中使用-Mixamo-的动画和模型" class="headerlink" title="如何在 Unity 中使用 Mixamo 的动画和模型"></a>如何在 Unity 中使用 Mixamo 的动画和模型</h1><h2 id="使用-Mixamo-模型"><a href="#使用-Mixamo-模型" class="headerlink" title="使用 Mixamo 模型"></a>使用 Mixamo 模型</h2><ol><li><strong>下载模型</strong>: 从 Mixamo 下载所需的模型，确保选择合适的导出格式（推荐 FBX Binary）。</li><li><strong>导入模型</strong>: 在 Unity 中，打开项目并将下载的 FBX 文件拖入 Assets 文件夹中。</li><li><strong>设置模型</strong>: 选择导入的模型，检查 Inspector 面板中的设置，确保模型的缩放和其他参数符合需求。</li></ol><h2 id="使用-Mixamo-动画"><a href="#使用-Mixamo-动画" class="headerlink" title="使用 Mixamo 动画"></a>使用 Mixamo 动画</h2><ol><li><strong>下载动画</strong>: 在 Mixamo 中选择所需的动画，并确保选择与模型相匹配的设置（如 FPS 和 Skin）。</li><li><strong>导入动画</strong>: 将下载的动画文件（FBX）拖入 Unity 的 Assets 文件夹，点击FBX文件右侧的小三角，选择到动画剪切，粘贴到 Assets 文件夹中<br> 如果需要批量从 Mixamo 抽取动画， 可以参考我的 <a href="https://lave.fun/cn/38912/">如何批量从 Mixamo 抽取动画</a></li><li><strong>应用动画</strong>: <ul><li>选择模型，添加 Animator 组件。</li><li>创建 Animator Controller，并将其分配给模型的 Animator 组件。</li><li>在 Animator Controller 中，添加下载的动画，并设置状态机以控制动画的播放。</li></ul></li></ol><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>确保模型和动画的骨骼结构兼容，以避免动画播放时出现问题。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息 </tag>
            
            <tag> 实用 </tag>
            
            <tag> 游戏开发 </tag>
            
            <tag> 开发 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法知识点</title>
      <link href="/cn/60988/"/>
      <url>/cn/60988/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构与算法知识点"><a href="#数据结构与算法知识点" class="headerlink" title="数据结构与算法知识点"></a>数据结构与算法知识点</h1><h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><ol><li><p>数据结构是研究程序设计中数据的 <code>C.逻辑存储</code> 及它们之间计算方法和运算的学科。</p></li><li><p>数据结构是研究程序设计中数据的元素及它们之间的 <code>A.元素</code> 和运算的学科。</p></li><li><p>数据的逻辑结构分为 <code>C.线性结构和非线性结构</code> 两类。</p></li><li><p>数据的逻辑结构是 <code>A.数据元素之间逻辑</code> 关系的整体。</p></li><li><p>在线性表的下列存储结构中，读取指定序号的元素所花费的时间最少的是 <code>D.顺序表</code> 。</p></li><li><p>链表不具有的特点是（ ）。<br><code>A.可随机访问任一元素</code></p></li><li><p>栈是一种（ ）。<br><code>B.先进后出的线性结构</code></p></li><li><p>队列中出队操作发生在（ ）。<br><code>A.队头</code></p></li><li><p>在环形队列中元素的排列顺序（ ）。<br><code>A.由元素进队的先后顺序确定</code></p></li><li><p>若某环形队列有队头指针 front和队尾指针 rear，在队不满时进队操作会改变（ ）。<br><code>B.rear</code></p></li><li><p>顺序表与链表的主要区别在于（ ）<br><code>A.存储结构不同</code></p></li><li><p>在单链表中查找第 i个元素的时间复杂度是（  ）<br><code>C. O(n)</code></p></li><li><p>串是一种特殊的线性表，其特殊性体现在（ ）。<br><code>B.数据元素是一个在字符</code></p></li><li><p>以下关于串的叙述中正确的是（ ）。<br><code>A.串是一种特殊的线性表</code></p></li><li><p>两个字符串相等的条件是（  ）。<br><code>D.串的长度相等且对应的字符相同</code></p></li><li><p>设有两个串 s和 t，判断 t是否为 s的子串的算法称为（ ）。<br><code>C.串匹配</code></p></li><li><p>一个正确的递归算法通常包含（ ）。<br><code>C.递归出口和递归体</code></p></li><li><p>一个正确的递归算法通常包含（ ）。<br><code>C.递归出口和递归体</code></p></li><li><p>递归函数 f(1)&#x3D;1，f(n)&#x3D;f(n-1)+n(n&gt;1)的递归体是（  ）。<br><code>C.f(n)=f(n-1)+n</code></p></li><li><p>递归函数 f(1)&#x3D;1，f(n)&#x3D;f(n-1)+n(n&gt;1)的递归出口是（  ）。<br><code>A.f(1)=1</code></p></li></ol><h6 id="回到-21-题"><a href="#回到-21-题" class="headerlink" title="回到 21 题"></a>回到 21 题</h6><ol start="21"><li><p>在下列 4个 <a href="#%E5%B9%BF%E4%B9%89%E8%A1%A8">广义表</a> 中，长度为 1、深度为 4的广义表是（ ）。<br><code>D.（（（a，（b），c）））</code></p></li><li><p>空的广义表是指（ ）。<br><code>D.不含任何元素</code></p></li><li><p>对于广义表（（a，b）（（）），（a，（b）））来说，其（  ）。<br><code>D.有 3个元素</code></p></li><li><p>广义表（（a，b），c，（（d），e），（f，j，（g），（h）））第 4个元素的第 3个元素是（  ）。<br><code>B.子表（g）</code></p></li></ol><h6 id="回到-25-题"><a href="#回到-25-题" class="headerlink" title="回到 25 题"></a>回到 25 题</h6><ol start="25"><li><p>度为 4、高度为 h的 <a href="#%E6%A0%91">树</a>（  ）。<br><code>A.至少有 h+3个结点</code></p><pre><code>解题思路：- 度为4的树，每个非叶节点最多有4个子节点- 高度为h，意味着从根到叶子的最长路径为h- 要求最少节点数，应该让每层只有1个节点(除最后一层)- 从根到叶子形成一条链，每层1个节点，共h+1个节点- 最后一个非叶节点至少要有2个子节点才能成为度为4的树- 所以最少需要h+3个节点</code></pre></li><li><p>对于一颗具有 n个结点、度为 4的树来说，（ ）。<br><code>A.树的高度最多是 n-3</code></p><pre><code>解题思路：- 度为4的树，每个非叶节点最多有4个子节点- 要使高度最大，应该让每层只有1个节点(除最后一层)- n个节点中，除去根节点和路径上的节点，剩余节点都是叶子- 最少需要2个叶子节点才能构成度为4的树- 所以高度最多为n-3</code></pre></li><li><p>对于一颗具有 n个结点、度为 4的树来说，树的高度至少是（  ）。<br><code>D.⌈log4(2n+1)⌉</code></p><pre><code>解题思路：- 度为4时，每层节点数最多是上一层的4倍- 第i层最多有4^(i-1)个节点- 总节点数n满足：n ≤ 1 + 4 + 4^2 + ... + 4^(h-1)- 等比数列求和：n ≤ (4^h - 1)/3- 解出h ≥ log4(3n + 1)- 取上限得到⌈log4(2n+1)⌉</code></pre></li><li><p>在一棵 3次树中，度为 3的结点数为两个，度为 2 的结点数为一个，度为 1 的结点数为两个，则度为 0 的结点数为（  ）个。<br><code>B.5</code></p><pre><code>解题思路：- 设度为0的节点数为x- 总节点数 = 2(度为3) + 1(度为2) + 2(度为1) + x(度为0) = 5 + x- 总边数 = 节点数 - 1 = 4 + x- 另一方面，总边数 = 3×2 + 2×1 + 1×2 = 8- 所以 4 + x = 8- 解得 x = 5</code></pre></li><li><p>求解单源最短路径的常用算法是：（  ）<br><code>C. Dijkstra算法</code></p><pre><code>解题思路：- Dijkstra算法是解决带权有向图上单源最短路径的经典算法- 基于贪心策略，每次选择当前最短路径- 时间复杂度为O(V^2)，V为顶点数- 不能处理负权边的情况</code></pre></li><li><p>图的邻接矩阵的空间复杂度是：（ ）<br><code>B.O(V^2)</code></p><pre><code>解题思路：- 邻接矩阵用V×V的二维数组表示图- V是图中顶点的个数- 无论图是稠密还是稀疏，都需要V^2的空间- 所以空间复杂度是O(V^2)</code></pre></li></ol><h2 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h2><ol><li><p>在线性表的链式存储结构中，元素之间的逻辑关系是通过 <code>指针</code> 决定的。</p></li><li><p>在线性表的顺序存储结构中，元素之间的逻辑关系是通过 <code>物理位置</code> 决定的。</p></li><li><p>若用不带头结点的单链表 st表示链栈，则创建一个空栈时所要执行的操作 是 <code>st = NULL;</code>。</p></li><li><p>若用带头结点的单链表 st表示链栈，则栈空的标志是 <code>st-&gt;next == NULL</code>。</p></li><li><p>若 n为主串的长度，m为子串的长度，采用 BF模式匹配算法，在最好的情况下需要的字符比较次数为 <code>m</code>。</p><pre><code> 解题思路： - 最好情况是第一次比较就匹配成功 - 需要逐个比较子串的每个字符 - 所以最少需要比较m次</code></pre></li><li><p>三维数组 a[0..4][0..6][0..8]中共含有 <code>315</code> 个元素。</p><pre><code> 解题思路： - 第一维度范围是0..4，共5个元素 - 第二维度范围是0..6，共7个元素   - 第三维度范围是0..8，共9个元素 - 总元素个数 = 5 × 7 × 9 = 315个元素</code></pre></li><li><p>若 n为主串的长度，m为子串的长度，采用 BF模式匹配算法，在最坏的情况下需要的字符比较次数为 <code>(n-m+1)*m</code>。</p><pre><code> 解题思路： - 最坏情况是每次比较都失败，直到最后一个位置 - 主串中有n-m+1个可能的起始位置 - 每个位置都需要比较m个字符 - 总比较次数为(n-m+1)*m</code></pre></li><li><p>一维数组 a采用顺序存储结构，下标从 0开始，每个元素占 4个存储单元，a[8] 的起始地址为 100，则 a[11]的起始地址为 <code>112</code>。</p><pre><code> 解题思路： - a[8]的起始地址是100 - a[11]比a[8]大3个位置 - 每个元素占4个存储单元 - 所以地址增加3*4=12 - 因此a[11]的起始地址是100+12=112</code></pre></li><li><p>一棵具有 n个结点的非空树，其中所有度之和等于 <code>n-1</code>。</p><pre><code> 解题思路： - 树中每个边连接两个节点 - 边数等于节点数减1 - 每条边对应一个节点的度数 - 所以所有节点的度数之和等于边数 - 因此等于n-1</code></pre></li><li><p>设某棵树中的结点值为单个字符，其后根遍历序列为 ABCDEFG，则根结点 值为 <code>G</code>。</p><pre><code>解题思路：- 后根遍历的顺序是：左子树、右子树、根节点- 遍历序列中最后一个元素就是根节点- 序列ABCDEFG中最后一个字符是G- 所以根节点的值为G</code></pre></li></ol><h2 id="判断题"><a href="#判断题" class="headerlink" title="判断题"></a>判断题</h2><ol><li><p>数据结构是带有结构的数据元素的集合。 <code>对</code></p></li><li><p>空的单链表不含有任何结点。 <code>对</code></p></li><li><p>算法可以用计算机语言描述，所以算法等同于程序。 <code>错</code><br><strong>算法是可以用计算机语言来实现，但算法并不等同于程序。算法是对问题求解步骤的一种描述，而程序是算法的具体实现。</strong></p></li><li><p>空的单链表不含有任何结点。 <code>对</code></p></li><li><p>栈和线性表是两种不同的数据结构，他们的数据元素的逻辑关系也不同。 <code>错</code><br><strong>栈是一种特殊的线性表，其特点是后进先出（LIFO）。因此，它们的基本逻辑关系是相同的，只是操作上有所限制。</strong></p></li><li><p>设串 s1&#x3D;”I 櫄 am 櫄 a 櫄 student”，该字符串串长为 11。 <code>错</code><br><strong>该字符串包含了文字、空格和特殊字符”櫄”，总长度应为19个字符（包括所有空格和特殊字符）。</strong></p></li><li><p>设串 s1&#x3D;”I am 櫄 english teacher”，该字符串串长为 15。 <code>错</code><br><strong>该字符串包含了文字、空格和特殊字符”櫄”，总长度应为21个字符（包括所有空格和特殊字符）。</strong></p></li><li><p>在有向图中，各顶点的入度之和等于各顶点的出度之和。 <code>对</code></p><pre><code> 解题思路： - 在有向图中，每条边都有一个起点和一个终点 - 每条边对一个顶点的出度贡献1，对另一个顶点的入度贡献1 - 所有边的总和就是所有顶点的入度之和 - 同时也是所有顶点的出度之和 - 因此入度之和必然等于出度之和</code></pre></li><li><p>无论是有向图还是无向图，其邻接矩阵表示都是唯一的。 <code>对</code><br><strong>对于同一个图，给定相同的顶点顺序，其邻接矩阵表示是唯一的。</strong></p></li><li><p>环形队列不存在空间上溢出的问题。 <code>错</code><br><strong>环形队列虽然可以有效地利用存储空间，但在物理存储有限的情况下，仍然存在空间溢出的可能性。</strong></p></li></ol><h2 id="程序分析题"><a href="#程序分析题" class="headerlink" title="程序分析题"></a>程序分析题</h2><h3 id="1-分析以下算法中各语句的频度："><a href="#1-分析以下算法中各语句的频度：" class="headerlink" title="1. 分析以下算法中各语句的频度："></a>1. 分析以下算法中各语句的频度：</h3><p>设n为正整数，分析以下算法中各语句的频度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fun</span> <span class="params">( <span class="type">int</span> n )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>; i&lt;n; i++ )                <span class="comment">//语句1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>( j=<span class="number">0</span>; j&lt;n; j++ ) </span><br><span class="line">        &#123;c[i][j]=<span class="number">0</span>;         <span class="comment">//语句2</span></span><br><span class="line">            <span class="keyword">for</span>( k=<span class="number">0</span>; k&lt;n; k++ )        <span class="comment">//语句3</span></span><br><span class="line">                c[i][j]= c[i][j]+ a[i][k]* b[k][j];  <span class="comment">//语句4</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结一下：<br>语句1的频度是 n + 1<br>语句2的频度是 n^2^<br>语句3的频度是 n^2^ * (n + 1)<br>语句4的频度是 n^3^</p><p>频度 是指在算法执行过程中，某条语句的执行次数。</p><p>在分析算法时，我们通常关注：</p><ol><li>语句的实际执行次数（精确频度）</li><li>最坏情况下的执行次数（最大频度）</li><li>平均情况下的执行次数（平均频度）</li></ol><p>语句1 (for( i&#x3D;0; i&lt;n; i++ ))：</p><ul><li>这是最外层的循环</li><li>循环会执行n次，每次迭代后变量i增加1</li><li>检查条件 i&lt;n 会在循环开始前和每次循环结束后执行</li><li>因此检查条件会被执行 n+1 次</li><li>所以这个语句的频度是 n + 1</li></ul><p>语句2 (c[i][j]&#x3D;0;)：</p><ul><li>位于第二层循环内</li><li>每当第二层循环(j)开始时执行一次</li><li>对于每个i值都会执行 n 次</li><li>外层循环执行n次</li><li>所以总执行次数为n * n &#x3D; n^2^次</li></ul><p>语句3 (for( k&#x3D;0; k&lt;n; k++ ))：</p><ul><li>这是最内层的循环</li><li>在每次第二层循环(j)迭代中都会被初始化和检查</li><li>初始化和检查条件将在n * n次第二层循环中各发生n + 1次</li><li>即(n + 1) * n * n &#x3D; n^2^ * (n + 1)次</li><li>注意:通常讨论循环频度时指的是循环体内的操作,而不是循环条件检查</li></ul><p>语句4 (c[i][j]&#x3D; c[i][j]+ a[i][k]* b[k][j]; )：</p><ul><li>位于最内层循环中</li><li>对于每个i和j组合,执行n次(k从0到n-1)</li><li>有n * n个不同的i和j组合</li><li>因此总执行次数为n * n * n &#x3D; n^3^次</li></ul><h3 id="2-试举一个实例，简要说明栈和队列在程序设计中所起的作用。"><a href="#2-试举一个实例，简要说明栈和队列在程序设计中所起的作用。" class="headerlink" title="2. 试举一个实例，简要说明栈和队列在程序设计中所起的作用。"></a>2. 试举一个实例，简要说明栈和队列在程序设计中所起的作用。</h3><h4 id="栈的应用实例："><a href="#栈的应用实例：" class="headerlink" title="栈的应用实例："></a>栈的应用实例：</h4><ul><li>程序中的函数调用过程就是一个典型的栈操作。每当一个函数被调用时，它的参数、返回地址等信息会被压入栈中；当函数返回时，这些信息会被弹出栈。</li></ul><h4 id="队列的应用实例："><a href="#队列的应用实例：" class="headerlink" title="队列的应用实例："></a>队列的应用实例：</h4><ul><li>操作系统中的打印任务队列。多个打印任务按照先来先服务的原则排队等待打印，新任务加入队尾，打印机从队首取任务执行。</li></ul><h3 id="3-假设3个元素a、b、c依次进栈，进栈和出栈操作可以交替进行，试写出所有可能的出栈序列。"><a href="#3-假设3个元素a、b、c依次进栈，进栈和出栈操作可以交替进行，试写出所有可能的出栈序列。" class="headerlink" title="3. 假设3个元素a、b、c依次进栈，进栈和出栈操作可以交替进行，试写出所有可能的出栈序列。"></a>3. 假设3个元素a、b、c依次进栈，进栈和出栈操作可以交替进行，试写出所有可能的出栈序列。</h3><p>a、b、c依次进栈，可能的出栈序列有 <code>abc、acb、bac、bca、cab、cba</code>。</p><h3 id="4-下面是一段简单的算法代码，请分析其功能，描述它的作用。"><a href="#4-下面是一段简单的算法代码，请分析其功能，描述它的作用。" class="headerlink" title="4. 下面是一段简单的算法代码，请分析其功能，描述它的作用。"></a>4. 下面是一段简单的算法代码，请分析其功能，描述它的作用。</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">int</span> arr[ ], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（1）这段代码的核心功能是什么？</p><pre><code>这段代码实现了一个简单的冒泡排序算法。其功能是将输入的数组 arr按从小到大的顺序排列。</code></pre><p>（2）代码中双重循环的作用分别是什么？</p><pre><code>外层循环：控制需要进行排序的轮数，每一轮会将当前未排序部分的最大值&quot;冒泡&quot;到最后。内层循环：在每一轮中，比较相邻两个元素的大小，将较大的元素向后交换，从而逐步把最大值移动到未排序部分的末尾。</code></pre><p>（3）如果输入数组为 [9, 1, 4, 3]，输出结果是什么？</p><pre><code>输入数组为 [9, 1, 4, 3]，输出结果是 [1, 3, 4, 9]。</code></pre><h3 id="5-下面是一段简单的算法代码，请分析其功能，描述它的作用。"><a href="#5-下面是一段简单的算法代码，请分析其功能，描述它的作用。" class="headerlink" title="5. 下面是一段简单的算法代码，请分析其功能，描述它的作用。"></a>5. 下面是一段简单的算法代码，请分析其功能，描述它的作用。</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">binary_search</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>; </span><br><span class="line">        <span class="keyword">if</span> (arr[mid] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（1）这段代码的核心功能是什么？</p><pre><code>这段代码实现了一个折半查找算法，用于在有序数组中查找指定目标值 target 的索引。如果找到，返回目标值所在的索引；如果找不到，返回 -1。</code></pre><p>（2）如果输入数组为 [1, 2, 3, 4, 5]，目标值为 3，输出结果是什么？</p><pre><code>输入数组为 [1, 2, 3, 4, 5]，目标值为 3，输出结果是 2。因为 3 在数组中的索引是 2。</code></pre><p>（3）分析：这段算法在什么条件下才能正常运行？请说明原因。</p><pre><code>数组必须是有序的（从小到大或从大到小的顺序）。原因是折半查找通过比较目标值与中间值的大小，决定搜索区间的左右范围。如果数组是无序的，算法无法正确缩小范围，可能返回错误结果或进入死循环。</code></pre><hr><h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><h3 id="1-求n"><a href="#1-求n" class="headerlink" title="1. 求n!"></a>1. 求n!</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> n*fun(n<span class="number">-1</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-求正整数n的位数"><a href="#2-求正整数n的位数" class="headerlink" title="2. 求正整数n的位数"></a>2. 求正整数n的位数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">10</span>) <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> fun(n/ <span class="number">10</span>)+ <span class="number">1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-设计一个算法，将一维数组-A（a1-…an）中的元素使用-尾插法-插入单链表-L-中。"><a href="#3-设计一个算法，将一维数组-A（a1-…an）中的元素使用-尾插法-插入单链表-L-中。" class="headerlink" title="3. 设计一个算法，将一维数组 A（a1, …an）中的元素使用 尾插法 插入单链表 L 中。"></a>3. 设计一个算法，将一维数组 A（a1, …an）中的元素使用 <code>尾插法</code> 插入单链表 L 中。</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">insertTail</span><span class="params">(Node*L, <span class="type">int</span> A[], <span class="type">int</span> n)</span>&#123; </span><br><span class="line">    Node*tail= L;<span class="comment">//初始时尾指针指向头节点 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>; i&lt; n; i++)&#123; </span><br><span class="line">        Node*newNode= createNode(A[i]);<span class="comment">//创建新节点 </span></span><br><span class="line">        tail-&gt;next= newNode; <span class="comment">//将新节点链接到链表尾部 </span></span><br><span class="line">        tail= newNode; <span class="comment">//更新尾指针 </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-设计一个算法，将一维数组-A（a1-…an）中的元素使用-头插法-插入单链表-L-中。"><a href="#4-设计一个算法，将一维数组-A（a1-…an）中的元素使用-头插法-插入单链表-L-中。" class="headerlink" title="4. 设计一个算法，将一维数组 A（a1, …an）中的元素使用 头插法 插入单链表 L 中。"></a>4. 设计一个算法，将一维数组 A（a1, …an）中的元素使用 <code>头插法</code> 插入单链表 L 中。</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">insertHead</span><span class="params">(Node*L, <span class="type">int</span> A[], <span class="type">int</span> n)</span>&#123; </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>; i&lt; n; i++)&#123; </span><br><span class="line">        Node*newNode= createNode(A[i]);<span class="comment">//创建新节点 </span></span><br><span class="line">        newNode-&gt;next= L-&gt;next; <span class="comment">//新节点指向当前头节点的下一个节点 </span></span><br><span class="line">        L-&gt;next= newNode; <span class="comment">//头节点指针指向新节点 </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h2><h3 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h3><p><a href="#%E5%9B%9E%E5%88%B0-21-%E9%A2%98">点击回到选择 21 题</a></p><ol><li><p><strong>长度</strong>：数最外层有几个项目。比如 <code>(a, (b, c), d)</code> 的长度是 3。</p></li><li><p><strong>深度</strong>：看括号嵌套得有多深。比如 <code>((a), b, (c, (d)))</code> 的深度是 3，因为最深的地方有三层括号。</p></li><li><p><strong>原子数</strong>：数所有单独的元素（不带括号的）。在 <code>((a), b, (c, (d)))</code> 中，原子是 <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>，所以原子数是 4。</p></li><li><p><strong>元素数</strong>：计算所有的部分，不论是单个元素还是子列表。对于 <code>((a), b, (c, (d)))</code>，<br>每个单独的元素和每个子列表都算一个元素，因此元素总数是 5 (<code>(a)</code>, <code>b</code>, <code>(c, (d))</code>, <code>c</code>, <code>(d)</code>)。</p></li></ol><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><p><a href="#%E5%9B%9E%E5%88%B0-25-%E9%A2%98">点击回到选择 25 题</a></p><ol><li><p><strong>树的基本概念</strong>：</p><ul><li>树是由结点和边组成的非线性数据结构</li><li>除根结点外，每个结点都有且仅有一个父结点</li><li>每个结点可以有零个或多个子结点</li></ul></li><li><p><strong>度的概念</strong>：</p><ul><li>结点的度：一个结点拥有的子结点数量</li><li>树的度：所有结点中最大的度数</li><li>例如：若一个结点有3个子结点，则其度为3</li></ul></li><li><p><strong>高度&#x2F;深度</strong>：</p><ul><li>树的高度：从根结点到最远叶子结点的路径长度</li><li>结点的深度：从根结点到该结点的路径长度</li><li>层次：根结点在第1层，其子结点在第2层，以此类推</li></ul></li><li><p><strong>结点分类</strong>：</p><ul><li>根结点：最顶层的结点，没有父结点</li><li>叶子结点：度为0的结点，没有子结点</li><li>内部结点：既有父结点又有子结点的结点</li><li>分支结点：度不为0的结点，有子结点</li></ul></li><li><p><strong>计算</strong>：</p><ul><li><p>若已知树的度为m和高度为h：</p><ul><li>最少结点数：h个结点(每层1个)</li><li>最多结点数：(m^h - 1)&#x2F;(m-1)个结点(每个结点都有m个子结点)</li></ul></li><li><p>若已知结点数n和度为m：</p><ul><li>最小高度：⌈log_m(n(m-1)+1)⌉</li><li>最大高度：n-(n-1)&#x2F;m (向上取整)</li></ul></li></ul></li><li><p><strong>树的遍历</strong>：</p><ul><li>先序遍历(Pre-order)：根结点 -&gt; 左子树 -&gt; 右子树</li><li>中序遍历(In-order)：左子树 -&gt; 根结点 -&gt; 右子树  </li><li>后序遍历(Post-order)：左子树 -&gt; 右子树 -&gt; 根结点</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例如对于二叉树:</span><br><span class="line">    A</span><br><span class="line">   / \</span><br><span class="line">  B   C</span><br><span class="line"> / \</span><br><span class="line">D   E</span><br><span class="line"></span><br><span class="line">先序遍历结果: A B D E C</span><br><span class="line">中序遍历结果: D B E A C  </span><br><span class="line">后序遍历结果: D E B C A</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>付鹏汇丰中国经济演讲/摘要总结</title>
      <link href="/cn/42312/"/>
      <url>/cn/42312/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="http://archive.today/jfOzV">付鹏汇丰演讲原文</a></p></blockquote><h1 id="总结摘要"><a href="#总结摘要" class="headerlink" title="总结摘要"></a>总结摘要</h1><h2 id="一、经济反馈机制与阶层差异"><a href="#一、经济反馈机制与阶层差异" class="headerlink" title="一、经济反馈机制与阶层差异"></a>一、经济反馈机制与阶层差异</h2><ul><li><strong>底层反馈滞后</strong>：<br>疫情后，底层劳动者（如网约车司机、外卖员等）首当其冲地感受到经济冲击。然而，整体的宏观经济数据却没有立刻反映这些变化。底层劳动者的生计直接受到影响，而这些群体的消费能力下降并未在经济数据中及时体现出来。  </li><li><strong>中产阶级的经济压力</strong>：<br>到了2023年，中产阶级开始承受来自降本增效、裁员的压力。许多中产家庭缩减消费，放缓了经济增长。中产阶级对于“降级消费”的感受尤为明显，过往的消费模式不再适用。  </li><li><strong>消费降级现象</strong>：<br>消费降级不仅在低收入群体中表现明显，在中产阶级中也同样显现。以“拼多多”为代表的低价电商平台成为低收入群体的选择，而原本服务于中产阶级的高端消费市场也开始显现降级趋势。</li></ul><h2 id="二、宏观经济中的供需问题"><a href="#二、宏观经济中的供需问题" class="headerlink" title="二、宏观经济中的供需问题"></a>二、宏观经济中的供需问题</h2><ul><li><strong>PPI（生产者价格指数）为负</strong>：<br>生产者价格指数的负增长意味着生产环节的价格在持续下降。企业整体的利润在下降，很多行业面临价格战，且需求不足。企业盈利减少，加剧了行业间的竞争，供给过剩与需求不足的矛盾加剧。  </li><li><strong>80后作为内需支撑</strong>：<br>中国的内需长期以来依赖80后这一庞大的消费群体，但随着人口结构变化，80后的消费动力减弱，消费增速放缓。由于80后人口的减少，消费主体的年龄结构正在发生改变，导致内需长期疲弱。</li><li><strong>政策效果减弱</strong>：<br>传统的宏观经济调控手段，如加杠杆和降低首付等，曾经有效地刺激了消费和购房需求。然而，随着居民杠杆率的上升，这些传统的政策工具对经济的拉动效应逐渐消失。过去依赖于房地产行业带动经济增长的模式难以为继。</li></ul><h2 id="三、债务与税收的本质逻辑"><a href="#三、债务与税收的本质逻辑" class="headerlink" title="三、债务与税收的本质逻辑"></a>三、债务与税收的本质逻辑</h2><ul><li><strong>内债本质是税</strong>：<br>政府的债务偿还最终依赖于内需和税收。财政赤字与债务的增加，实质上是通过未来的税收来支付，这些税收最终由居民收入和人口结构来支撑。这意味着，在人口减少和收入增速放缓的背景下，政府将面临更大的财政压力。</li><li><strong>增税趋势</strong>：<br>随着人口老龄化加剧，未来国家税收的主要来源可能来自于增税措施，如房产税、遗产税等。与此同时，老龄化将导致政府支出增加，尤其是在养老金和医疗保健方面。</li><li><strong>基建投资的局限性</strong>：<br>基础设施建设曾是经济增长的重要引擎，但近年来，由于土地财政收入的减少，基建投资的效果逐渐减弱。过去通过大量的基建投资拉动经济增长的模式已不再有效，未来难以依赖基建继续推动经济发展。</li></ul><h2 id="四、企业与市场的循环危机"><a href="#四、企业与市场的循环危机" class="headerlink" title="四、企业与市场的循环危机"></a>四、企业与市场的循环危机</h2><ul><li><strong>市场竞争中的误区</strong>：<br>企业间的竞争未必能产生赢家，反而可能造成行业普遍的亏损。在需求萎缩的环境下，单纯的价格竞争并未能推动需求的增长，反而加剧了市场的疲软。</li><li><strong>消费需求的长期萎缩</strong>：<br>消费需求的减少不是短期现象，而是长期趋势。随着收入增速放缓，尤其是80后及其后代消费能力的降低，消费品市场出现结构性萎缩，进一步加大了企业面临的困境。</li><li><strong>“出海”扩张面临的挑战</strong>：<br>企业寻找出海机会（海外扩张）已不再容易，特别是在当前全球化进程受到挑战的情况下。地缘政治的不稳定、贸易壁垒的增加，使得企业出海面临更大的难度。过去的国际市场扩张模式不再适应新的全球经济形势。</li></ul><h2 id="五、内需提振与再分配的重要性"><a href="#五、内需提振与再分配的重要性" class="headerlink" title="五、内需提振与再分配的重要性"></a>五、内需提振与再分配的重要性</h2><ul><li><strong>内需与再分配问题</strong>：<br>要解决经济增长乏力的问题，关键在于通过再分配机制恢复有效需求。这一机制涉及政府对资源的合理分配，以及在居民部门之间（尤其是富人与贫困者之间）实现收入再分配，以促进低收入群体的消费能力。</li><li><strong>代际分配与财富再分配</strong>：<br>文章提出，类似于日本战后经济的再分配模式，财富和资源的跨代际分配可以帮助实现经济增长的平衡。在中国，随着人口结构的变化，如何有效进行财富再分配，解决老龄化问题，成为经济改革的关键。</li><li><strong>“富者恒富”现象的危害</strong>：<br>资产价格上涨并不能带来实际财富的增长，而是通过资产泡沫让富裕阶层不断受益。这种“富者恒富”的现象加剧贫富差距，最终导致财富的两极化，影响社会稳定。</li></ul><h2 id="六、中国经济周期与政策反思"><a href="#六、中国经济周期与政策反思" class="headerlink" title="六、中国经济周期与政策反思"></a>六、中国经济周期与政策反思</h2><ul><li><strong>政策盲点</strong>：<br>当前一些地方政府官员仍依赖过去的经济思维，认为“加杠杆”是解决经济问题的关键。然而，随着市场和居民债务的负担加重，这种传统政策已经不再适用，甚至可能加剧经济的负担。</li><li><strong>降杠杆的现实需求</strong>：<br>随着居民杠杆率过高，降杠杆成为必要的选择。例如，降低存量房贷利率或减少房地产投资，逐步降低过度负债带来的风险。</li><li><strong>避免泡沫经济的误导</strong>：<br>尽管资产价格的增长（如房价和股市泡沫）在短期内可能带来财富效应，但从长期来看，这些虚假的财富积累无法促进实际经济增长，反而会带来更大的系统性风险。</li></ul><h2 id="七、未来经济发展的方向"><a href="#七、未来经济发展的方向" class="headerlink" title="七、未来经济发展的方向"></a>七、未来经济发展的方向</h2><ul><li><strong>恢复有效需求</strong>：<br>恢复有效需求的关键在于提升居民的消费能力，而非通过虚高的资产价格制造财富效应。通过促进低收入群体的消费和收入再分配，可以实现经济的长远增长。</li><li><strong>供给侧与需求侧的结构性改革</strong>：<br>当前的经济模式需要从单纯的增量扩展转向结构调整。供给侧改革与需求侧改革的协同推进，将有助于优化资源配置，提高经济效率。</li><li><strong>全球化背景下的竞争</strong>：<br>在当前的全球经济环境中，中国企业必须适应新的国际竞争格局。地缘政治不确定性加剧，全球化的局限性使得企业需要更灵活地调整出口市场和投资策略，以应对外部环境变化。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇文章系统地分析了当前中国经济面临的多重挑战，特别是在<strong>经济需求不足、债务压力、人口变化</strong>以及<strong>全球化趋势变化</strong>等方面。通过深入探讨供需问题、政策反思、内需再分配、企业竞争等多个维度，文章指出中国经济的未来发展需要通过<strong>结构性调整、有效需求恢复和财富再分配</strong>来实现增长，并避免通过泡沫经济推动虚假的财富效应。</p>]]></content>
      
      
      <categories>
          
          <category> 投资 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 投资 </tag>
            
            <tag> 认知 </tag>
            
            <tag> 推荐文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity中fbx批量提取animationClip动画脚本(适用mixamo)</title>
      <link href="/cn/38912/"/>
      <url>/cn/38912/</url>
      
        <content type="html"><![CDATA[<h1 id="Unity中fbx批量提取animationClip动画-Unity-适用mixamo"><a href="#Unity中fbx批量提取animationClip动画-Unity-适用mixamo" class="headerlink" title="Unity中fbx批量提取animationClip动画(Unity|适用mixamo)"></a>Unity中fbx批量提取animationClip动画(Unity|适用mixamo)</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ul><li>在 Unity 中，如何批量提取 fbx 文件（mixamo 下载的 fbx 文件）中的 animationClip 动画切片？</li></ul><blockquote><p>注意！转载自 <a href="https://www.reddit.com/r/Unity3D/comments/phceg1/how_do_i_extract_an_animation_from_an_fbx_file/">reddit@VR_Raccoonteur</a> 感谢~</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li><p>添加以下脚本（放在任何位置都可以）</p> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExtractAnimations</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  [<span class="meta">MenuItem(<span class="string">&quot;Tools/ExtractAnimations&quot;</span>)</span>]</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ExtractAnims</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">foreach</span> (Object o <span class="keyword">in</span> Selection.objects)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// s.Remove(s.Length - n);</span></span><br><span class="line">        s = AssetDatabase.GetAssetPath(o);</span><br><span class="line">        <span class="comment">// Print the path of the created asset</span></span><br><span class="line">        Debug.Log(<span class="string">&quot;Reading &quot;</span> + s);</span><br><span class="line">            </span><br><span class="line">        AnimationClip orgClip = (AnimationClip)AssetDatabase.LoadAssetAtPath(s, <span class="keyword">typeof</span>(AnimationClip));</span><br><span class="line">        SerializedObject serializedClip = <span class="keyword">new</span> SerializedObject(orgClip);</span><br><span class="line">        AnimationClipSettings clipSettings = <span class="keyword">new</span> AnimationClipSettings(serializedClip.FindProperty(<span class="string">&quot;m_AnimationClipSettings&quot;</span>));</span><br><span class="line"></span><br><span class="line">        clipSettings.loopTime = <span class="literal">true</span>;</span><br><span class="line">        serializedClip.ApplyModifiedProperties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Save the clip</span></span><br><span class="line">        s = s.Remove(s.Length - <span class="number">4</span>) + <span class="string">&quot;.anim&quot;</span>;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Writing &quot;</span> + s);</span><br><span class="line">              </span><br><span class="line">        <span class="keyword">if</span>(!Resources.Load(s))&#123;</span><br><span class="line">          AnimationClip placeClip = <span class="keyword">new</span> AnimationClip();</span><br><span class="line">          EditorUtility.CopySerialized(orgClip,placeClip);</span><br><span class="line">          AssetDatabase.CreateAsset(placeClip, s);</span><br><span class="line">          AssetDatabase.Refresh(); </span><br><span class="line">        &#125;</span><br><span class="line">                        </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 Unity 中，选择需要提取动画的 fbx 文件</p></li><li><p>点击 <code>Tools/ExtractAnimations</code> 按钮（在Unity窗口最上方哦）</p></li><li><p>脚本会自动提取 fbx 文件中的 animationClip 动画切片，并保存到同路径下</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
            <tag> Unity </tag>
            
            <tag> 游戏开发 </tag>
            
            <tag> 开发 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cursor无限免费续杯最新方法</title>
      <link href="/cn/47536/"/>
      <url>/cn/47536/</url>
      
        <content type="html"><![CDATA[<blockquote><p>虽然这个方法可以无限续杯，但完全不建议这么做，支持正版才能让项目方继续有能力开发更新，也是对作者的尊重<br><a href="https://www.cursor.com/pricing">去 Cursor 官网支持正版👍</a> | 感谢项目作者 <a href="https://github.com/yuaotian">yuaotian</a> | 如果实在没有经济能力，这个可以作为暂时的过渡</p></blockquote><p>不废话，直接跳转去原 Github仓库 <a href="https://github.com/yuaotian/go-cursor-help?tab=readme-ov-file#-%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95">yuaotian&#x2F;Github-go-cursor-help</a></p><p>直接命令行输入就可以了，不需要安装任何依赖</p><h3 id="海外用户"><a href="#海外用户" class="headerlink" title="海外用户"></a>海外用户</h3><p>Linux&#x2F;macOS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://raw.githubusercontent.com/yuaotian/go-cursor-help/master/scripts/install.sh | <span class="built_in">sudo</span> bash</span><br></pre></td></tr></table></figure><p>Windows</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">irm</span> https://raw.githubusercontent.com/yuaotian/go<span class="literal">-cursor-help</span>/master/scripts/install.ps1 | <span class="built_in">iex</span></span><br></pre></td></tr></table></figure><h3 id="国内用户（推荐）"><a href="#国内用户（推荐）" class="headerlink" title="国内用户（推荐）"></a>国内用户（推荐）</h3><p>macOS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://aizaozao.com/accelerate.php/https://raw.githubusercontent.com/yuaotian/go-cursor-help/refs/heads/master/scripts/run/cursor_mac_id_modifier.sh | <span class="built_in">sudo</span> bash</span><br></pre></td></tr></table></figure><p>Linux</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://aizaozao.com/accelerate.php/https://raw.githubusercontent.com/yuaotian/go-cursor-help/refs/heads/master/scripts/run/cursor_linux_id_modifier.sh | <span class="built_in">sudo</span> bash</span><br></pre></td></tr></table></figure><p>Windows</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">irm</span> https://aizaozao.com/accelerate.php/https://raw.githubusercontent.com/yuaotian/go<span class="literal">-cursor-help</span>/refs/heads/master/scripts/run/cursor_win_id_modifier.ps1 | <span class="built_in">iex</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国内经济个人分析小记 - 待更新</title>
      <link href="/cn/34715/"/>
      <url>/cn/34715/</url>
      
        <content type="html"><![CDATA[<blockquote><p>现在主流国内经济下行崩盘状况分析都是从经济学政治等因素出发映射到一般人上<br>我将会从一般人出发逆推，更接地气一点的讲解主要矛盾、个人预测、以及个人的应对措施分享<br>仅个人见解，仅供参考，当然希望能对你有一定帮助</p></blockquote><h2 id="矛盾根源"><a href="#矛盾根源" class="headerlink" title="矛盾根源"></a>矛盾根源</h2><p>这个部分并不想要详细展开，因为有太多内容了，而且网上也有更好的专业分析</p><p>不过当然，众所周知政府政策原因是主谋，以下仅提供一些思考方向、和其他分析的推荐</p><h2 id="推荐分析"><a href="#推荐分析" class="headerlink" title="推荐分析"></a>推荐分析</h2><ul><li><a href="https://youtu.be/8dWsOGDufz4?si=4mBr6ufus01ObYfC">VEXILLA潮時務所 - 【14年以来首次】最强货币政策重出江湖，中央经济会议火力全开！人民币会贬值到8吗？零利率距离我们还有多远？| 中国经济 | 通货紧缩 | 人民币贬值 | 外贸 | 内需</a></li><li><a href="https://www.youtube.com/watch?v=d3X2MKzoC8s">美投讲美股 - 中国史上最强经济刺激政策！你必须了解什么？</a></li><li><a href="https://lave.fun/cn/42312/">付鹏汇丰演讲</a></li></ul><h2 id="个人分析方向"><a href="#个人分析方向" class="headerlink" title="个人分析方向"></a>个人分析方向</h2><ul><li>外贸和内需变化</li><li>政府经济政策</li><li>房地产泡沫依赖性</li><li>人口结构问题</li><li>外交关系（尤其中美关系）</li><li></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 投资 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 投资 </tag>
            
            <tag> 认知 </tag>
            
            <tag> 推荐文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大学生报销和奖金保姆指南</title>
      <link href="/cn/41518/"/>
      <url>/cn/41518/</url>
      
        <content type="html"><![CDATA[<h2 id="1-报销"><a href="#1-报销" class="headerlink" title="1. 报销"></a>1. 报销</h2><blockquote><p>想要参加比赛之前就应该看的指南哦！当然如果你已经参加了比赛，那么你可能更需要看这个</p></blockquote><blockquote><p>钱！这对比赛来说，真的是个很重要的部分了，异地赛区的比赛，交通住宿恰饭都是一笔不小的开销啊<br>而且毕竟对于我来说比赛除了锻炼能力，添加履历，还有最主要的就是 <strong>公费旅游</strong> XD<br>踩了不少坑，刚开始参加比赛的你，最好事先看看这些建议哦！</p></blockquote><p>根据学校不同，报销的规则可能不同哦，但跟着接下来的步骤走，基本可以保证不会踩坑出错</p><ul><li>首先！查看学校报销规则<ul><li>学校官网查找相关文件</li><li>询问学长学姐、老师 或 学校财务处、学生事务中心，报销规则和流程</li></ul></li></ul><p>查看完你们学校的报销规则后，接下来参考着你们的报销规则，来看我接下来的指南</p><h3 id="1-1-行程前的准备"><a href="#1-1-行程前的准备" class="headerlink" title="1.1 行程前的准备"></a>1.1 行程前的准备</h3><h4 id="发票信息准备"><a href="#发票信息准备" class="headerlink" title="发票信息准备"></a>发票信息准备</h4><blockquote><p>一般在商户开发票，都提供学校的这两个信息，开 <strong>企业发票</strong></p></blockquote><ul><li>抬头单位名称：学校名称</li><li>纳税人识别号或统一社会信用代码：学校税号</li></ul><h4 id="个人信息准备"><a href="#个人信息准备" class="headerlink" title="个人信息准备"></a>个人信息准备</h4><blockquote><p>这些一般是你去学校报销时，学校会 <strong>要求你提供</strong> 的信息</p></blockquote><ul><li>个人基本信息</li><li>开户银行名称：一般都是 某某银行某某支行</li><li>开户银行账号</li></ul><h3 id="1-2-材料准备"><a href="#1-2-材料准备" class="headerlink" title="1.2 材料准备"></a>1.2 材料准备</h3><blockquote><p>这些是最全的报销材料，也就是提供报销时大概率可能需要的材料<br>可能有的学校不会要求这么多，但如果想要万全的准备，建议全部准备好哦</p></blockquote><h4 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h4><ul><li>发票<ul><li>酒店登记入住时，让前台给你开发票，然后你报上信息让他发你邮箱就OK啦</li></ul></li><li>付款记录<ul><li>支付宝&#x2F;微信&#x2F;银行卡或其他付款方式的付款截图</li></ul></li><li>账单&#x2F;水单<ul><li>也是需要要前台给你提供的，直接叫他开水单一般都懂</li></ul></li></ul><h4 id="交通"><a href="#交通" class="headerlink" title="交通"></a>交通</h4><p><strong>火车票</strong></p><ul><li>发票<ul><li>这里的火车发票，其实就是 <strong>火车纸质车票</strong>，一般大家可能直接刷身份证或扫码进站，但报销的话，可能需要提供火车票的纸质票</li><li>如果，你当时没有打印纸质票，你依旧可以重新打印 <strong>180天内的火车票</strong>，可以查看我的另一篇博客 <a href="https://lave.fun/cn/36396/">火车纸质票丢失补办的终极指南</a></li></ul></li><li>付款记录<ul><li>支付宝&#x2F;微信&#x2F;银行卡或其他付款方式的付款截图</li></ul></li></ul><p><strong>打车</strong></p><ul><li>发票<ul><li>看你使用的打车平台，一般在订单记录中都可以直接开发票</li><li>一般平台中，申请开发票平台会让你这趟行程的服务商开发票然后发你邮箱<ul><li>例如：高德打车接你的是 T3出行，那么你申请开发票后，高德会通知 T3出行，T3出行会给你开发票，然后直接发你邮箱</li><li>所以有些小服务商会出现出发票很慢的情况，着急报销可以试试直接让平台开你发票（一般可以选择是服务商还是平台出发票的）</li></ul></li></ul></li><li>付款记录</li><li>行程单<ul><li><strong>行程单和发票不是一个东西</strong>，在你打车平台的开发票选项中，一般会有开行程单选项，可以自行上网搜索如果找不到的话</li></ul></li></ul><h4 id="餐饮"><a href="#餐饮" class="headerlink" title="餐饮"></a>餐饮</h4><ul><li>发票<ul><li>线下餐厅：一般都有快捷开发票方式，也有些可能是纸质版发票，记得保存好后面拍照传给学校</li><li>线上外卖：<ul><li>看情况，有些外卖店可以直接在外卖平台上开，有些不行</li><li>记得尽量保留好小票，比如麦当劳就是直接扫描小票二维码开发票的。但是我上次丢了直接问客服然后查询订单记录开的发票 XD</li><li>对于无法直接开的，或者小票还是丢了的，可以询问商家客服怎么处理</li></ul></li></ul></li><li>付款记录</li></ul><h4 id="比赛报名费"><a href="#比赛报名费" class="headerlink" title="比赛报名费"></a>比赛报名费</h4><blockquote><p>一般办赛方都会跟学校有沟通<br>校内也一般会有个老师专门负责校内某某比赛的相关事宜</p></blockquote><p>如果学校没法直接知道你参加了这个比赛，且学校说明此比赛可以报销的话，也是一样提供：</p><ul><li>付款记录</li><li>报名信息</li><li>发票？（可能需要？或者可能开不出来？）</li></ul><h3 id="1-2-报销流程"><a href="#1-2-报销流程" class="headerlink" title="1.2 报销流程"></a>1.2 报销流程</h3><h2 id="2-奖金"><a href="#2-奖金" class="headerlink" title="2. 奖金"></a>2. 奖金</h2>]]></content>
      
      
      <categories>
          
          <category> 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 推荐文章 </tag>
            
            <tag> 自我提高 </tag>
            
            <tag> 竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Origin is unreachable Error code 523 / ipv4访问正常但域名访问失败</title>
      <link href="/cn/15091/"/>
      <url>/cn/15091/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><ul><li>Cloudflare 报错 Origin is unreachable Error code 523</li><li>ipv4 访问正常但域名访问失败解决方案</li><li>Cloudflare host Error &#x2F; 无法连接到源服务器</li></ul><p>我想要添加个子域名解析到另外一个 ipv4 地址，浏览器直接访问 ipv4 地址是正常的</p><p>但是通过域名访问失败，报错 Origin is unreachable Error code 523，显示 Browser Working，Cloudflare Working，但是 Host Error</p><p><strong>先说结果：因为 SSL 证书问题，Cloudflare 到服务器的连接失败，所以 ip 可以访问，但是域名访问就显示 Host Error</strong></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="1-确保低级错误"><a href="#1-确保低级错误" class="headerlink" title="1. 确保低级错误"></a>1. 确保低级错误</h2><ul><li>是否添加域名解析记录</li><li>服务器本身是否正常运行（直接通过 ip地址 是否能访问）</li><li>域名解析是否正常</li></ul><h2 id="2-检查配置"><a href="#2-检查配置" class="headerlink" title="2. 检查配置"></a>2. 检查配置</h2><ul><li>你的根域名是否通过 https 连接 -&gt; 如果是</li><li>你的子域名解析的服务器，是否服务器有 SSL 证书 -&gt; 如果没有</li><li>你的 Cloudflare 的 SSL&#x2F;TSL 加密模式设置为 -&gt; 如果加密等级高于灵活</li></ul><h2 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h2><p>根据 上方提供的 3 个检查配置，可以通过这三个方向来解决</p><h3 id="3-1-根域名设置为-http-连接"><a href="#3-1-根域名设置为-http-连接" class="headerlink" title="3.1 根域名设置为 http 连接"></a>3.1 根域名设置为 http 连接</h3><p>根域名所对应的服务器或域名连接，不使用 SSL 证书，（ 不使用 https 连接 ）</p><blockquote><p>那必然 <strong>不会</strong> 选这个方法，哪有人降级安全性的</p></blockquote><h3 id="3-2-给子域名解析的服务器添加-SSL-证书"><a href="#3-2-给子域名解析的服务器添加-SSL-证书" class="headerlink" title="3.2 给子域名解析的服务器添加 SSL 证书"></a>3.2 给子域名解析的服务器添加 SSL 证书</h3><p>这里会出现一些问题，一般来说：</p><ul><li><p>服务器添加 免费 SSL 时的验证方法会比较困难，比如：</p><ul><li>通过添加解析验证</li><li>通过添加文件验证</li><li>通过域名的电子邮件验证</li></ul></li><li><p>或者是使用 付费 SSL，但是成本比较大啊有些时候</p></li><li><p>或者因为本地服务器使用的反向代理不支持 SSL 证书，比如一些轻量的反向代理就可能不支持</p></li></ul><blockquote><p>当然如果可以解决当然最好</p></blockquote><h3 id="3-3-设置-Cloudflare-的-SSL-TSL-加密模式为灵活（！推荐）"><a href="#3-3-设置-Cloudflare-的-SSL-TSL-加密模式为灵活（！推荐）" class="headerlink" title="3.3 设置 Cloudflare 的 SSL&#x2F;TSL 加密模式为灵活（！推荐）"></a>3.3 设置 Cloudflare 的 SSL&#x2F;TSL 加密模式为灵活（！推荐）</h3><p>毕竟本身就是 Host Error，也就是 Cloudflare 到服务器的连接失败，所以设置为灵活加密模式（Host 到 Cloudflare 不进行 SSL&#x2F;TSL 加密）</p><blockquote><p>我反正用的这个方法，也就小小 blog，不用过于在意安全性</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息 </tag>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>火车纸质票丢失补办或车票发票办理的终极指南</title>
      <link href="/cn/61489/"/>
      <url>/cn/61489/</url>
      
        <content type="html"><![CDATA[<h1 id="火车纸质票丢失补办的终极指南"><a href="#火车纸质票丢失补办的终极指南" class="headerlink" title="火车纸质票丢失补办的终极指南"></a>火车纸质票丢失补办的终极指南</h1><blockquote><p>相信大家一般都直接使用身份证或扫码进站，并不会在售票处打印纸质票，或是在人工窗口购买<br>但如果你需要报销，或是需要纸质票，那么你就需要补办纸质票了</p></blockquote><h2 id="1-确保你的-车次时间-现在时间-在-180天-以内"><a href="#1-确保你的-车次时间-现在时间-在-180天-以内" class="headerlink" title="1. 确保你的 车次时间-现在时间 在 180天 以内"></a>1. 确保你的 <strong>车次时间-现在时间</strong> 在 <strong>180天</strong> 以内</h2><h2 id="2-如果你的行程："><a href="#2-如果你的行程：" class="headerlink" title="2. 如果你的行程："></a>2. 如果你的行程：</h2><ul><li>在30天内且只需电子版：前往 <strong>12306</strong> App，点击 <strong>订单</strong>，选择 <strong>本人车票</strong>，如果能查询到车票，则可以点击电子发票直接开具电子发票</li><li>在30天外或需要纸质票：只能准备直接 <strong>前往距离你最近的火车站，进行补办</strong> 咯，<strong>记得！！带上身份证！！！身 份 证</strong></li></ul><h2 id="3-到达火车站，直接去售票处："><a href="#3-到达火车站，直接去售票处：" class="headerlink" title="3. 到达火车站，直接去售票处："></a>3. 到达火车站，直接去售票处：</h2><ul><li>可以先去 <strong>自助售票机</strong> 上进行补办，选择 <strong>补办车票&#x2F;打印车票凭证</strong> (具体叫法可能有偏差)</li><li>如果查询不到车票信息，需要去 <strong>人工窗口</strong> 补办咯</li></ul><h2 id="4-在人工窗口补办时："><a href="#4-在人工窗口补办时：" class="headerlink" title="4. 在人工窗口补办时："></a>4. 在人工窗口补办时：</h2><ul><li>直接告诉工作人员你需要补办车票，然后给他身份证，如果能查询到你的车票信息，就可以补办成功啦</li></ul><h2 id="5-如果工作人员跟你说查询不到车票记录，"><a href="#5-如果工作人员跟你说查询不到车票记录，" class="headerlink" title="5. 如果工作人员跟你说查询不到车票记录，"></a>5. 如果工作人员跟你说查询不到车票记录，</h2><blockquote><p>这种情况一般因为已经时间间隔过久了，需要 <strong>恢复订单记录</strong></p></blockquote><p>  a. 他可能让你打电话给 12306 客服，但 12306 客服一般会告诉你需要去人工窗口补办<br>  b. 你直接让他在系统中恢复订单记录，他们火车站的系统软件上，可以恢复订单记录的<br>  c. 接着你需要提供基本信息，比如身份证号、发车日期、哪里开往哪里的、车次、座位类型、姓名、等等<br>  d. 根据你的印象中尽可能的提供多的信息 (不一定要全部提供)，让他进行查询订单并进行恢复，然后就可以补办成功啦</p>]]></content>
      
      
      
        <tags>
            
            <tag> 实用 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三星玩机指南2024 - 待更新</title>
      <link href="/cn/54177/"/>
      <url>/cn/54177/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息 </tag>
            
            <tag> 实用 </tag>
            
            <tag> 生活 </tag>
            
            <tag> 评测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我在看的消息面 - 待更新</title>
      <link href="/cn/30766/"/>
      <url>/cn/30766/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 投资 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 投资 </tag>
            
            <tag> 推荐文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity6 角色控制器 Cinemachine+InputSystem - 更新中</title>
      <link href="/cn/46583/"/>
      <url>/cn/46583/</url>
      
        <content type="html"><![CDATA[<h1 id="基于-Cinemachine-和-InputSystem-的-Unity-第三人称角色控制器"><a href="#基于-Cinemachine-和-InputSystem-的-Unity-第三人称角色控制器" class="headerlink" title="基于 Cinemachine 和 InputSystem 的 Unity 第三人称角色控制器"></a>基于 Cinemachine 和 InputSystem 的 Unity 第三人称角色控制器</h1><blockquote><p>这里分享下我的解决方案<br>适用 Unity 6;<br>最新的输入方式 InputSystem;<br>最新的摄像头控制方式 Cinemachine;<br>适用第三人称同时适用于第一人称;</p></blockquote><h2 id="安装必需插件"><a href="#安装必需插件" class="headerlink" title="安装必需插件"></a>安装必需插件</h2><ol><li>打开 Package Manager ( Window -&gt; Package Manager )</li><li>搜索 Cinemachine 和 InputSystem 并安装</li></ol><h2 id="创建玩家物体"><a href="#创建玩家物体" class="headerlink" title="创建玩家物体"></a>创建玩家物体</h2><ol><li>在 Hierarchy 中创建一个胶囊体（Capsule），命名为 Player</li><li>对 Player 组件进行如下设置：<ul><li>删除 Capsule Collider 组件</li><li>添加 Character Controller 组件</li><li>新建脚本 PlayerMotor.cs 和 InputManager.cs 并挂载到 Player 上</li></ul></li><li>最终 Player 的 Inspector 应该是这样的<br>  <img src="https://lave.fun/cn/46583/PlayerInspector.png" alt="PlayerInspector"></li><li>对 Player 物体的子物体：<ol><li>将场景中的 Main Camera 拖拽到 Player 上（作为 Player 的子物体），命名为 Camera</li><li>对 Player 右键添加子物体 Freelook Camera ( Cinemachine -&gt; Targeted Cameras -&gt; Freelook Camera )</li><li>添加人物模型（ 如果用于测试的话可以去 Mixamo 上下载，不会可以参考我的 <a href="https://lave.fun/cn/34203/">如何从Mixamo下载免费模型和动画</a> ）</li><li>尽可能将人物模型对其 Character Controller 的碰撞体检测盒，避免人物模型穿模</li></ol></li><li>给人物模型加上 Animator 组件</li><li>在 Project 面板中创建一个 Animator Controller ，命名为 PlayerAnimatorController 并拖拽到人物模型的 Animator 组件上</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> 游戏开发 </tag>
            
            <tag> 开发 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息、媒体、洗脑、操纵与自主思维 - 待更新</title>
      <link href="/cn/18781/"/>
      <url>/cn/18781/</url>
      
        <content type="html"><![CDATA[<blockquote><p>深入探讨信息操纵、媒体影响和保持独立思考的重要性</p></blockquote><h1 id="一、信息操纵"><a href="#一、信息操纵" class="headerlink" title="一、信息操纵"></a>一、信息操纵</h1><h2 id="1-案例"><a href="#1-案例" class="headerlink" title="1. 案例"></a>1. 案例</h2><h3 id="1-1-社交媒体算法与信息茧房"><a href="#1-1-社交媒体算法与信息茧房" class="headerlink" title="1.1 社交媒体算法与信息茧房"></a>1.1 社交媒体算法与信息茧房</h3><p>Facebook在2014年曾进行过一项著名的”情绪传染”实验</p><p>通过调整用户新闻推送的情绪倾向，成功影响了用户的情绪状态。</p><p>这个实验引发了巨大争议，也揭示了算法推荐系统对人们认知的深远影响。</p><h3 id="1-2-政治宣传与舆论引导"><a href="#1-2-政治宣传与舆论引导" class="headerlink" title="1.2 政治宣传与舆论引导"></a>1.2 政治宣传与舆论引导</h3><ul><li>2016年美国大选中的 Cambridge Analytica 事件</li><li>各国政府对COVID-19疫情信息的不同叙事方式</li><li>战争报道中的选择性报道现象</li></ul><h1 id="二、媒体操纵"><a href="#二、媒体操纵" class="headerlink" title="二、媒体操纵"></a>二、媒体操纵</h1><h3 id="1-框架效应"><a href="#1-框架效应" class="headerlink" title="1. 框架效应"></a>1. 框架效应</h3><p>通过特定的叙事框架来影响受众理解：</p><ul><li>同样的经济数据，可以被解读为”增长放缓”或”稳健发展”</li><li>同一事件在不同立场媒体中呈现截然不同的面貌</li></ul><h3 id="2-议程设置"><a href="#2-议程设置" class="headerlink" title="2. 议程设置"></a>2. 议程设置</h3><p>媒体通过选择性报道来引导公众关注点：</p><ul><li>热点事件的”爆米花效应”</li><li>重要但不吸引眼球的议题被忽视</li></ul><h3 id="3-情感煽动"><a href="#3-情感煽动" class="headerlink" title="3. 情感煽动"></a>3. 情感煽动</h3><ul><li>标题党与情绪化用语</li><li>片面截取与去脉络化处理</li><li>视觉冲击与音效配合</li></ul><h1 id="三、认知偏差与思维陷阱"><a href="#三、认知偏差与思维陷阱" class="headerlink" title="三、认知偏差与思维陷阱"></a>三、认知偏差与思维陷阱</h1><h3 id="1-确认偏误"><a href="#1-确认偏误" class="headerlink" title="1. 确认偏误"></a>1. 确认偏误</h3><p>人们倾向于寻找支持自己已有观点的信息：</p><ul><li>股市投资者只看符合自己判断的分析</li><li>政治立场固化导致的”回音室效应”</li></ul><h3 id="2-群体极化"><a href="#2-群体极化" class="headerlink" title="2. 群体极化"></a>2. 群体极化</h3><p>在同质化群体中，观点往往向极端发展：</p><ul><li>网络社群中的极端言论</li><li>各类”圈子文化”的形成</li></ul><h1 id="四、独立思考能力"><a href="#四、独立思考能力" class="headerlink" title="四、独立思考能力"></a>四、独立思考能力</h1><h3 id="1-多元信息源"><a href="#1-多元信息源" class="headerlink" title="1. 多元信息源"></a>1. 多元信息源</h3><ul><li>主动接触不同立场的观点</li><li>关注原始数据与一手资料</li><li>培养跨文化的信息获取能力</li></ul><h3 id="2-批判性思维"><a href="#2-批判性思维" class="headerlink" title="2. 批判性思维"></a>2. 批判性思维</h3><ul><li>学会识别信息源的可靠性</li><li>理解背后的利益关系</li><li>保持怀疑精神但避免阴谋论</li></ul><h3 id="3-实践方法"><a href="#3-实践方法" class="headerlink" title="3. 实践方法"></a>3. 实践方法</h3><ul><li>定期进行信息断舍离</li><li>建立个人的信息筛选系统</li><li>培养独立验证的习惯</li></ul>]]></content>
      
      
      <categories>
          
          <category> 研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息 </tag>
            
            <tag> 生活 </tag>
            
            <tag> 认知 </tag>
            
            <tag> 思考 </tag>
            
            <tag> 自我提高 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notion使用经验分享</title>
      <link href="/cn/40618/"/>
      <url>/cn/40618/</url>
      
        <content type="html"><![CDATA[<h1 id="Notion-小组件-Indify"><a href="#Notion-小组件-Indify" class="headerlink" title="Notion 小组件 - Indify"></a>Notion 小组件 - Indify</h1><p><a href="https://indify.co/">Indify</a> | 轻量 Notion 小组件</p><p>支持一个账号创建 6 个免费组件，超出需要付费</p><p>1 分钟即可快速使用的 Notion 小组件，可自定义程度高，目前包含 7 个免费组件</p><p><img src="https://lave.fun/cn/40618/1.png" alt="组件列表"> </p><p><strong>使用例子：</strong> 纪念日倒计时(Countdown组件)，人生 Wishlist(Life Progress Bar)</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li><p>创建账号后，左上角点击 <code>Add new widget</code> 或 在下方点击想要创建的组件类型</p></li><li><p>进入组件自定义页面后，进行自定义，完成后在左下角复制小组件链接</p></li></ol><p><img src="https://lave.fun/cn/40618/2.png" alt="组件自定义"></p><ol start="3"><li>进入 Notion 创建一个 embed 块，将小组件链接粘贴进去即可</li></ol><blockquote><p>注意：Indify 不仅支持 Notion，还支持多种平台，感兴趣可以访问官网看看</p></blockquote><h1 id="使用-Notion-创建恋爱共享日记"><a href="#使用-Notion-创建恋爱共享日记" class="headerlink" title="使用 Notion 创建恋爱共享日记"></a>使用 Notion 创建恋爱共享日记</h1><p><a href="https://www.notion.so/marketplace/templates/love-hub?cr=cre%253Alimitless">Love Hub</a> | 一个 Notion 恋爱共享日记模板</p><p>这个模版十分的轻量方便实用，讨论区、关系日历这两个功能挺好用的</p><p>适合安排一起的行程或者记录一些重要日子之类的等等，个人感觉挺好用的总之</p><blockquote><p>应该可以发现 这个里面的 We shared our life for 其实就是我上面推荐的 Indify 组件的 Countdown 组件<br>正好发现如果需要改时间只能自己创建一个这个小组件，然后替换掉，结果发现 Indify 还挺好用的XD</p></blockquote><p><img src="https://s3.us-west-2.amazonaws.com/public.notion-static.com/template/9cd1e4aa-0507-4799-be51-f3eb1ca795bf/1713627724258/desktop.jpg" alt="模版宣传图"></p>]]></content>
      
      
      <categories>
          
          <category> 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我在看的技术指标</title>
      <link href="/cn/28339/"/>
      <url>/cn/28339/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本人主要在币圈，所以有些指标可能只适用于币圈，仅供参考</p></blockquote><h1 id="一、RSI"><a href="#一、RSI" class="headerlink" title="一、RSI"></a>一、RSI</h1><p>RSI（相对强弱指标）是个动量指标，用于衡量资产的超买或超卖状态。</p><p>RSI 的取值范围在0-100之间：</p><ul><li>当 <strong>RSI &gt; 70</strong> 时，超买，价格可能 <strong>回落</strong></li><li>当 <strong>RSI &lt; 30</strong> 时，超卖，价格可能 <strong>反弹</strong></li></ul><p>注意点：</p><ul><li>RSI背离：当价格创新高而 RSI 未创新高，可能预示顶部形成；反之亦然</li><li>时间周期：不同时间周期的RSI可能给出不同的信号，建议结合多个时间周期分析</li></ul><p>常见 RSI 策略：</p><ol><li>超买超卖反转：在RSI达到极值时寻找反转机会</li><li>趋势跟随：在强势趋势中，RSI可能长期保持在高位或低位</li><li>背离交易：寻找价格与RSI之间的背离信号</li></ol><p>RSI 计算方法：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">RSI</span> = <span class="number">100</span> - [<span class="number">100</span> / (<span class="number">1</span> + <span class="variable constant_">RS</span>)]</span><br><span class="line"><span class="variable constant_">RS</span> = 平均上涨点数 / 平均下跌点数</span><br></pre></td></tr></table></figure><h1 id="二、Bollinger-Bands"><a href="#二、Bollinger-Bands" class="headerlink" title="二、Bollinger Bands"></a>二、Bollinger Bands</h1><p>布林带（Bollinger Bands），由中轨（20日移动平均线）和上下轨（标准差通道）组成。</p><p>布林带的三条线：</p><ul><li><strong>中轨（Middle Band）</strong>：20日简单移动平均线（SMA）</li><li><strong>上轨（Upper Band）</strong>：中轨 + 2倍标准差</li><li><strong>下轨（Lower Band）</strong>：中轨 - 2倍标准差</li></ul><p>布林带使用要点：</p><ul><li><strong>带宽收窄</strong>：表示波动率降低，可能预示重要突破即将发生</li><li><strong>价格触及上下轨</strong>：可能出现反转信号</li><li><strong>突破上下轨</strong>：表示强势趋势的形成</li></ul><p>交易策略：</p><ol><li>当价格触及上轨时考虑卖出，触及下轨时考虑买入</li><li>带宽收窄后等待突破方向确认再进场</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">上轨 = <span class="title function_">SMA</span>(<span class="number">20</span>) + <span class="number">2</span> * <span class="title class_">StandardDeviation</span></span><br><span class="line">中轨 = <span class="title function_">SMA</span>(<span class="number">20</span>)</span><br><span class="line">下轨 = <span class="title function_">SMA</span>(<span class="number">20</span>) - <span class="number">2</span> * <span class="title class_">StandardDeviation</span></span><br></pre></td></tr></table></figure><h1 id="三、Pi-Cycle"><a href="#三、Pi-Cycle" class="headerlink" title="三、Pi Cycle"></a>三、Pi Cycle</h1><p><a href="https://www.coinglass.com/zh-TW/pro/i/pi-cycle-top-indicator">Pi Cycle from CoinGlass</a></p><p>Pi Cycle 用于识别比特币市场周期顶部，由两条移动平均线组成：</p><ul><li>111天移动平均线（MA） × 2：较快的移动平均线</li><li>350天移动平均线（MA）：较慢的移动平均线</li></ul><p>主要观察点：</p><ul><li><strong>顶部信号</strong>：当两条线相交时，通常表示比特币价格接近周期性顶部</li><li>历史准确性：在过去的比特币市场中，该指标多次准确预测了重要高点</li></ul><p>使用注意事项：</p><ol><li>相交后不一定立即见顶，可能会有一定延迟</li><li>仅适用于识别顶部，不适合预测底部</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">快线 = <span class="title function_">MA</span>(<span class="number">111</span>) * <span class="number">2</span></span><br><span class="line">慢线 = <span class="title function_">MA</span>(<span class="number">350</span>)</span><br><span class="line">交叉信号 = 快线与慢线相交</span><br></pre></td></tr></table></figure><h1 id="四、比特币优势指数-Bitcoin-Dominance"><a href="#四、比特币优势指数-Bitcoin-Dominance" class="headerlink" title="四、比特币优势指数 (Bitcoin Dominance)"></a>四、比特币优势指数 (Bitcoin Dominance)</h1><p>比特币优势指数反映了比特币在整个加密货币市场中的占比：</p><ul><li><strong>计算方法</strong>：比特币市值 &#x2F; 加密货币总市值 × 100%</li><li><strong>参考值</strong>：<ul><li>高于 60%：比特币市场主导，山寨币可能承压</li><li>低于 40%：山寨币活跃，市场可能处于亢奋状态</li><li>历史高点：90%以上（2017年之前）</li><li>历史低点：约33%（2018年初）</li></ul></li></ul><p>使用要点：</p><ul><li>指数上升：资金向比特币集中，可能是避险信号</li><li>指数下降：资金向山寨币扩散，市场风险偏好上升</li><li>极端值出现：可能预示市场周期转换</li></ul><h1 id="五、稳定币指标-Stablecoin-Indicators"><a href="#五、稳定币指标-Stablecoin-Indicators" class="headerlink" title="五、稳定币指标 (Stablecoin Indicators)"></a>五、稳定币指标 (Stablecoin Indicators)</h1><h2 id="1-稳定币占比指数"><a href="#1-稳定币占比指数" class="headerlink" title="1. 稳定币占比指数"></a>1. 稳定币占比指数</h2><ul><li><strong>计算方法</strong>：稳定币总市值 &#x2F; 加密货币总市值 × 100%</li><li><strong>意义</strong>：反映市场上的潜在购买力</li><li><strong>信号</strong>：<ul><li>占比上升：表示更多资金在场外等待机会</li><li>占比下降：表示资金正在入场</li></ul></li></ul><h2 id="2-稳定币供应率变化"><a href="#2-稳定币供应率变化" class="headerlink" title="2. 稳定币供应率变化"></a>2. 稳定币供应率变化</h2><ul><li><strong>计算方法</strong>：(当前稳定币供应量 - 前期稳定币供应量) &#x2F; 前期稳定币供应量 × 100%</li><li><strong>意义</strong>：反映市场资金流向</li><li><strong>信号</strong>：<ul><li>供应量增加：表示新资金进入市场的潜力增加</li><li>供应量减少：可能表示资金正在退出市场</li></ul></li></ul><h2 id="3-稳定币流动性比率"><a href="#3-稳定币流动性比率" class="headerlink" title="3. 稳定币流动性比率"></a>3. 稳定币流动性比率</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">流动性比率 = 主流稳定币<span class="number">24</span>小时成交量 / 稳定币总市值</span><br></pre></td></tr></table></figure><ul><li><strong>高比率</strong>：表示市场活跃度高</li><li><strong>低比率</strong>：表示市场活跃度低</li></ul><p>使用建议：</p><ol><li>结合多个稳定币指标综合分析</li><li>关注主要稳定币（如USDT、USDC）的数据变化</li><li>注意与其他市场指标的相关性</li><li>警惕单个稳定币的异常波动</li></ol><h1 id="六、恐惧贪婪指数-Fear-Greed-Index"><a href="#六、恐惧贪婪指数-Fear-Greed-Index" class="headerlink" title="六、恐惧贪婪指数 (Fear &amp; Greed Index)"></a>六、恐惧贪婪指数 (Fear &amp; Greed Index)</h1><p>一个衡量市场情绪的综合指标，数值范围0-100：</p><ul><li>0-25：极度恐惧</li><li>26-45：恐惧</li><li>46-55：中性</li><li>56-75：贪婪</li><li>76-100：极度贪婪</li></ul><p>计算因素包括：</p><ul><li>波动性 (25%)</li><li>市场动量&#x2F;交易量 (25%)</li><li>社交媒体情绪 (15%)</li><li>调查数据 (15%)</li><li>比特币主导地位 (10%)</li><li>趋势数据 (10%)</li></ul><p>不过其实我个人觉得这个指数参考意义不大，尤其是牛熊</p><p>币圈的波动性太大了，情绪也经常被操纵</p><p>顶多作为参考，不能作为买卖的依据</p><h1 id="七、资金费率-Funding-Rate"><a href="#七、资金费率-Funding-Rate" class="headerlink" title="七、资金费率 (Funding Rate)"></a>七、资金费率 (Funding Rate)</h1><p>永续合约中的重要指标：</p><ul><li><strong>正费率</strong>：多头支付空头，表示市场看涨</li><li><strong>负费率</strong>：空头支付多头，表示市场看跌</li></ul><p>使用策略：</p><ol><li>极端费率可能预示短期反转</li><li>持续的高费率表明做多情绪强烈</li><li>持续的负费率表明做空压力大</li></ol><p>虽然可能你只玩现货，但是合约现货相关性其实挺大的</p><p>当然，超长线投资除外啦，如果是短期想要抄底或大量买卖</p><p>这个指标还是值得关注的，毕竟预示着短期波动趋势</p><h1 id="八、大户持仓比例-Whales-Holdings"><a href="#八、大户持仓比例-Whales-Holdings" class="headerlink" title="八、大户持仓比例 (Whales Holdings)"></a>八、大户持仓比例 (Whales Holdings)</h1><p>监控大额钱包地址的持仓变化：</p><ul><li><strong>增持信号</strong>：大户地址持仓增加</li><li><strong>减持信号</strong>：大户地址持仓减少</li><li><strong>分散度</strong>：top 100持仓地址的集中度变化</li></ul><p>观察重点：</p><ol><li>大户地址数量变化</li><li>大户持仓总量变化</li><li>大户转账行为模式</li></ol><p>巨鲸机构当然是很影响买压和抛压，这可能更多贴近消息面了，但是也可以当成个指标参考吧 :D</p><h1 id="九、CME期货缺口-CME-Futures-Gap"><a href="#九、CME期货缺口-CME-Futures-Gap" class="headerlink" title="九、CME期货缺口 (CME Futures Gap)"></a>九、CME期货缺口 (CME Futures Gap)</h1><p>CME（芝加哥商品交易所）比特币期货因为只在工作日交易，而加密货币市场全天候交易，所以经常会出现价格缺口：</p><ul><li><strong>形成原因</strong>：CME周末休市，而加密货币继续交易</li><li><strong>缺口类型</strong>：<ul><li>向上缺口：周一开盘价高于周五收盘价</li><li>向下缺口：周一开盘价低于周五收盘价</li></ul></li></ul><p>重要特点：</p><ul><li>统计显示约70%的CME缺口最终会被填补</li><li>缺口填补不一定立即发生，可能需要数周或更长时间</li><li>大缺口（超过3%）的填补概率更高</li></ul><p>使用策略：</p><ol><li>缺口作为潜在支撑&#x2F;阻力位</li><li>结合其他指标判断缺口填补可能性</li><li>避免过度依赖，仅作为参考指标</li></ol><h1 id="十、期货市场重要指标"><a href="#十、期货市场重要指标" class="headerlink" title="十、期货市场重要指标"></a>十、期货市场重要指标</h1><h2 id="1-未平仓合约量-Open-Interest"><a href="#1-未平仓合约量-Open-Interest" class="headerlink" title="1. 未平仓合约量 (Open Interest)"></a>1. 未平仓合约量 (Open Interest)</h2><ul><li><strong>定义</strong>：市场上未结算的期货合约总量</li><li><strong>信号</strong>：<ul><li>上升：表示新资金进场，趋势可能持续</li><li>下降：表示资金退场，可能预示趋势减弱</li><li>剧烈变化：可能预示大幅波动</li></ul></li></ul><h2 id="2-多空持仓比例"><a href="#2-多空持仓比例" class="headerlink" title="2. 多空持仓比例"></a>2. 多空持仓比例</h2><ul><li><strong>计算方法</strong>：多头持仓量 &#x2F; 空头持仓量</li><li><strong>使用要点</strong>：<ul><li>极端比例可能预示反转</li><li>需要区分不同交易所的数据</li><li>主要交易所数据更具参考价值</li></ul></li></ul><h2 id="3-期货基差-Basis"><a href="#3-期货基差-Basis" class="headerlink" title="3. 期货基差 (Basis)"></a>3. 期货基差 (Basis)</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">基差 = 期货价格 - 现货价格</span><br><span class="line">基差率 = (期货价格 - 现货价格) / 现货价格 × <span class="number">100</span>%</span><br></pre></td></tr></table></figure><ul><li><strong>正基差</strong>：市场看涨，期货溢价</li><li><strong>负基差</strong>：市场看跌，期货折价</li><li><strong>基差扩大</strong>：市场情绪强烈</li><li><strong>基差收窄</strong>：市场趋于平稳</li></ul><h2 id="4-清算率-Liquidation-Rate"><a href="#4-清算率-Liquidation-Rate" class="headerlink" title="4. 清算率 (Liquidation Rate)"></a>4. 清算率 (Liquidation Rate)</h2><ul><li><strong>定义</strong>：被强制平仓的合约占未平仓合约的比例</li><li><strong>意义</strong>：<ul><li>高清算率：市场波动剧烈，可能出现连锁反应</li><li>清算集中：可能造成价格快速波动</li><li>方向性清算：反映市场情绪过度</li></ul></li></ul><p>使用建议：</p><ol><li>综合多个期货指标进行分析</li><li>关注主流交易所的数据</li><li>注意指标之间的相互验证</li><li>结合现货市场指标</li></ol><hr><blockquote><p>接下来是我不太熟悉但是币圈常用的指标汇总</p></blockquote><h1 id="一、MACD"><a href="#一、MACD" class="headerlink" title="一、MACD"></a>一、MACD</h1><p>MACD（移动平均线趋同散度）是一个重要的趋势跟踪指标，由以下三部分组成：</p><ul><li><strong>MACD线</strong>：12日EMA - 26日EMA</li><li><strong>信号线</strong>：MACD的9日EMA</li><li><strong>MACD柱状图</strong>：MACD线 - 信号线</li></ul><p>使用要点：</p><ul><li>金叉：MACD线上穿信号线，买入信号</li><li>死叉：MACD线下穿信号线，卖出信号</li><li>柱状图：反映趋势强度，柱状图越大表示趋势越强</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">MACD</span> = <span class="title function_">EMA</span>(<span class="number">12</span>) - <span class="title function_">EMA</span>(<span class="number">26</span>)</span><br><span class="line">信号线 = <span class="title function_">EMA</span>(<span class="variable constant_">MACD</span>, <span class="number">9</span>)</span><br><span class="line">柱状图 = <span class="variable constant_">MACD</span> - 信号线</span><br></pre></td></tr></table></figure><h1 id="二、OBV-On-Balance-Volume"><a href="#二、OBV-On-Balance-Volume" class="headerlink" title="二、OBV (On-Balance Volume)"></a>二、OBV (On-Balance Volume)</h1><p>OBV是一个成交量指标，特别适合加密货币市场，用于确认价格趋势：</p><ul><li>当收盘价上涨时，当日成交量加到OBV上</li><li>当收盘价下跌时，当日成交量从OBV中减去</li></ul><p>关键观察点：</p><ul><li>OBV上升：表明买方力量占优</li><li>OBV下降：表明卖方力量占优</li><li>OBV背离：价格与OBV走势不一致时，可能预示反转</li></ul><h1 id="三、Stochastic-RSI"><a href="#三、Stochastic-RSI" class="headerlink" title="三、Stochastic RSI"></a>三、Stochastic RSI</h1><p>Stochastic RSI (StochRSI) 是RSI的改良版本，结合了随机指标的特性：</p><ul><li>取值范围：0-1（或0-100）</li><li>超买区：0.8以上</li><li>超卖区：0.2以下</li></ul><p>优势：</p><ul><li>比传统RSI更敏感</li><li>能更早发现潜在反转机会</li><li>特别适合加密货币的高波动特性</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">StochRSI</span> = (<span class="variable constant_">RSI</span> - 最低<span class="variable constant_">RSI</span>) / (最高<span class="variable constant_">RSI</span> - 最低<span class="variable constant_">RSI</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 投资 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 投资 </tag>
            
            <tag> 推荐文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Technical Indicators I Watch</title>
      <link href="/en/50399/"/>
      <url>/en/50399/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Since I primarily trade in the crypto market, some indicators may only be applicable to cryptocurrency trading. This is for reference only.</p></blockquote><h1 id="I-RSI"><a href="#I-RSI" class="headerlink" title="I. RSI"></a>I. RSI</h1><p>The RSI (Relative Strength Index) is a momentum indicator used to measure whether an asset is overbought or oversold.</p><p>RSI values range from 0 to 100:</p><ul><li>When <strong>RSI &gt; 70</strong>, the asset is overbought, suggesting a potential <strong>price decline</strong></li><li>When <strong>RSI &lt; 30</strong>, the asset is oversold, suggesting a potential <strong>price rebound</strong></li></ul><p>Key points:</p><ul><li>RSI Divergence: When price makes new highs but RSI doesn’t, it may indicate a top formation; the opposite is also true</li><li>Time Frames: RSI on different time frames may give different signals; it’s recommended to analyze multiple time frames</li></ul><p>Common RSI Strategies:</p><ol><li>Overbought&#x2F;Oversold Reversal: Look for reversal opportunities when RSI reaches extreme values</li><li>Trend Following: During strong trends, RSI may remain in overbought or oversold territory</li><li>Divergence Trading: Look for divergence signals between price and RSI</li></ol><p>RSI Calculation:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">RSI</span> = <span class="number">100</span> - [<span class="number">100</span> / (<span class="number">1</span> + <span class="variable constant_">RS</span>)]</span><br><span class="line"><span class="variable constant_">RS</span> = <span class="title class_">Average</span> <span class="title class_">Gain</span> / <span class="title class_">Average</span> <span class="title class_">Loss</span></span><br></pre></td></tr></table></figure><h1 id="II-Bollinger-Bands"><a href="#II-Bollinger-Bands" class="headerlink" title="II. Bollinger Bands"></a>II. Bollinger Bands</h1><p>Bollinger Bands consist of a middle band (20-day moving average) and upper&#x2F;lower bands (standard deviation channels).</p><p>The three bands:</p><ul><li><strong>Middle Band</strong>: 20-day Simple Moving Average (SMA)</li><li><strong>Upper Band</strong>: Middle Band + 2 Standard Deviations</li><li><strong>Lower Band</strong>: Middle Band - 2 Standard Deviations</li></ul><p>Key Bollinger Band Concepts:</p><ul><li><strong>Band Squeeze</strong>: Indicates decreased volatility, potentially signaling an upcoming breakout</li><li><strong>Price Touching Bands</strong>: May indicate potential reversal signals</li><li><strong>Band Breakouts</strong>: Suggests formation of strong trends</li></ul><p>Trading Strategies:</p><ol><li>Consider selling when price touches upper band, buying when it touches lower band</li><li>Wait for breakout direction confirmation after band squeeze before entering positions</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Upper</span> <span class="title class_">Band</span> = <span class="title function_">SMA</span>(<span class="number">20</span>) + <span class="number">2</span> * <span class="title class_">StandardDeviation</span></span><br><span class="line"><span class="title class_">Middle</span> <span class="title class_">Band</span> = <span class="title function_">SMA</span>(<span class="number">20</span>)</span><br><span class="line"><span class="title class_">Lower</span> <span class="title class_">Band</span> = <span class="title function_">SMA</span>(<span class="number">20</span>) - <span class="number">2</span> * <span class="title class_">StandardDeviation</span></span><br></pre></td></tr></table></figure><h1 id="III-Pi-Cycle"><a href="#III-Pi-Cycle" class="headerlink" title="III. Pi Cycle"></a>III. Pi Cycle</h1><p><a href="https://www.coinglass.com/zh-TW/pro/i/pi-cycle-top-indicator">Pi Cycle from CoinGlass</a></p><p>The Pi Cycle is used to identify Bitcoin market cycle tops, consisting of two moving averages:</p><ul><li>111-day Moving Average (MA) × 2: The faster moving average</li><li>350-day Moving Average (MA): The slower moving average</li></ul><p>Key Observations:</p><ul><li><strong>Top Signal</strong>: When the two lines intersect, it typically indicates Bitcoin price is near a cyclical top</li><li>Historical Accuracy: This indicator has accurately predicted several major highs in past Bitcoin markets</li></ul><p>Usage Notes:</p><ol><li>The actual top may not form immediately after intersection</li><li>Only suitable for identifying tops, not bottoms</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Fast</span> <span class="title class_">Line</span> = <span class="title function_">MA</span>(<span class="number">111</span>) * <span class="number">2</span></span><br><span class="line"><span class="title class_">Slow</span> <span class="title class_">Line</span> = <span class="title function_">MA</span>(<span class="number">350</span>)</span><br><span class="line"><span class="title class_">Cross</span> <span class="title class_">Signal</span> = <span class="title class_">Intersection</span> <span class="keyword">of</span> <span class="title class_">Fast</span> and <span class="title class_">Slow</span> <span class="title class_">Lines</span></span><br></pre></td></tr></table></figure><h1 id="IV-Bitcoin-Dominance"><a href="#IV-Bitcoin-Dominance" class="headerlink" title="IV. Bitcoin Dominance"></a>IV. Bitcoin Dominance</h1><p>Bitcoin Dominance reflects Bitcoin’s market share in the entire cryptocurrency market:</p><ul><li><strong>Calculation</strong>: Bitcoin Market Cap &#x2F; Total Crypto Market Cap × 100%</li><li><strong>Reference Values</strong>:<ul><li>Above 60%: Bitcoin dominance, altcoins may face pressure</li><li>Below 40%: Active altcoin market, possible market euphoria</li><li>Historical High: Above 90% (pre-2017)</li><li>Historical Low: Around 33% (early 2018)</li></ul></li></ul><p>Key Points:</p><ul><li>Rising Index: Capital concentrating in Bitcoin, possible risk-off signal</li><li>Falling Index: Capital flowing to altcoins, increasing risk appetite</li><li>Extreme Values: May indicate market cycle transitions</li></ul><h1 id="V-Stablecoin-Indicators"><a href="#V-Stablecoin-Indicators" class="headerlink" title="V. Stablecoin Indicators"></a>V. Stablecoin Indicators</h1><h2 id="1-Stablecoin-Dominance"><a href="#1-Stablecoin-Dominance" class="headerlink" title="1. Stablecoin Dominance"></a>1. Stablecoin Dominance</h2><ul><li><strong>Calculation</strong>: Total Stablecoin Market Cap &#x2F; Total Crypto Market Cap × 100%</li><li><strong>Significance</strong>: Reflects potential buying power in the market</li><li><strong>Signals</strong>:<ul><li>Rising Ratio: More capital waiting on sidelines</li><li>Falling Ratio: Capital entering the market</li></ul></li></ul><h2 id="2-Stablecoin-Supply-Change"><a href="#2-Stablecoin-Supply-Change" class="headerlink" title="2. Stablecoin Supply Change"></a>2. Stablecoin Supply Change</h2><ul><li><strong>Calculation</strong>: (Current Supply - Previous Supply) &#x2F; Previous Supply × 100%</li><li><strong>Significance</strong>: Reflects capital flow direction</li><li><strong>Signals</strong>:<ul><li>Supply Increase: Indicates potential for new capital inflow</li><li>Supply Decrease: May indicate capital exiting the market</li></ul></li></ul><h2 id="3-Stablecoin-Liquidity-Ratio"><a href="#3-Stablecoin-Liquidity-Ratio" class="headerlink" title="3. Stablecoin Liquidity Ratio"></a>3. Stablecoin Liquidity Ratio</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Liquidity</span> <span class="title class_">Ratio</span> = <span class="title class_">Major</span> <span class="title class_">Stablecoins</span> 24h <span class="title class_">Volume</span> / <span class="title class_">Total</span> <span class="title class_">Stablecoin</span> <span class="title class_">Market</span> <span class="title class_">Cap</span></span><br></pre></td></tr></table></figure><ul><li><strong>High Ratio</strong>: Indicates high market activity</li><li><strong>Low Ratio</strong>: Indicates low market activity</li></ul><p>Usage Recommendations:</p><ol><li>Analyze multiple stablecoin indicators together</li><li>Monitor major stablecoins (like USDT, USDC) data changes</li><li>Note correlations with other market indicators</li><li>Watch for abnormal fluctuations in individual stablecoins</li></ol><h1 id="VI-Fear-Greed-Index"><a href="#VI-Fear-Greed-Index" class="headerlink" title="VI. Fear &amp; Greed Index"></a>VI. Fear &amp; Greed Index</h1><p>A comprehensive indicator measuring market sentiment, ranging from 0-100:</p><ul><li>0-25: Extreme Fear</li><li>26-45: Fear</li><li>46-55: Neutral</li><li>56-75: Greed</li><li>76-100: Extreme Greed</li></ul><p>Calculation Factors:</p><ul><li>Volatility (25%)</li><li>Market Momentum&#x2F;Volume (25%)</li><li>Social Media Sentiment (15%)</li><li>Survey Data (15%)</li><li>Bitcoin Dominance (10%)</li><li>Trends Data (10%)</li></ul><p>Personally, I find this index less reliable, especially during bull and bear markets. Crypto market volatility is too high, and sentiment is often manipulated. It’s better used as reference rather than a trading signal.</p><h1 id="VII-Funding-Rate"><a href="#VII-Funding-Rate" class="headerlink" title="VII. Funding Rate"></a>VII. Funding Rate</h1><p>A crucial indicator in perpetual futures contracts:</p><ul><li><strong>Positive Rate</strong>: Longs pay shorts, indicating bullish market</li><li><strong>Negative Rate</strong>: Shorts pay longs, indicating bearish market</li></ul><p>Strategy Usage:</p><ol><li>Extreme rates may indicate short-term reversals</li><li>Sustained high rates show strong long sentiment</li><li>Sustained negative rates show heavy short pressure</li></ol><p>Even if you only trade spot, futures and spot markets are highly correlated. While this may not matter for very long-term investment, it’s worth monitoring for short-term bottom fishing or large trades as it indicates short-term volatility trends.</p><h1 id="VIII-Whale-Holdings"><a href="#VIII-Whale-Holdings" class="headerlink" title="VIII. Whale Holdings"></a>VIII. Whale Holdings</h1><p>Monitoring large wallet address holdings:</p><ul><li><strong>Accumulation Signal</strong>: Increase in whale address holdings</li><li><strong>Distribution Signal</strong>: Decrease in whale address holdings</li><li><strong>Concentration</strong>: Changes in top 100 address holdings</li></ul><p>Key Observations:</p><ol><li>Changes in number of whale addresses</li><li>Changes in total whale holdings</li><li>Whale transfer behavior patterns</li></ol><p>While whales and institutions significantly impact buying and selling pressure, this might be more news-related, but it can serve as a reference indicator.</p><h1 id="IX-CME-Futures-Gap"><a href="#IX-CME-Futures-Gap" class="headerlink" title="IX. CME Futures Gap"></a>IX. CME Futures Gap</h1><p>CME (Chicago Mercantile Exchange) Bitcoin futures often create price gaps due to weekday-only trading while crypto markets trade 24&#x2F;7:</p><ul><li><strong>Formation</strong>: CME weekend closure while crypto continues trading</li><li><strong>Gap Types</strong>:<ul><li>Upward Gap: Monday open higher than Friday close</li><li>Downward Gap: Monday open lower than Friday close</li></ul></li></ul><p>Important Features:</p><ul><li>Approximately 70% of CME gaps eventually fill</li><li>Gap filling may not occur immediately, could take weeks or longer</li><li>Larger gaps (&gt;3%) have higher probability of filling</li></ul><p>Usage Strategy:</p><ol><li>Gaps as potential support&#x2F;resistance levels</li><li>Combine with other indicators to assess gap-fill probability</li><li>Avoid over-reliance, use as reference only</li></ol><h1 id="X-Important-Futures-Market-Indicators"><a href="#X-Important-Futures-Market-Indicators" class="headerlink" title="X. Important Futures Market Indicators"></a>X. Important Futures Market Indicators</h1><h2 id="1-Open-Interest"><a href="#1-Open-Interest" class="headerlink" title="1. Open Interest"></a>1. Open Interest</h2><ul><li><strong>Definition</strong>: Total number of outstanding futures contracts</li><li><strong>Signals</strong>:<ul><li>Increasing: New money entering, trend likely to continue</li><li>Decreasing: Money exiting, possible trend weakening</li><li>Sharp Changes: Potential high volatility ahead</li></ul></li></ul><h2 id="2-Long-Short-Ratio"><a href="#2-Long-Short-Ratio" class="headerlink" title="2. Long&#x2F;Short Ratio"></a>2. Long&#x2F;Short Ratio</h2><ul><li><strong>Calculation</strong>: Long Positions &#x2F; Short Positions</li><li><strong>Key Points</strong>:<ul><li>Extreme ratios may indicate reversals</li><li>Differentiate between exchange data</li><li>Major exchange data more relevant</li></ul></li></ul><h2 id="3-Basis"><a href="#3-Basis" class="headerlink" title="3. Basis"></a>3. Basis</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Basis</span> = <span class="title class_">Futures</span> <span class="title class_">Price</span> - <span class="title class_">Spot</span> <span class="title class_">Price</span></span><br><span class="line"><span class="title class_">Basis</span> <span class="title class_">Rate</span> = (<span class="title class_">Futures</span> <span class="title class_">Price</span> - <span class="title class_">Spot</span> <span class="title class_">Price</span>) / <span class="title class_">Spot</span> <span class="title class_">Price</span> × <span class="number">100</span>%</span><br></pre></td></tr></table></figure><ul><li><strong>Positive Basis</strong>: Bullish market, futures premium</li><li><strong>Negative Basis</strong>: Bearish market, futures discount</li><li><strong>Widening Basis</strong>: Strong market sentiment</li><li><strong>Narrowing Basis</strong>: Market stabilization</li></ul><h2 id="4-Liquidation-Rate"><a href="#4-Liquidation-Rate" class="headerlink" title="4. Liquidation Rate"></a>4. Liquidation Rate</h2><ul><li><strong>Definition</strong>: Ratio of forcefully closed contracts to open interest</li><li><strong>Significance</strong>:<ul><li>High Rate: Intense market volatility, possible cascade effects</li><li>Concentrated Liquidations: Potential rapid price movements</li><li>Directional Liquidations: Reflects excessive market sentiment</li></ul></li></ul><p>Usage Recommendations:</p><ol><li>Analyze multiple futures indicators together</li><li>Focus on major exchange data</li><li>Look for cross-validation between indicators</li><li>Combine with spot market indicators</li></ol><hr><blockquote><p>The following are commonly used crypto indicators that I’m less familiar with</p></blockquote><h1 id="I-MACD"><a href="#I-MACD" class="headerlink" title="I. MACD"></a>I. MACD</h1><p>MACD (Moving Average Convergence Divergence) is an important trend-following indicator consisting of:</p><ul><li><strong>MACD Line</strong>: 12-day EMA - 26-day EMA</li><li><strong>Signal Line</strong>: 9-day EMA of MACD</li><li><strong>MACD Histogram</strong>: MACD Line - Signal Line</li></ul><p>Key Points:</p><ul><li>Golden Cross: MACD crosses above signal line, buy signal</li><li>Death Cross: MACD crosses below signal line, sell signal</li><li>Histogram: Reflects trend strength, larger bars indicate stronger trends</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">MACD</span> = <span class="title function_">EMA</span>(<span class="number">12</span>) - <span class="title function_">EMA</span>(<span class="number">26</span>)</span><br><span class="line"><span class="title class_">Signal</span> <span class="title class_">Line</span> = <span class="title function_">EMA</span>(<span class="variable constant_">MACD</span>, <span class="number">9</span>)</span><br><span class="line"><span class="title class_">Histogram</span> = <span class="variable constant_">MACD</span> - <span class="title class_">Signal</span> <span class="title class_">Line</span></span><br></pre></td></tr></table></figure><h1 id="II-OBV-On-Balance-Volume"><a href="#II-OBV-On-Balance-Volume" class="headerlink" title="II. OBV (On-Balance Volume)"></a>II. OBV (On-Balance Volume)</h1><p>OBV is a volume indicator particularly suited for cryptocurrency markets, used to confirm price trends:</p><ul><li>Add daily volume when closing price rises</li><li>Subtract daily volume when closing price falls</li></ul><p>Key Observations:</p><ul><li>Rising OBV: Indicates buyer dominance</li><li>Falling OBV: Indicates seller dominance</li><li>OBV Divergence: Potential reversal when price and OBV trends differ</li></ul><h1 id="III-Stochastic-RSI"><a href="#III-Stochastic-RSI" class="headerlink" title="III. Stochastic RSI"></a>III. Stochastic RSI</h1><p>Stochastic RSI (StochRSI) is an enhanced version of RSI, combining stochastic oscillator characteristics:</p><ul><li>Range: 0-1 (or 0-100)</li><li>Overbought: Above 0.8</li><li>Oversold: Below 0.2</li></ul><p>Advantages:</p><ul><li>More sensitive than traditional RSI</li><li>Earlier potential reversal detection</li><li>Well-suited for crypto’s high volatility</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">StochRSI</span> = (<span class="variable constant_">RSI</span> - <span class="title class_">Lowest</span> <span class="variable constant_">RSI</span>) / (<span class="title class_">Highest</span> <span class="variable constant_">RSI</span> - <span class="title class_">Lowest</span> <span class="variable constant_">RSI</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Investment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Learning </tag>
            
            <tag> Investment </tag>
            
            <tag> Notes </tag>
            
            <tag> Recommend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>投资笔记 &amp; 任何人都要学的经济认知</title>
      <link href="/cn/7542/"/>
      <url>/cn/7542/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此篇笔记将持续慢慢更新哦…<br>后面会在 bilibili频道 上更新，欢迎关注 <a href="https://space.bilibili.com/3546814099753673">bilibili@冷库书</a></p></blockquote><h1 id="一、资产认知"><a href="#一、资产认知" class="headerlink" title="一、资产认知"></a>一、资产认知</h1><h2 id="1-购买力"><a href="#1-购买力" class="headerlink" title="1. 购买力"></a>1. 购买力</h2><p>资产的本质是 <strong>购买力</strong>，而不是金钱本身。</p><p>你的资产取决于你的购买力，而不是你的收入数量。</p><p>购买力，也可以通过物价来去理解，我们都知道：</p><ul><li>现在的工资也比 20 年前涨了不知道几倍</li></ul><p>此时，你如果觉得这说明只是因为国家强盛所以大家工资涨这么多</p><p>那你就大错特错了，因为我们也都很容易发现：</p><ul><li>20 年前的物价比现在不知道低了多少</li></ul><p>最简单的例子：</p><p>你爹 20 年前给你爆了 1000 元人民币，你当时存了 500 元在存钱罐</p><p>剩下 500 你当时去大餐厅吃了整整一周的大餐，现在你掏出来发现</p><p>欸！只能吃个两顿大餐了，在这段时间里，金币本身没变，但是购买力下降了</p><p>需要摆脱的思维是：</p><ol><li>你不能拿单一收入的金钱数量来去衡量你的资产，而是用你的购买力来去衡量</li><li>也就是同时考察 收入 和 物价 两个指标，你的资产能去购买的能力是多少，即购买力</li></ol><h2 id="2-对资产的认知偏差"><a href="#2-对资产的认知偏差" class="headerlink" title="2. 对资产的认知偏差"></a>2. 对资产的认知偏差</h2><p>理解了 <code>资产本质是购买力</code> 这个概念，我就可以来讲讲我们的资产了</p><p>毋庸置疑基本所有人都倾向于希望自己的资产增加，但是其实很多人还是忽视了：</p><ul><li>资产是购买力，不是你有多少自己国家的法币！！！</li></ul><p>为什么这么说，我猜… 你肯定习惯把钱存银行里对吧，是不是觉得：</p><ul><li>我存银行里，钱也不会变少，银行还给我利息，我不是赚麻了吗！</li></ul><p>这是好的，但是只在特定情况是好的：</p><ul><li><strong>银行利息的盈利部分</strong> 高于 <strong>你购买力被削弱的部分</strong>（物价上涨的速度）时</li></ul><p>而问题就在于，一般绝大部分时间，这是不可能的</p><p>银行的利息几乎永远难以补足你购买力缩水的那部分价值</p><p><strong>所以其实：你自以为聪明存在银行里的钱数字是慢慢增加，其实购买力一直在缩水</strong></p><p>为什么造成这个原因，可以继续看下去，也可以直接跳到 <a href="#1-%E9%80%9A%E8%86%A8">通膨板块</a></p><p>然后，再强调一遍，资产是购买力，不是你余额的数字！！！</p><p>所以你除了每天疯狂的想着怎么增加自己的资产，<strong>更应该，想想怎么保护你的资产</strong></p><p>去保护住你的购买力，而不是一味的想着怎么提高你收入的数字，增加你的余额</p><p>到这里相信你会对资产有了一个正确的认知，接下来让 Lave 给你聊聊资产保护吧</p><h2 id="3-资产保护"><a href="#3-资产保护" class="headerlink" title="3. 资产保护"></a>3. 资产保护</h2><p>既然存钱在银行最终导致的还是资产缩水，你肯定会想完蛋啦那我该怎么办，难道全花光吗？？</p><p>这其实的确是个最好的办法，但是并不是花在我们所熟知的商品上，而是花在 <strong>资产</strong> 上</p><p>也就是把我们会缩水的资产，换成不会缩水的资产或是缩水更小更慢的资产</p><p>比如：</p><ul><li>黄金</li><li>房产</li><li>股票</li><li>基金</li><li>债券</li><li>外汇</li><li>…</li></ul><p>这也便是投资的第一个首要目标，保护你的购买力，保护你的资产</p><p>这也是为什么 Lave 一直强调的，投资是任何人都要去学的一门课</p><p>相信你肯定已经开始期待去了解怎么保护你的爆金币能力了</p><p>但是在这之前，Lave 需要先给你讲讲一些基础常识</p><p>不过呢… 如果已经想要直接看看如何利用这些投资标的保护你的资产</p><p>可以先空降到 <a href="#1-%E6%8A%95%E8%B5%84%E6%A0%87%E7%9A%84">投资标的</a> 板块哦 😋</p><h1 id="二、基本经济常识"><a href="#二、基本经济常识" class="headerlink" title="二、基本经济常识"></a>二、基本经济常识</h1><blockquote><p>温馨提示：大量经济基本知识，可以选择细心学习<br>也可直接跳到 <a href="#%E4%B8%89%E6%8A%95%E8%B5%84">投资</a> 先看案例，我会对大部分概念添加空降索引，遇到陌生概念可以直接点击空降</p></blockquote><h2 id="1-通货膨胀"><a href="#1-通货膨胀" class="headerlink" title="1. 通货膨胀"></a>1. 通货膨胀</h2><p>通货膨胀 是指一国货币供应量增加，导致物价上涨的经济现象。</p><h3 id="1-1-什么导致了通胀"><a href="#1-1-什么导致了通胀" class="headerlink" title="1.1 什么导致了通胀?"></a>1.1 什么导致了通胀?</h3><ol><li><p><strong>货币供应量增加</strong> - 主导因素：<br>当一个国家的中央银行增加货币供应量时，市场上流通的货币变多</p><p>导致货币贬值，物价上涨。这是通胀最常见最主要的原因之一</p><p>俗称：央行（中央银行）开始放水了（印钞机启动了）</p></li><li><p><strong>需求拉动</strong>：<br>当市场需求超过供给时，商品和服务的价格会上涨。</p><p>例如，当经济繁荣时，消费者和企业的购买力增强，导致对商品和服务的需求增加，从而推高价格。</p></li><li><p><strong>成本推动</strong>：<br>当生产成本增加时，企业会将增加的成本转嫁给消费者，导致物价上涨。</p><p>例如，原材料价格上涨、工资上涨、税收增加等都会导致生产成本上升，从而引发通胀。</p></li><li><p><strong>预期通胀</strong>：<br>当人们预期未来物价会持续上涨时，他们会提前购买商品和服务，导致当前需求增加，从而推高物价。</p><p>这种预期本身也会成为通胀的一个因素。</p></li><li><p><strong>国际因素</strong>：<br>国际市场上的商品价格波动也会影响国内的通胀水平。</p><p>例如，国际油价上涨会导致国内燃油价格上涨，从而引发一系列商品和服务价格的上涨</p><p>还有成本这块，因为现在大部分的一个商品都不是靠一个国家生产的</p><p>很少有商品会在一个国家内拥有全部供应链和生产链的啦</p><p>所以国际原材料贸易的价差波动也经常会导致国内商品价格的波动</p></li><li><p><strong>政府政策</strong>：<br>政府的财政政策和货币政策也会影响通胀水平</p><p>例如，政府增加公共支出或减税，会增加市场上的货币流通量，从而推高物价。</p></li></ol><h3 id="1-2-通胀的影响"><a href="#1-2-通胀的影响" class="headerlink" title="1.2 通胀的影响"></a>1.2 通胀的影响</h3><ol><li><p><strong>购买力下降</strong>：<br> 填坑了也是，<strong>通膨便是导致购买力下降的最关键因素</strong></p><p> 通膨会导致货币的购买力下降，即同样数量的货币能够购买的商品和服务减少</p><p> 其实接下来的众多影响都可以归结进购买力下降的二次结果</p></li><li><p><strong>生活成本增加</strong>：<br> 通膨会导致生活成本增加，特别是对于那些收入固定的人群。</p><p> 例如，退休人员、低收入家庭等，他们的收入无法随着物价的上涨而增加，从而导致生活质量下降。</p></li><li><p><strong>储蓄贬值</strong>：<br> 通膨会导致储蓄的实际价值下降。</p><p> 例如，如果银行存款的利率低于通膨率，那么储户的实际购买力会下降，从而导致储蓄贬值。</p></li><li><p><strong>企业成本增加</strong>：<br> 通膨会导致企业的生产成本增加，例如原材料、劳动力等成本的上涨。</p><p> 这会影响企业的利润率，从而可能导致企业减少投资和扩张计划。</p></li><li><p><strong>经济不稳定</strong>：<br> 高通膨率会导致经济不稳定，增加经济的不确定性。</p><p> 例如，消费者和企业可能会推迟消费和投资决策，从而影响经济增长。</p></li><li><p><strong>收入分配不均</strong>：<br> 通膨可能会加剧收入分配的不均。</p><p> 例如，高收入人群可能更容易通过投资等方式抵御通膨的影响，而低收入人群则更容易受到通膨的冲击。</p></li><li><p><strong>国际竞争力下降</strong>：<br> 通膨会导致一国的商品和服务在国际市场上的竞争力下降。</p><p> 例如，出口商品的价格上涨可能会导致国际市场需求减少，从而影响出口企业的收入。</p></li></ol><h2 id="2-CPI"><a href="#2-CPI" class="headerlink" title="2. CPI"></a>2. CPI</h2><p>CPI（消费者物价指数）</p><p>接着正好就可以聊一聊 CPI 了</p><p>通胀（通货膨胀）和 CPI（消费者物价指数）之间存在着紧密的关系。</p><ul><li><p>通膨是指一国货币供应量增加，导致物价上涨的经济现象。</p></li><li><p>CPI则是衡量通膨水平的重要指标之一。</p></li></ul><p>CPI是通过对一定时期内的物价变化进行统计和分析，来反映通膨水平的。</p><p>通膨率的上涨意味着CPI的上涨，反之亦然。</p><p>在通膨环境下，物价上涨会导致CPI的上涨，降低货币的购买力。</p><p>如果CPI下降，意味着物价下跌，通膨率也会随之下降，货币的购买力会增加。</p><h3 id="2-1-CPI数据对投资市场的影响"><a href="#2-1-CPI数据对投资市场的影响" class="headerlink" title="2.1 CPI数据对投资市场的影响"></a>2.1 CPI数据对投资市场的影响</h3><ol><li><p><strong>股市</strong>：<br>如果CPI数据高于预期，可能表明通胀压力增加，<br>中央银行可能会采取紧缩货币政策，如加息，<br>从而对股市产生负面影响。反之，<br>如果CPI数据低于预期，可能会对股市产生积极影响。</p></li><li><p><strong>债市</strong>：<br>CPI数据对债券市场也有重要影响。<br>高于预期的CPI数据可能导致债券收益率上升，<br>因为投资者预期未来利率会上升，<br>从而降低现有债券的价格。相反，<br>低于预期的CPI数据可能会导致债券收益率下降，<br>债券价格上升。</p></li><li><p><strong>外汇市场</strong>：<br>CPI数据对外汇市场的影响主要体现在货币价值上。<br>高于预期的CPI数据可能导致本国货币升值，<br>因为市场预期中央银行会加息以应对通胀。<br>反之，低于预期的CPI数据可能导致本国货币贬值。</p></li><li><p><strong>大宗商品市场</strong>：<br>CPI数据对大宗商品市场也有影响。<br>高于预期的CPI数据可能表明通胀压力增加，<br>导致大宗商品价格上涨，因为投资者将大宗商品<br>视为对抗通胀的避险资产。相反，<br>低于预期的CPI数据可能导致大宗商品价格下跌。</p></li></ol><h3 id="2-2-CPI数据的解读"><a href="#2-2-CPI数据的解读" class="headerlink" title="2.2 CPI数据的解读"></a>2.2 CPI数据的解读</h3><ul><li><strong>与预期比较</strong>：将实际CPI数据与市场预期进行比较。<br>如果实际数据高于预期，通常被视为通胀压力增加的信号；<br>反之，则被视为通胀压力减轻的信号。</li><li><strong>长期趋势</strong>：观察CPI数据的长期趋势，<br>而不是单月的波动，以获得更准确的通胀水平评估。</li><li><strong>核心CPI</strong>：核心CPI剔除了食品和能源价格的波动，<br>更能反映基础通胀水平，是投资者和政策制定者关注的重要指标。</li></ul><h2 id="3-非农就业人口"><a href="#3-非农就业人口" class="headerlink" title="3. 非农就业人口"></a>3. 非农就业人口</h2><p>非农就业人口是指不包括农业部门的就业人数，<br>通常由政府统计部门每月发布。<br>非农就业人口数据是衡量一个国家经济健康状况的重要指标之一。</p><h3 id="3-1-非农就业人口的影响"><a href="#3-1-非农就业人口的影响" class="headerlink" title="3.1 非农就业人口的影响"></a>3.1 非农就业人口的影响</h3><ol><li><p><strong>经济增长</strong>：<br>非农就业人口的增加通常表明经济在增长，<br>因为更多的人找到了工作，意味着企业在扩张和招聘。</p></li><li><p><strong>消费能力</strong>：<br>就业人数的增加会提高整体消费能力，<br>因为更多的人有了收入，可以进行消费，<br>从而推动经济发展。</p></li><li><p><strong>投资市场</strong>：<br>非农就业人口数据对投资市场有直接影响。<br>数据强劲时，投资者对经济前景更有信心，<br>可能会推动股市上涨；反之，数据疲软时，<br>可能会导致股市下跌。</p></li><li><p><strong>货币政策</strong>：<br>中央银行会根据非农就业人口数据调整货币政策。<br>如果就业数据强劲，可能会考虑加息以防止经济过热；<br>如果数据疲软，可能会降息以刺激经济。</p></li><li><p><strong>通货膨胀</strong>：<br>就业人数增加可能会导致工资上涨，<br>从而推高生产成本，进而引发通货膨胀。<br>因此，非农就业人口数据也是通胀预期的重要参考。</p></li></ol><h3 id="3-2-非农就业人口数据的解读"><a href="#3-2-非农就业人口数据的解读" class="headerlink" title="3.2 非农就业人口数据的解读"></a>3.2 非农就业人口数据的解读</h3><ul><li><strong>与预期比较</strong>：将实际数据与市场预期进行比较。<br>如果实际数据高于预期，通常被视为利好消息；<br>反之，则被视为利空消息。</li><li><strong>长期趋势</strong>：观察数据的长期趋势，<br>而不是单月的波动，以获得更准确的经济健康状况评估。</li><li><strong>行业分布</strong>：分析哪些行业的就业人数增加或减少，<br>以判断哪些行业可能有投资机会或风险。</li></ul><h2 id="4-降息"><a href="#4-降息" class="headerlink" title="4. 降息"></a>4. 降息</h2><p>降息是指中央银行降低基准利率的行为，<br>通常是为了刺激经济增长。基准利率是银行间借贷的利率，<br>也是商业银行向客户提供贷款的参考利率。<br>降息会使借贷成本降低，从而鼓励企业和个人增加借贷和消费，<br>进而推动经济发展。</p><h3 id="4-1-降息对投资市场的影响"><a href="#4-1-降息对投资市场的影响" class="headerlink" title="4.1 降息对投资市场的影响"></a>4.1 降息对投资市场的影响</h3><ol><li><p><strong>股市</strong>：<br>降息通常会对股市产生积极影响。<br>借贷成本降低，企业融资成本减少，利润增加，<br>投资者对企业未来的盈利预期上升，<strong>股价可能上涨</strong></p></li><li><p><strong>债市</strong>：<br>降息会导致债券收益率下降，<br>因为新发行的债券利率较低，<br>现有高利率债券的价格会上升。<br>因此，降息对债券市场也有积极影响。</p></li><li><p><strong>房地产市场</strong>：<br>降息会降低房贷利率，购房成本减少，<br>可能会刺激房地产市场需求增加，房价上涨。</p></li><li><p><strong>外汇市场</strong>：<br>降息会导致本国货币贬值，<br>因为较低的利率使得投资者将资金转移到利率更高的国家，<br>从而减少对本国货币的需求。</p></li><li><p><strong>大宗商品市场</strong>：<br>降息会使得大宗商品价格上涨，<br>因为借贷成本降低，企业和个人的购买力增加，需求上升。</p></li></ol><h3 id="4-2-降息的解读"><a href="#4-2-降息的解读" class="headerlink" title="4.2 降息的解读"></a>4.2 降息的解读</h3><ul><li><strong>经济信号</strong>：降息通常被视为中央银行对经济前景不乐观的信号，<br>可能预示着经济增长放缓或衰退风险增加。</li><li><strong>政策预期</strong>：投资者会根据降息的幅度和频率，<br>预期未来的货币政策走向。如果降息幅度较大，<br>可能预示着未来还会有更多的宽松政策。</li><li><strong>市场反应</strong>：降息后，市场通常会有短期的积极反应，<br>但长期效果取决于经济基本面的改善情况。</li></ul><h2 id="5-加息"><a href="#5-加息" class="headerlink" title="5. 加息"></a>5. 加息</h2><p>加息是指中央银行提高基准利率的行为，通常是为了抑制通货膨胀和防止经济过热。</p><p>基准利率是银行间借贷的利率，也是商业银行向客户提供贷款的参考利率。</p><p>加息会使借贷成本增加，从而抑制企业和个人的借贷和消费，进而减缓经济增长。</p><h3 id="5-1-加息对投资市场的影响"><a href="#5-1-加息对投资市场的影响" class="headerlink" title="5.1 加息对投资市场的影响"></a>5.1 加息对投资市场的影响</h3><ol><li><p><strong>股市</strong>：<br>加息通常会对股市产生负面影响。借贷成本增加，企业融资成本上升，利润减少，投资者对企业未来的盈利预期下降，股价可能下跌。</p></li><li><p><strong>债市</strong>：<br>加息会导致债券收益率上升，因为新发行的债券利率较高，现有低利率债券的价格会下降。因此，加息对债券市场有负面影响。</p></li><li><p><strong>房地产市场</strong>：<br>加息会提高房贷利率，购房成本增加，可能会抑制房地产市场需求，房价可能下跌。</p></li><li><p><strong>外汇市场</strong>：<br>加息会导致本国货币升值，因为较高的利率吸引投资者将资金转移到本国，从而增加对本国货币的需求。</p></li><li><p><strong>大宗商品市场</strong>：<br>加息会使得大宗商品价格下跌，因为借贷成本增加，企业和个人的购买力下降，需求减少。</p></li></ol><h3 id="5-2-加息的解读"><a href="#5-2-加息的解读" class="headerlink" title="5.2 加息的解读"></a>5.2 加息的解读</h3><ul><li><strong>经济信号</strong>：加息通常被视为中央银行对经济前景乐观的信号，可能预示着经济增长强劲或通胀压力增加。</li><li><strong>政策预期</strong>：投资者会根据加息的幅度和频率，预期未来的货币政策走向。如果加息幅度较大，可能预示着未来还会有更多的紧缩政策。</li><li><strong>市场反应</strong>：加息后，市场通常会有短期的负面反应，但长期效果取决于经济基本面的改善情况。</li></ul><h2 id="6-通货紧缩"><a href="#6-通货紧缩" class="headerlink" title="6. 通货紧缩"></a>6. 通货紧缩</h2><p>通货紧缩是指物价水平持续下降的现象，通常伴随着经济活动的萎缩和失业率的上升。</p><h3 id="6-1-通货紧缩对投资市场的影响"><a href="#6-1-通货紧缩对投资市场的影响" class="headerlink" title="6.1 通货紧缩对投资市场的影响"></a>6.1 通货紧缩对投资市场的影响</h3><ol><li><p><strong>股市</strong>：<br>通货紧缩通常会对股市产生负面影响。企业收入减少，利润下降，投资者对企业未来的盈利预期降低，股价可能下跌。</p></li><li><p><strong>债市</strong>：<br>通货紧缩会导致债券收益率下降，因为市场预期未来利率会进一步降低，现有高利率债券的价格会上升。因此，通货紧缩对债券市场有正面影响。</p></li><li><p><strong>房地产市场</strong>：<br>通货紧缩会导致房价下跌，因为购房需求减少，房贷利率可能下降，但购房者预期房价会继续下跌，从而推迟购房决策。</p></li><li><p><strong>外汇市场</strong>：<br>通货紧缩会导致本国货币升值，因为物价下降使得货币购买力增强，吸引投资者将资金转移到本国，从而增加对本国货币的需求。</p></li><li><p><strong>大宗商品市场</strong>：<br>通货紧缩会使得大宗商品价格下跌，因为需求减少，企业和个人的购买力下降。</p></li></ol><h3 id="6-2-通货紧缩的解读"><a href="#6-2-通货紧缩的解读" class="headerlink" title="6.2 通货紧缩的解读"></a>6.2 通货紧缩的解读</h3><ul><li><strong>经济信号</strong>：通货紧缩通常被视为经济活动萎缩的信号，可能预示着经济增长放缓或衰退风险增加。</li><li><strong>政策预期</strong>：投资者会根据通货紧缩的程度和持续时间，预期未来的货币政策走向。如果通货紧缩严重，可能预示着未来会有更多的宽松政策。</li><li><strong>市场反应</strong>：通货紧缩后，市场通常会有短期的负面反应，但长期效果取决于经济基本面的改善情况。</li></ul><h1 id="三、投资"><a href="#三、投资" class="headerlink" title="三、投资"></a>三、投资</h1><h2 id="0-投资的误区"><a href="#0-投资的误区" class="headerlink" title="0. 投资的误区"></a>0. 投资的误区</h2><h3 id="0-1-对投资的恐惧"><a href="#0-1-对投资的恐惧" class="headerlink" title="0.1 对投资的恐惧"></a>0.1 对投资的恐惧</h3><h3 id="0-2-对投资的误解"><a href="#0-2-对投资的误解" class="headerlink" title="0.2 对投资的误解"></a>0.2 对投资的误解</h3><h3 id="0-3-对投资的轻视"><a href="#0-3-对投资的轻视" class="headerlink" title="0.3 对投资的轻视"></a>0.3 对投资的轻视</h3><p>投资是一个重要的理财手段，但很多人会轻视投资的重要性，认为投资是可有可无的。这种轻视主要体现在：</p><ol><li>认为投资只是富人的游戏，与普通人无关</li><li>觉得工资收入足够，不需要投资理财</li><li>没有意识到通货膨胀会侵蚀购买力</li><li>把投资等同于投机，觉得风险太大</li><li>对投资知识的学习不够重视</li></ol><p>这种轻视往往会导致错失良好的投资机会，也会影响个人的长期财务健康。</p><h2 id="1-投资标的"><a href="#1-投资标的" class="headerlink" title="1. 投资标的"></a>1. 投资标的</h2><blockquote><p><a href="#17-%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81">加密货币</a> 作为压轴出场哦，这是 Lave 最看好且最熟悉的标的</p></blockquote><h3 id="1-1-黄金"><a href="#1-1-黄金" class="headerlink" title="1.1 黄金"></a>1.1 黄金</h3><h3 id="1-2-房产"><a href="#1-2-房产" class="headerlink" title="1.2 房产"></a>1.2 房产</h3><h3 id="1-3-股票"><a href="#1-3-股票" class="headerlink" title="1.3 股票"></a>1.3 股票</h3><h3 id="1-4-基金"><a href="#1-4-基金" class="headerlink" title="1.4 基金"></a>1.4 基金</h3><h3 id="1-5-债券"><a href="#1-5-债券" class="headerlink" title="1.5 债券"></a>1.5 债券</h3><h3 id="1-6-外汇"><a href="#1-6-外汇" class="headerlink" title="1.6 外汇"></a>1.6 外汇</h3><h3 id="1-7-加密货币"><a href="#1-7-加密货币" class="headerlink" title="1.7 加密货币"></a>1.7 加密货币</h3><p><a href="#%E5%9B%9B%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81">跳到 加密货币</a></p><h1 id="四、加密货币"><a href="#四、加密货币" class="headerlink" title="四、加密货币"></a>四、加密货币</h1><h2 id="1-总览"><a href="#1-总览" class="headerlink" title="1. 总览"></a>1. 总览</h2><p>首先要理清的概念是，<strong>投资加密货币的实质是在投资这个币背后的区块链项目</strong><br>所以对于整个基本面的考察，当然也是回落到区块链项目本身</p><h2 id="2-板块竞争力"><a href="#2-板块竞争力" class="headerlink" title="2. 板块竞争力"></a>2. 板块竞争力</h2><h3 id="2-1-优势："><a href="#2-1-优势：" class="headerlink" title="2.1 优势："></a>2.1 优势：</h3><h4 id="基本面（区块链项目本身）"><a href="#基本面（区块链项目本身）" class="headerlink" title="基本面（区块链项目本身）"></a>基本面（区块链项目本身）</h4><ul><li>取代传统金融体系<ul><li>去中心化</li><li>持续性和高效率<ul><li>并非所有地区银行等金融系统都跟中国工作量大导致的的高效一样</li><li>对于未来工作量减小的趋势，依赖人工参与的系统只会越来越慢</li></ul></li></ul></li><li>透明性和安全性<ul><li>所有交易记录都公开透明，难以篡改</li><li>交易审查不由单一国家单一机构控制，不会因为政治等因素导致资产风险</li></ul></li><li>全球流通性<ul><li>无需依赖传统银行系统，跨国交易更加便捷</li><li>适用于无银行账户的群体，促进金融普惠</li></ul></li></ul><h4 id="市场"><a href="#市场" class="headerlink" title="市场"></a>市场</h4><ul><li>新的投资市场<ul><li>现在的加密货币市场，就像 2000 年的互联网市场一样，有很多垃圾项目，但是优质项目也潜藏在其中</li><li>项目都处于早期，有很大的发展空间</li><li>市值、交易量、用户量等上来说，还有很大的发展空间</li></ul></li><li>24h 的交易市场<ul><li>与传统交易体系不同，加密货币市场是 24h 的交易市场</li><li>随时可以买入卖出</li></ul></li><li>波动性<ul><li>波动性大，风险大，但同时也意味着更多的机会扭转人生</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 投资 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 投资 </tag>
            
            <tag> 认知 </tag>
            
            <tag> 推荐文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对于炒外汇的认知偏差 - 待更新</title>
      <link href="/cn/46245/"/>
      <url>/cn/46245/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以前一直觉得炒外汇这种投资回报率这么低，有什么必要去炒<br>现在突然意识到，炒外汇本身或许并不是投资，而是保护自己的资产<br>从保护购买力的角度，每个人都应该炒外汇</p></blockquote><h1 id="外汇交易的本质"><a href="#外汇交易的本质" class="headerlink" title="外汇交易的本质"></a>外汇交易的本质</h1><h2 id="保护购买力"><a href="#保护购买力" class="headerlink" title="保护购买力"></a>保护购买力</h2><p>外汇市场是全球流动性最强的市场，汇率的波动直接反映了各国货币购买力的变化。</p><p>通过外汇交易，将资产从可能贬值的货币转移到相对稳定或升值的货币中，</p><p>从而保护资产的实际价值不受通货膨胀或本国货币贬值的侵蚀。</p><p>例如，本国经济动荡时，将资产转化为美元或瑞士法郎等避险货币，能减少因本币贬值带来的损失。</p><p><strong>尤其对于资金体量较小的来说</strong>，因为波动相对其他投资品种较小，所以保护购买力功能会更明显。</p>]]></content>
      
      
      <categories>
          
          <category> 投资 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 投资 </tag>
            
            <tag> 认知 </tag>
            
            <tag> 外汇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity 脚本无法拖拽到或添加到物体上</title>
      <link href="/cn/46583/"/>
      <url>/cn/46583/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><ul><li><p>脚本无法拖拽到或添加到场景中的物体上</p></li><li><p>Inspector 中无法显示 public 变量 - 解决方案</p></li><li><p>在 Inspector 中，点击 <code>Add Component</code> 按钮，添加脚本没反应或者根本无法找到脚本</p></li><li><p>出现报错:<br>  <code>Can&#39;t add script component &#39;xxx&#39; because the script class cannot be found. </code><br>  <code>Make sure that there are no compile errors and that the file name and class name match.</code></p></li></ul><h1 id="脚本无法添加-解决方案"><a href="#脚本无法添加-解决方案" class="headerlink" title="脚本无法添加 - 解决方案"></a>脚本无法添加 - 解决方案</h1><blockquote><p>我在最后一步终于解决了，很无语的问题，但是希望你能在前面几步中就解决呢 ＞︿＜</p><p>首先确保你已经尝试过最基本的：重启 Unity 和重启电脑，如果无效再看接下来几步哦</p></blockquote><h3 id="一、-文件名与类名不一致"><a href="#一、-文件名与类名不一致" class="headerlink" title="一、 文件名与类名不一致"></a>一、 文件名与类名不一致</h3><p>在 Unity 中，类名与文件名必须完全一致（包括大小写）</p><p>如果脚本的文件名是 Test.cs，那么脚本中的类名必须是 Test，且大小写匹配。</p><h3 id="二、-脚本存在编译错误"><a href="#二、-脚本存在编译错误" class="headerlink" title="二、 脚本存在编译错误"></a>二、 脚本存在编译错误</h3><p>如果脚本存在编译错误，那么无法添加到物体上。</p><h3 id="三、-脚本未保存"><a href="#三、-脚本未保存" class="headerlink" title="三、 脚本未保存"></a>三、 脚本未保存</h3><p>如果脚本未保存，那么无法添加到物体上。</p><h3 id="四、-脚本没有继承-MonoBehaviour-类"><a href="#四、-脚本没有继承-MonoBehaviour-类" class="headerlink" title="四、 脚本没有继承 MonoBehaviour 类"></a>四、 脚本没有继承 MonoBehaviour 类</h3><p>Unity 只能将继承自 MonoBehaviour 的脚本作为组件挂载到 GameObject 上。</p><p>如果你的脚本没有继承 MonoBehaviour，它将无法作为组件添加。</p><h3 id="五、-脚本文件放置位置不正确"><a href="#五、-脚本文件放置位置不正确" class="headerlink" title="五、 脚本文件放置位置不正确"></a>五、 脚本文件放置位置不正确</h3><p>Unity 只会识别放在 Assets 文件夹下的脚本文件。</p><p>如果你的脚本文件在项目的其他地方（如桌面或其他路径），Unity 也无法识别它。</p><h3 id="六、-命名空间问题"><a href="#六、-命名空间问题" class="headerlink" title="六、 命名空间问题"></a>六、 命名空间问题</h3><p>如果你的脚本在命名空间内，Unity 可能无法找到该类，除非你引用了正确的命名空间。</p><h3 id="七、-重新创建脚本"><a href="#七、-重新创建脚本" class="headerlink" title="七、 重新创建脚本"></a>七、 重新创建脚本</h3><p>如果以上方法都无法解决问题，可以尝试重新创建脚本。</p><h3 id="八、项目创建的模版问题！！！"><a href="#八、项目创建的模版问题！！！" class="headerlink" title="八、项目创建的模版问题！！！"></a>八、项目创建的模版问题！！！</h3><p>总所周知 Unity 创建项目时，有多个模版提供选择，按照渲染管线分：</p><ul><li>Unity6 之前：<ul><li>Built-in Render Pipeline</li><li>Universal Render Pipeline (URP) </li><li>High Definition Render Pipeline (HDRP)</li></ul></li></ul><p>如果你的项目正好是基于 Built-in Render Pipeline 创建的，那这可能就是问题原因</p><p>有时使用 Built-in Render Pipeline 模板创建的项目会出现一些奇怪的行为，尤其是在 脚本编译 和 渲染设置 方面</p><p>尝试使用 SRP模版（即 URP 或 HDRP） 创建项目</p><h1 id="Inspector-中无法显示-public-变量-解决方案"><a href="#Inspector-中无法显示-public-变量-解决方案" class="headerlink" title="Inspector 中无法显示 public 变量 - 解决方案"></a>Inspector 中无法显示 public 变量 - 解决方案</h1><blockquote><p>发现这个问题和上一个其实有关联</p></blockquote><h3 id="一、脚本未继承自-MonoBehaviour"><a href="#一、脚本未继承自-MonoBehaviour" class="headerlink" title="一、脚本未继承自 MonoBehaviour"></a>一、脚本未继承自 MonoBehaviour</h3><h3 id="二、字段不是可序列化的类型"><a href="#二、字段不是可序列化的类型" class="headerlink" title="二、字段不是可序列化的类型"></a>二、字段不是可序列化的类型</h3><p>可序列化的类型包括：</p><ul><li>基本类型（如 int、float、bool）</li><li>string</li><li>UnityEngine 类型（如 Vector3, GameObject 等）</li><li>标记为 [System.Serializable] 的自定义类或结构体</li></ul><h3 id="三、使用了属性（Property）而不是字段（Field）"><a href="#三、使用了属性（Property）而不是字段（Field）" class="headerlink" title="三、使用了属性（Property）而不是字段（Field）"></a>三、使用了属性（Property）而不是字段（Field）</h3><p>Unity 不会显示 get &#x2F; set 属性，只会显示字段。如果你使用了属性，即使是 public，也不会显示。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> MyValue &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; <span class="comment">// 不会显示</span></span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> myValue; <span class="comment">// 会显示</span></span><br></pre></td></tr></table></figure><h3 id="四、-字段被-HideInInspector-隐藏"><a href="#四、-字段被-HideInInspector-隐藏" class="headerlink" title="四、 字段被 [HideInInspector] 隐藏"></a>四、 字段被 [HideInInspector] 隐藏</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HideInInspector</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> myValue; <span class="comment">// 不会显示</span></span><br></pre></td></tr></table></figure><h3 id="五、-脚本未正常编译！！！"><a href="#五、-脚本未正常编译！！！" class="headerlink" title="五、 脚本未正常编译！！！"></a>五、 脚本未正常编译！！！</h3><blockquote><p>我也是终于在这一步发现问题了</p></blockquote><p>一般来说对脚本更改做出更新后，返回 Unity 窗口时，Unity 会自动编译脚本。</p><p>也就是会弹出一个窗口显示 Compiling…</p><p>如果这个窗口没有弹出，那么脚本将无法正常编译，也就无法添加到物体上，Inspector 中也不会显示 public 变量</p><p>那么什么情况会导致脚本没正常编译呢？</p><p>我的话，发现是因为项目创建的模版为 Built-in Render Pipeline，会导致脚本不自动编译 XD</p><blockquote><p>所以我说真的，一般情况下，尽量选择 SRP 模版创建项目，除非你真的需要 Built-in Render Pipeline</p><p>不过 Unity 6 开始，直接没有 Built-in Render Pipeline 模版了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> 游戏开发 </tag>
            
            <tag> 开发 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密合约交易笔记</title>
      <link href="/cn/4341/"/>
      <url>/cn/4341/</url>
      
        <content type="html"><![CDATA[<h1 id="合约是什么"><a href="#合约是什么" class="headerlink" title="合约是什么"></a>合约是什么</h1><p>快速介绍：即永续期货合约，简称合约，轻易利用杠杆</p><p>与期货对比：</p><table><thead><tr><th>类型</th><th>特点</th></tr></thead><tbody><tr><td>期货</td><td>一般有固定期限（到期会强制结算）</td></tr><tr><td>永续合约</td><td>只要没有爆仓（保证金亏光），就可以永久持有</td></tr></tbody></table><p>优势：</p><ul><li>可无限期持有，无需交割</li><li>杠杆，提高资金利用率</li><li>用于对冲，避险</li><li>多空单，无论牛熊都能获利</li></ul><p>劣势：</p><ul><li>浮动大时，容易爆仓（如突然向下插针很多时就容易直接爆仓），爆仓后会强制平仓，也就拿不回保证金了</li></ul><h1 id="仓位"><a href="#仓位" class="headerlink" title="仓位"></a>仓位</h1><h2 id="仓位-保证金类型"><a href="#仓位-保证金类型" class="headerlink" title="仓位&#x2F;保证金类型"></a>仓位&#x2F;保证金类型</h2><h3 id="逐仓"><a href="#逐仓" class="headerlink" title="逐仓"></a>逐仓</h3><p>每次开单时，选择使用账户中多少保证金</p><h3 id="全仓"><a href="#全仓" class="headerlink" title="全仓"></a>全仓</h3><p>以合约账户总资产为保证金</p><h1 id="计价方式"><a href="#计价方式" class="headerlink" title="计价方式"></a>计价方式</h1><h2 id="U本位"><a href="#U本位" class="headerlink" title="U本位"></a>U本位</h2><p>交易盈亏以美元计价</p><p>好处：</p><ul><li>盈亏一目了然，容易计算</li></ul><h2 id="币本位"><a href="#币本位" class="headerlink" title="币本位"></a>币本位</h2><p>交易盈亏以币计价</p><p>好处：</p><ul><li>可能币价会上涨，从而盈亏相抵后还能获利</li><li>币价上涨时，杠杆倍数会降低，风险降低</li></ul><p>劣势：</p><ul><li>币价下跌时，杠杆倍数会提高，风险提高</li></ul><h1 id="价格"><a href="#价格" class="headerlink" title="价格"></a>价格</h1><h2 id="标记价格"><a href="#标记价格" class="headerlink" title="标记价格"></a>标记价格</h2><p>当前合约的价格，一般就看标记价格</p><h2 id="指数价格"><a href="#指数价格" class="headerlink" title="指数价格"></a>指数价格</h2><p>指的是当前现货市场的价格</p><blockquote><p>一般这两个价格会出现价差，根据多空比例不同，价差也会不同</p></blockquote><h2 id="资金费率"><a href="#资金费率" class="headerlink" title="资金费率"></a>资金费率</h2><p>永续合约的结算方式：每8小时根据资金费率结算一次</p><p>例如：现在市场是多头强，空头弱，那么资金费率就会是正的，多头需要付一笔资金费率给空头</p><p>通过这个机制，可以促使多空比例趋于平衡，抑制市场价格偏离现货价格</p><h1 id="爆仓"><a href="#爆仓" class="headerlink" title="爆仓"></a>爆仓</h1><p>保证金比率到达100%时，就会爆仓，强制平仓</p>]]></content>
      
      
      <categories>
          
          <category> 投资 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 投资 </tag>
            
            <tag> 加密货币 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语言学习经验分享 - 待更新</title>
      <link href="/cn/36183/"/>
      <url>/cn/36183/</url>
      
        <content type="html"><![CDATA[<h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><blockquote><p>So this is really simple. Basically u need to know the motivation for learning anything right?</p><p>Same for the language learning. What for?</p></blockquote><p>对于我来说，动机是：</p><ul><li>获取更多信息 -&gt; 如果你只会一种语言，你也只能获取这一种语言的信息 + 少量二手翻译过的信息</li><li>拥有更多选择 -&gt; 只会一种语言，你也只能选择这一种语言的工作或特定地区的创业</li></ul><blockquote><p>基本上来说，就是为了获取更多的资源，无论信息、机会、朋友圈等等…</p></blockquote><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><blockquote><p>在这里我会分享一些我常用和推荐的工具。</p></blockquote><h2 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h2><h3 id="Trancy"><a href="#Trancy" class="headerlink" title="Trancy"></a>Trancy</h3><p><strong>⭐️⭐️⭐️⭐️⭐️ | <a href="https://www.trancy.org/zh-cn">官网地址</a> | <a href="https://chromewebstore.google.com/detail/ai-%E5%8F%8C%E8%AF%AD%E5%AD%97%E5%B9%95%E7%BD%91%E9%A1%B5%E6%B2%89%E6%B5%B8%E7%BF%BB%E8%AF%91-%E2%80%94-trancy-%E8%AF%AD%E8%A8%80/mjdbhokoopacimoekfgkcoogikbfgngb">Chrome 商店地址</a></strong></p><blockquote><p>AI 双语字幕&amp;网页沉浸翻译 — Trancy 语言学习</p><p>为主流视频网站提供双语字幕和沉浸翻译，边看视频边学语言</p><p>划句划词翻译、生词本、视频双语字幕、视频总结、AI 字幕、导出字幕、标准发音</p><p>支持 YouTube, Netflix, Udemy, Coursera,  等主流视频平台</p></blockquote><p>推荐原因：</p><ul><li>免费</li><li>衔接丝滑</li><li><strong>语料学习</strong> 方法最佳示范工具（下面方法中会提到这个学习方法）</li><li>发音很标准，不会跟个人机一样</li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 自我提高 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chinese Learning Tips from a native</title>
      <link href="/en/25874/"/>
      <url>/en/25874/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Hihi my friend, Here is a native Chinese speaker called Lave</p><p>And I’m write this just I think this may would be helpful for who’s learning Chinese</p><p>Basically just some really small and not organized tips, hope this will help u ~</p></blockquote><h2 id="Oral-Chinese"><a href="#Oral-Chinese" class="headerlink" title="Oral Chinese"></a>Oral Chinese</h2><h4 id="1-Repeating-questions-phrase-twice-usually-indicates-Intensification-of-tone-And-it’s-widely-use"><a href="#1-Repeating-questions-phrase-twice-usually-indicates-Intensification-of-tone-And-it’s-widely-use" class="headerlink" title="1. Repeating questions phrase twice usually indicates Intensification of tone And it’s widely use."></a>1. Repeating questions phrase twice usually indicates Intensification of tone And it’s widely use.</h4><p>Example: </p><pre><code>“不会吧” -&gt; Is that possible?“不会吧不会吧” -&gt; That can&#39;t be possiable right?!ps: this is actually a meme, like a friendly sarcasm...“不会吧不会吧，2024 年了还真有人不知道可以用ChatGPT写论文？”-&gt; &quot;No way... it&#39;s 2024 and there are still people who don&#39;t know that you can write a paper in ChatGPT?&quot;</code></pre><p>So… basically u just say it twice with no pause, widely use widely use bro :D</p><p>Also if u say in a slow tone even strengthen the feeling.</p><p>but I guess this is the same almost in every language hehe.</p><h2 id="Writing-Chinese"><a href="#Writing-Chinese" class="headerlink" title="Writing Chinese"></a>Writing Chinese</h2>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Learning </tag>
            
            <tag> Useful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代币经济学笔记</title>
      <link href="/cn/29486/"/>
      <url>/cn/29486/</url>
      
        <content type="html"><![CDATA[<h1 id="一、发行方式"><a href="#一、发行方式" class="headerlink" title="一、发行方式"></a>一、发行方式</h1><h2 id="ICO"><a href="#ICO" class="headerlink" title="ICO"></a>ICO</h2><p>Initial Coin Offering类似于 Stock 中的 IPO，只是把项目方出售的 标的 从股票换成了代币</p><p>IEO: Initial exchange offering </p><p>IDO: Initial DEX offering </p><p>都是通过向投资者出售代币，来筹集资金</p><h2 id="私募"><a href="#私募" class="headerlink" title="私募"></a>私募</h2><p>项目方在代币公开发行前，向特定投资者出售代币</p><p>目前大部分机构币都是这种方式</p><h2 id="空投"><a href="#空投" class="headerlink" title="空投"></a>空投</h2><p>项目方将一定数量代币免费赠送给用户或潜在用户，来吸引关注</p><h2 id="铭文-符文"><a href="#铭文-符文" class="headerlink" title="铭文&#x2F;符文"></a>铭文&#x2F;符文</h2><p>用户都需要公开铸造来获得相应份额的代币</p><h1 id="二、分发方式"><a href="#二、分发方式" class="headerlink" title="二、分发方式"></a>二、分发方式</h1><h2 id="预挖"><a href="#预挖" class="headerlink" title="预挖"></a>预挖</h2><p>项目发正式发行前，开发商、项目方或特定群体先行挖掘一定数量的代币</p><p>通常被视为垄断，因为不用多少成本可以获得大量代币，存在信任危机</p><h2 id="公平分发"><a href="#公平分发" class="headerlink" title="公平分发"></a>公平分发</h2><p>公开透明的分发给所有人</p><p>例如 ETH</p><h1 id="三、流通"><a href="#三、流通" class="headerlink" title="三、流通"></a>三、流通</h1><h2 id="MC"><a href="#MC" class="headerlink" title="MC"></a>MC</h2><p>Market Cap 流通值：已经流通代币的总价值</p><h2 id="FDV"><a href="#FDV" class="headerlink" title="FDV"></a>FDV</h2><p>Fully Diluted Value - 全稀释估值（总市值）：代币总供应量x代币现价 得出的 总价值</p><h2 id="Circulating-Supply"><a href="#Circulating-Supply" class="headerlink" title="Circulating Supply"></a>Circulating Supply</h2><p>当前代币的已流通量</p><h2 id="Total-Supply"><a href="#Total-Supply" class="headerlink" title="Total Supply"></a>Total Supply</h2><p>总供应量，包含已流通和未流通的总量</p><h2 id="相互关系"><a href="#相互关系" class="headerlink" title="$相互关系"></a>$相互关系</h2><p>Circulating Supply x 现价 &#x3D; MC</p><p>Total Supply x 现价 &#x3D; FDV</p><h2 id="规律"><a href="#规律" class="headerlink" title="$规律"></a>$规律</h2><ol><li><p>未上交易所的项目：不接盘高 FDV 和 低流通 的项目</p><p> 因为上交易所前已经透支了估值上限，同时有定期大额 代币Unlock</p></li></ol><h1 id="四、解锁"><a href="#四、解锁" class="headerlink" title="四、解锁"></a>四、解锁</h1><h2 id="TGE"><a href="#TGE" class="headerlink" title="TGE"></a>TGE</h2><p>Token Generation Event （代币生成事件）：发币</p><h2 id="Vesting"><a href="#Vesting" class="headerlink" title="Vesting"></a>Vesting</h2><p>归属机制</p><p>逐步稀释代币给相关方</p><h2 id="Cliff"><a href="#Cliff" class="headerlink" title="Cliff"></a>Cliff</h2><p>悬崖期：TGE之后 ~ 下一次Vesting 之前的时期（锁定期）</p><h2 id="Linear-Unlock"><a href="#Linear-Unlock" class="headerlink" title="Linear Unlock"></a>Linear Unlock</h2><p>线性解锁：代币通过了 Cliff 之后，以固定周期来解锁</p><h2 id="规律-1"><a href="#规律-1" class="headerlink" title="$规律"></a>$规律</h2><ol><li>因为一般机构在获取到代币后会选择抛售，造成大量抛压，导致币价下跌</li></ol><h1 id="五、供给"><a href="#五、供给" class="headerlink" title="五、供给"></a>五、供给</h1><h2 id="Inflation-通胀"><a href="#Inflation-通胀" class="headerlink" title="Inflation 通胀"></a>Inflation 通胀</h2><p>代币供应会增加，通常导致币价逐渐下跌</p><p>例如 $DOGE</p><h2 id="Deflation-通缩"><a href="#Deflation-通缩" class="headerlink" title="Deflation 通缩"></a>Deflation 通缩</h2><p>通常包含销毁机制，供应量会随着时间推移减少</p><p>如项目方回购代币并销毁</p><p>如 $ETH，但 $ETH 会根据：因为交易要消耗Gas，</p><p>销毁的Gas（燃烧代币数量）和新产生代币数量关系变化，而改变模型</p><p>如果说：当前 Gas极低，且生态日渐衰落，就会进入通胀</p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>这个对价格的影响会比 <strong>供给</strong> 要更大</p><h2 id="价值存储"><a href="#价值存储" class="headerlink" title="价值存储"></a>价值存储</h2><p>如 $BTC</p><h2 id="共识驱动"><a href="#共识驱动" class="headerlink" title="共识驱动"></a>共识驱动</h2><p>如热门 MEME Coin，社区和文化共识带动币价</p><h2 id="代币用例-Utility"><a href="#代币用例-Utility" class="headerlink" title="代币用例(Utility)"></a>代币用例(Utility)</h2><p>如ETH被用于以太坊生态链的质押等需求</p><p>或是如 VEToken（Vote Escrow）：用户需将持有原生代币锁仓一段时间，来获取VEToken</p><p>VEToken 用于对社区生态的投票和治理权，有助于项目稳定发展</p>]]></content>
      
      
      <categories>
          
          <category> 投资 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 投资 </tag>
            
            <tag> 加密货币 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用app工具推荐</title>
      <link href="/cn/18427/"/>
      <url>/cn/18427/</url>
      
        <content type="html"><![CDATA[<h1 id="实用-App-工具-推荐（不断更新）"><a href="#实用-App-工具-推荐（不断更新）" class="headerlink" title="实用 App &amp; 工具 推荐（不断更新）"></a>实用 App &amp; 工具 推荐（不断更新）</h1><blockquote><p>这里会写一些平时觉得好用的 App，工具，工作流程，解决方案等</p></blockquote><h2 id="笔记类软件"><a href="#笔记类软件" class="headerlink" title="笔记类软件"></a>笔记类软件</h2><h3 id="1-个人笔记-Notion"><a href="#1-个人笔记-Notion" class="headerlink" title="1. 个人笔记 - Notion"></a>1. 个人笔记 - Notion</h3><p><a href="https://www.notion.so/">Notion 官网</a></p><blockquote><p>Notion整合了笔记、任务管理、项目规划、知识库和数据库等多种功能。</p><p>因为是一个在线笔记平台，可以实现完全的实时同步，和网页端使用</p><p>但是也导致了无法本地保存，只能导出笔记成特定格式（PDF、HTML等）</p></blockquote><p><strong>一、自定义模版，满足个性化需求</strong><br>Notion允许你根据需求创建和定制模版。例如：</p><ul><li><strong>工作日志模板</strong>：记录每日工作任务和完成情况，确保任务按时完成。</li><li><strong>项目管理模板</strong>：通过看板视图（类似Trello）、表格视图、日历视图等多种视图管理项目，实时跟踪进度。</li><li><strong>知识库模板</strong>：收集和整理各类学习资料和文档，便于查找和使用。</li></ul><p><strong>二、多人协作，提高团队效率</strong></p><ul><li><strong>实时编辑</strong>：团队成员可以同时在线编辑文档，修改实时同步，避免版本冲突。</li><li><strong>评论功能</strong>：在文档中直接添加评论，讨论具体问题，提高沟通效率。</li><li><strong>任务分配</strong>：为团队成员分配任务，设定截止日期，确保每个人都清楚自己的职责。</li></ul><blockquote><p>但是 Notion免费版最高只支持 1000个 Block（可以简单理解为1000行）<br>所以如果有长篇项目需要注意，我的选择是使用了 Anytype 做协同，Notion 做个人笔记</p></blockquote><p><strong>三、跨平台支持，随时随地工作</strong><br>Notion支持在网页、桌面端（Windows和macOS）、移动端（iOS和Android）等多个平台上使用。</p><p><strong>四、不断更新，社区支持</strong></p><ul><li><strong>Notion社区分享</strong>：浏览和下载其他用户分享的优秀模版，快速应用到自己的工作中。</li></ul><p><strong>五、应用实例</strong></p><ol><li><strong>个人管理</strong>：将Notion用于日常待办事项、计划、读书笔记等，全面提升个人管理能力。</li><li><strong>团队协作</strong>：用于团队项目管理、会议记录、任务分配等，增强团队协作和沟通。</li><li><strong>企业知识库</strong>：建立公司内部知识库，集中管理各类文档和资料，便于员工查阅和使用。</li></ol><p><strong>六、总结</strong><br>免费版下：适合用于个人笔记<br>付费版下：全能适用<br>缺陷：不能本地保存，服务器崩溃会和完蛋</p><h3 id="2-团队协同-个人笔记-Anytype"><a href="#2-团队协同-个人笔记-Anytype" class="headerlink" title="2. 团队协同&#x2F;个人笔记 - Anytype"></a>2. 团队协同&#x2F;个人笔记 - Anytype</h3><p>明白了，我们来为Anytype做一个总体介绍，同时参考你提到的关键点。以下是一个完整的评测范例：</p><p><strong>一、概述</strong><br>Anytype是一款新兴的全方位生产力工具，旨在为用户提供一个高度安全和自由定制的工作空间。它结合了本地保存、快速同步、区块链安全以及直观的数据管理方式，为个人和团队用户提供了强大的功能支持。</p><p><strong>二、主要特点</strong></p><ol><li><p><strong>本地保存</strong><br>Anytype允许用户将数据保存在本地，确保隐私和数据安全。这种方式减少了对云服务的依赖，适合需要高安全性和数据控制的用户。</p></li><li><p><strong>快速同步</strong><br>Anytype的同步速度非常快，无论是笔记、任务还是项目，都能实现实时同步，保证工作流畅进行。这对需要频繁更新和协作的团队特别有用。</p><p>甚至如果是同局域网，会直接登录设备间实时同步。</p></li><li><p><strong>区块链模式</strong><br>使用区块链技术进行数据加密和身份验证，只需助记词即可登录。这种方式大大提高了账户的安全性，确保数据不会被未经授权的访问。</p></li><li><p><strong>数据管理</strong><br>Anytype采用了关联图（Graph）的表现形式，用户可以直观地查看和管理不同数据之间的关系。这种可视化的方式有助于用户更好地理解和组织信息。</p></li><li><p><strong>1G 存储</strong><br> 提供了 1G 存储空间，除非你有大量图片需要上传，还是挺够用的，这个容量用完后，依旧会保存至本地，而不会同步云端</p></li><li><p><strong>免费版团队协同</strong></p><p> 最高支持 3个，10人&#x2F;个 的空间（有点像工作区）</p></li></ol><p><strong>三、与Notion的对比</strong></p><table><thead><tr><th>功能</th><th>Anytype</th><th>Notion</th></tr></thead><tbody><tr><td>本地保存</td><td>支持</td><td>不支持</td></tr><tr><td>同步速度</td><td>快</td><td>中等</td></tr><tr><td>数据安全</td><td>区块链加密</td><td>云服务</td></tr><tr><td>数据管理</td><td>关联图</td><td>拖拽式</td></tr><tr><td>自定义程度</td><td>高</td><td>高</td></tr><tr><td>社区支持</td><td>较少</td><td>丰富</td></tr></tbody></table><p><strong>四、用户评价与缺点</strong></p><ol><li><p><strong>界面学习曲线（很沟槽的复杂！！）</strong><br>Anytype真的是很需要较长时间适应！相比于 Notion 复杂了太多，但是当你熟悉了之后真的是很好用</p></li><li><p><strong>功能限制</strong><br>虽然 Anytype 提供了许多核心功能，但与Notion相比，某些高级功能和集成仍有待完善。例如，API集成和第三方应用的支持相对较少。</p></li><li><p><strong>社区和资源</strong><br>由于 Anytype 是相对较新的工具，其用户社区和在线资源相对较少。用户在遇到问题时可能难以找到足够的支持和解决方案。</p></li></ol><h2 id="效率提升类软件"><a href="#效率提升类软件" class="headerlink" title="效率提升类软件"></a>效率提升类软件</h2><h3 id="1-文件快速预览-QuickLook"><a href="#1-文件快速预览-QuickLook" class="headerlink" title="1. 文件快速预览 - QuickLook"></a>1. 文件快速预览 - QuickLook</h3><p><a href="https://github.com/QL-Win/QuickLook">Github 下载</a> | <a href="https://apps.microsoft.com/detail/9nv4bs3l1h4s">Microsoft 商店下载</a></p><p>可以让你在文件管理器中快速预览文件，支持多种文件格式，包括图片、视频、音频、PDF、文档等。</p><p>仅需 <strong>按下空格键</strong>，即可快速预览文件，非常方便</p><p>尤其啊，PS平时打开要巨久，但是有些时候只是想要预览一下，还有像pdf也是</p>]]></content>
      
      
      <categories>
          
          <category> 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息 </tag>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二手备用笔电ThinkPadX390评测</title>
      <link href="/cn/39481/"/>
      <url>/cn/39481/</url>
      
        <content type="html"><![CDATA[<h1 id="二手笔电推荐：ThinkPad-X390"><a href="#二手笔电推荐：ThinkPad-X390" class="headerlink" title="二手笔电推荐：ThinkPad X390"></a>二手笔电推荐：ThinkPad X390</h1><blockquote><p>去年淘了台二手笔电 ThinkPad X390，作为备用便携电脑顶中顶啊</p><p>说不定当你在选购二手笔电的时候可以考虑这一款</p></blockquote><p><img src="https://www.pcworld.com/wp-content/uploads/2023/04/thinkpadx390-100797062-orig.jpg?resize=1240,826&quality=50&strip=all" alt="pcworld.com-X390"></p><h2 id="重点参数"><a href="#重点参数" class="headerlink" title="重点参数"></a>重点参数</h2><p>CPU: i5-8365U</p><p>GPU: 核显 UHD620</p><p>内存: 16G </p><p>硬盘: 256G</p><p>接口：</p><ol><li>USB3.1 x 2</li><li>MicroSD(TF)&#x2F;nano-SIM插槽 x 1</li><li>HDMI x 1</li><li>3.5耳机口 x 1</li><li>雷电3-USB-C(TypeC) x 1</li><li>Mini 以太网接口</li><li>Kensington 安全锁插槽</li></ol><p>电池：48Wh（实际容量51Wh）</p><p>尺寸重量：311.9mm×217.0mm×16.9mm&#x2F;1.254kg</p><p>其他：指纹解锁模块，C口支持 PD快充</p><h2 id="续航：6h"><a href="#续航：6h" class="headerlink" title="续航：6h"></a>续航：6h</h2><p>便携便携，最重要的先说说续航</p><p>满电后屏幕亮度最高情况下（电池健康度85%以上）：</p><ul><li>最高性能模式下：基本 2h 左右</li><li>较长续航模式下：基本 6h 左右</li><li>省点模式下：基本 7h 左右</li></ul><p>基本上开较长续航模式，能保持在6小时续航左右</p><p>主要是还支持 PD 快充，而且它的充电口也是个 C 口！</p><h2 id="价格：1200CNY"><a href="#价格：1200CNY" class="headerlink" title="价格：1200CNY"></a>价格：1200CNY</h2><p>备用电脑最重要的还有价格，闲鱼现在均价在1200左右能买到成色不错的</p><h2 id="性能：日常办公-代码需求"><a href="#性能：日常办公-代码需求" class="headerlink" title="性能：日常办公+代码需求"></a>性能：日常办公+代码需求</h2><p>长续航模式功耗下表现：办公类app，编译器app等都相对流畅，可能编译一瞬间会卡顿一下下<br>性能模式下：甚至能运行 Unity，虽然有点卡XD</p><h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h2><p>总的来讲，适合：日常办公，代码需求</p><p>游戏的话还真试过 CS2，8帧 XD；Muse dash</p><p>视觉小说的这种轻量游戏倒是性能模式下无压力</p><p>所以你要是拿来推galgame也是很OK的</p><p>主要是这个指纹解锁真的很方便，摄像头也有手动防窥设计</p><p>ThinkPad yyds ✌</p>]]></content>
      
      
      <categories>
          
          <category> 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息 </tag>
            
            <tag> 实用 </tag>
            
            <tag> 生活 </tag>
            
            <tag> 评测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Samsung Galaxy S24 个人评测</title>
      <link href="/cn/30212/"/>
      <url>/cn/30212/</url>
      
        <content type="html"><![CDATA[<h1 id="S24-评测"><a href="#S24-评测" class="headerlink" title="S24 评测"></a>S24 评测</h1><blockquote><p>首发预购买入的，用了这么久了，该写个小评测了</p><p>网上参数信息已经太多了，这里直接说使用感受</p></blockquote><p><img src="https://images.samsung.com/hk/smartphones/galaxy-s24/images/galaxy-s24-highlights-kv.jpg?imbypass=true" alt="s24官网宣传图"></p><h2 id="主推原因"><a href="#主推原因" class="headerlink" title="主推原因"></a>主推原因</h2><h3 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h3><p>国行版也直接支持 Google 全套服务，只需要一个梯子即可，不用Root，不用装个GMS装半天 XD</p><p>所以可以直接使用 Google Play 下载到超多软件，不用天天网上找盗版了</p><p>而且还有很多Google的快捷服务，比如直接Google账户快速登录，app的密码管理器</p><h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><p>众所周知三星不用Root可以自定义的就很多，而且官方提供功能也很多（如 GoodLock）</p><p>比如你可以使用 NotiStar记录下撤回的消息，你甚至可以更改任意一个动画播放的时间</p><h3 id="三星生活助手"><a href="#三星生活助手" class="headerlink" title="三星生活助手"></a>三星生活助手</h3><p>这个是买之前都不知道的，原来有如此好用的功能</p><p>比如我今天到机场了，就能自动提醒我航班信息，下飞机了提醒我托运轮盘是几号</p><p>有快递要取，根本不用打开任何软件，直接右滑能看到全部快递信息</p><p>我进了某个商场会自动给我推荐好吃的餐厅</p><p>加上三星做的是全球市场，国内都如此好用了，国外估计也超好用</p><p>当然如果你想要隐私安全，也可以把这些服务全关了</p><p>三星拥有太多的功能了，但也都是可选项，交由用户去选择</p><h3 id="性价比"><a href="#性价比" class="headerlink" title="性价比"></a>性价比</h3><p>现在双十一打折只要不到 3600，这对一款小屏旗舰来说很香啊，功能如此丰富</p><h3 id="细节到位"><a href="#细节到位" class="headerlink" title="细节到位"></a>细节到位</h3><p>使用了这么久下来，综合感受就是这个手机真的很人性化，非常体贴和细节，</p><p>比如你复制一个链接，右侧就会弹出小菜单栏问你要不要打开浏览器或者总结网页等</p><h3 id="丝滑文件传输！"><a href="#丝滑文件传输！" class="headerlink" title="丝滑文件传输！"></a>丝滑文件传输！</h3><p>S互传，三星的文件传输工具，真的也是顶中顶，虽然不及 Apple 的 Airdrop</p><p>但是也一样可以在电脑上下个 S互传，然后直接文件分享</p><p>选择文件，会自动显示分享到在线设备（登录了S互传的设备）</p><p>！！还有最重要的，你甚至可以直接对一个文件创建分享链接，任何人浏览器直接可以下载</p><p>这太爽了我说真的，整个文件传输体验就是很丝滑</p><hr><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><h3 id="硬件层面"><a href="#硬件层面" class="headerlink" title="硬件层面"></a>硬件层面</h3><ul><li>大小： 真的是小屏旗舰，作为一个小屏手机刚刚好，完美单手操作但也不会太小了</li><li>屏幕：小杯也有 120Hz 刷新率，平时使用十分流畅</li><li>音响：音响最高分贝可以很高，中高频表现较好，低频表现不咋样</li><li>外观：外观设计十分好看，简直工业瑰宝，尤其是淡蓝色，淡绿色，黄色这三款</li><li>屏幕：屏幕素质很高，对HDR照片解析力很强</li><li>耐造：很耐摔和防水啊，买到现在少说摔了20多次了，而且都是起码1.4m起摔下去的，还泡过几次水</li></ul><h3 id="软件层面"><a href="#软件层面" class="headerlink" title="软件层面"></a>软件层面</h3><ul><li><p>系统：先说说 OneUI，网上经常把 OneUI说的难用至极不是给人用的</p><p>  实际上，个人体验下来只是因为功能太多了导致的，三星一直自定义功能很强</p><p>  然后很多设置会藏在比较深的位置，比较难找到（这好像是个缺点？？）</p><p>  综合来说，系统还是很丝滑的，而且其实挺好用 XD</p></li><li><p>“模式” 功能：有个很强大的模式功能，基本就是个自定义自动执行计划</p><p>  可以根据时间、位置、app是否打开等很多操作自动执行比如开启免打扰等功能</p><p>  比如我经常用在学校，设置教学楼那边自动开启震动，寝室这边自动开启铃声，晚上睡觉自动开启免打扰等等</p></li><li><p>隐私：右上角有个小绿点来表示当前麦克风或摄像头是否被使用中，嘎嘎保护隐私啊</p></li><li><p>NFC：NFC功能很丝滑，比如绑了一张卡，平时熄屏下直接在底部向上滑就可以打开默认卡片</p><p>然后指纹解锁一下直接开门，全过程不到2秒</p></li><li><p>解锁：平时都习惯用指纹解锁，S24屏下超声波指纹解锁，嘎嘎快，手指刚放上屏幕就开锁了，识别也很精准</p></li><li><p>安全文件夹内不仅可以放文件，有点像是单独的系统，可以直接使用安全文件夹的相机等直接拍进安全文件夹</p></li><li><p>相册功能：会自动根据人脸甚至宠物脸分类标记，可以快速查找到包含一个或几个的人物或宠物；</p><p>还会自动根据照片类型分类，比如我上次需要我身份证照片但我根本找不到在哪里，</p><p>我直接可以查找证件类型照片，直接找到照片 XD 太实用了</p><p>还有能创建共享相册也很好用</p></li></ul><hr><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><h3 id="硬件层面-1"><a href="#硬件层面-1" class="headerlink" title="硬件层面"></a>硬件层面</h3><ul><li>过热：夏天气温30°以上后比较容易过热，过热后显然会变得卡顿啊</li></ul><h3 id="软件层面-1"><a href="#软件层面-1" class="headerlink" title="软件层面"></a>软件层面</h3><ul><li><p>相机：这个是最沟槽的问题，因为屏幕显示有HDR还是什么原因</p><p>  拍照片时看到的，和拍出来后照片看起来，和你把照片发到其他设备看</p><p>  都是不一样的 XD，这很逆天啊，尤其是人像的时候，实测适合化妆后人像拍摄</p><p>  然后最好在 GoodLock 里面下载 Camera Assistant，把照片柔滑开到最大</p></li><li><p>三星输入法：为了能够享用那个翻译和文本帮写和改写优化功能啊，虽然基本并没有用过几次</p><p>  可能其实为的是三星输入法真的很好看吧，那个动效也可以在 Good Lock 里设置超好看</p><p>  导致一直强制自己用三星输入法，为什么说 “强制” 呢，因为这个中文输入是真的神经啊</p><p>  首当其冲的，你没法直接打 “傻逼”，你敢信吗，宝宝输入法吗 😅，无论你打了多少遍，永远要翻很久候选词才能找到</p><p>  导致我一直都只能打 “傻逼啊” 然后在把这个啊给删掉，逆天</p><p>  这个例子已经很明显了，就是说真的很难受，很多热门词都没有，烂完了，而且根本不人性化，打字天天候选框选半天</p><p>  真的神经，建议就是最好还是别用三星输入法了</p></li></ul><p>其他… 草，好像真找不到什么缺点… 差不多就这样吧</p><h2 id="差点忘了，还有主打的-AI-功能"><a href="#差点忘了，还有主打的-AI-功能" class="headerlink" title="差点忘了，还有主打的 AI 功能"></a>差点忘了，还有主打的 AI 功能</h2><p>简单来说吧，我觉得真的好用的只有：</p><ol><li>AI 图片编辑功能</li><li>录音音频转文字 AI 总结功能（这个真的超好用）</li></ol><h2 id="Anyway-3600-这个价格可以无脑入手，说真的"><a href="#Anyway-3600-这个价格可以无脑入手，说真的" class="headerlink" title="Anyway, 3600 这个价格可以无脑入手，说真的"></a>Anyway, 3600 这个价格可以无脑入手，说真的</h2><blockquote><p>S24 对我来说是个 工业瑰宝 in a nutshell</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息 </tag>
            
            <tag> 实用 </tag>
            
            <tag> 生活 </tag>
            
            <tag> 评测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仅用一个域名拥有无限邮箱，实现邮箱注册平台账号注册自由</title>
      <link href="/cn/19407/"/>
      <url>/cn/19407/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-cloudflare-邮箱转发功能拥有无限邮箱地址"><a href="#使用-cloudflare-邮箱转发功能拥有无限邮箱地址" class="headerlink" title="使用 cloudflare 邮箱转发功能拥有无限邮箱地址"></a>使用 cloudflare 邮箱转发功能拥有无限邮箱地址</h1><h1 id="Twitter-等平台-无限账号注册"><a href="#Twitter-等平台-无限账号注册" class="headerlink" title="Twitter 等平台 无限账号注册"></a>Twitter 等平台 无限账号注册</h1><h2 id="一、将域名托管到-Cloudflare"><a href="#一、将域名托管到-Cloudflare" class="headerlink" title="一、将域名托管到 Cloudflare"></a>一、将域名托管到 Cloudflare</h2><p>这个网上已经有很多教程了，这里直接跳过</p><h2 id="二、设置电子邮件路由"><a href="#二、设置电子邮件路由" class="headerlink" title="二、设置电子邮件路由"></a>二、设置电子邮件路由</h2><ol><li><p>进入 <a href="https://dash.cloudflare.com/">Cloudflare控制台</a></p></li><li><p>点击你的域名进入后，会看到左侧有 <strong>电子邮件</strong> 的选项</p></li><li><p>选择 <strong>路由规则</strong> 在下方 <strong>自定义地址</strong> 中点击 <strong>创建地址</strong></p><p> <img src="https://lave.fun/cn/19407/1.png"></p><p> <img src="https://lave.fun/cn/19407/2.png"></p></li><li><p>自定义地址：你要创建的邮箱叫什么</p><p> 目标位置：邮件转发到哪个邮箱</p></li><li><p>比如我可以新建一个 <a href="mailto:&#x68;&#101;&#x6c;&#x6c;&#111;&#x40;&#x6c;&#x61;&#x76;&#101;&#46;&#102;&#x75;&#110;">hello@lave.fun</a> 邮箱地址，转发到 我的 Gmail 邮箱</p></li><li><p>此时理论上来说你可以新建接近无数个邮箱地址</p></li></ol><blockquote><p>顺带一提，此功能原本是用于不想暴露自己邮箱或是想要做收件分类用的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息 </tag>
            
            <tag> 实用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对Four-dimensionalSpace的一些想法</title>
      <link href="/cn/59758/"/>
      <url>/cn/59758/</url>
      
        <content type="html"><![CDATA[<h1 id="对Four-dimensionalSpace的一些想法"><a href="#对Four-dimensionalSpace的一些想法" class="headerlink" title="对Four-dimensionalSpace的一些想法"></a>对Four-dimensionalSpace的一些想法</h1><blockquote><p>前段时间跟朋友聊天提到了个游戏叫 “4D Miner”, 他就顺便给我科普了下</p><p>当然指的是 Four-Dimensional Space，而不是时间上来说</p><p>因为没有参考任何相关资料且无相关领域知识，以下内容均为个人理解</p></blockquote><h2 id="由低维度向高维度引入"><a href="#由低维度向高维度引入" class="headerlink" title="由低维度向高维度引入"></a>由低维度向高维度引入</h2><h3 id="First-Dimensional"><a href="#First-Dimensional" class="headerlink" title="First Dimensional"></a>First Dimensional</h3><p>在 1 维度中，事物仅存在于 单个轴上（例如 X Axis）</p><p>即为物体存在于一条直线中。</p><p>想像一条单线的铁轨，主角视角为火车视角</p><p>主角的运动上限：只有 前和后(即 X++, X–)</p><p>所以主角的认知上限：只有 前和后(即 X&#x3D;N)</p><h3 id="Second-Dimensional"><a href="#Second-Dimensional" class="headerlink" title="Second Dimensional"></a>Second Dimensional</h3><p>到了 2 维度中，事物存在于 两个轴上（例如 X Axis, Y Axis）</p><p>因为两条轴可以构成一个平面，即为物体存在于一张平面中。</p><p>想像一张白纸，主角视角为一个可以移动的黑点</p><p>主角的运动上限：只有 上下左右（即 X+N, Y+N）</p><p>所以主角的认知上限：只有 上下左右（即为 X&#x3D;N, Y&#x3D;N）</p><h3 id="Third-Dimensional"><a href="#Third-Dimensional" class="headerlink" title="Third Dimensional"></a>Third Dimensional</h3><p>到了 3 维度中，事物存在于 三个轴上（例如 X Axis, Y Axis, Z Axis）</p><p>三条轴构成一个空间，所以物体存在于了三维空间。</p><p>也就是在我们的世界中，主角是你自己这个人</p><p>主角的运动上限：只有上下左右前后（即 X+N, Y+N, Z+N）</p><blockquote><p>如果此时没有理解运动上限，此时可能就可以理解了</p><p>你可以改变运动状态：你的确可以往任何方向奔跑（X+N, Y+N）并跳跃（Z+N），<br>但都是局限在三维空间</p><p>也可以改变运动方式：走路坐车即便是坐火箭也可以被XYZ三轴来标记</p><p>但是不能改变运动上限：你不在第四条轴上所以也无法有更多的运动</p></blockquote><p>主角的认知上限：只有 上下左右前后（即为 X&#x3D;N, Y&#x3D;N, Z&#x3D;N）</p><blockquote><p>此时也更好理解认知上限了，上方提到了不能改变运动上限，<br>即便告诉你你可以有一种新的轴给你运动，你一时间并不会知道这个轴在哪里什么样<br>这就是认知上限，无法自然的想到超出三维的运动模式</p><p>再更形象的例子，蚂蚁一直被称为认知二维生物，对于人类来说他是个三维的个体<br>但是对于蚂蚁来说，再一个平面上爬行，只有XY两个轴向移动<br>也就是为什么你画个圈把蚂蚁圈住，它在碰到后会迟疑</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>说了不少，我们来捋一捋吧</p><p>我们可以寻找到一些固定规律：</p><ol><li>一个维度是否存在 与 一种生物认知中是否有这个维度 是无关联的</li><li>一个维度无法自然的认知高维度的世界观</li><li>一个维度升为一个更高的维度后，规律来说仅为增加了一个坐标轴</li></ol><h2 id="The-Four-Dimentional-Space"><a href="#The-Four-Dimentional-Space" class="headerlink" title="The Four-Dimentional Space"></a>The Four-Dimentional Space</h2><p>好了，前期构建了一些设定，接下来是我的 4th Dimentional Space 理解</p><p>Now it’s the tricky part hehe</p><p>以三维为基础，再加入一条轴（W Axis），此时为 XYZW 四条轴了</p><ol><li>想像一个三维坐标系，以原点为中心射出三条轴 XYZ</li><li>但是你在一个屏幕(二维)上看这个三维坐标系</li><li>想像有一个方块，再 X&#x3D;0 Y&#x3D;0 Z&#x3D;0</li><li>然后这个屏幕本身是 W&#x3D;0</li><li>然后我们对屏幕这个面进行前后的叠加</li><li>基本也就是一个四维坐标系的样子</li></ol><p>也可以理解为：对一个三维物体的定向叠加</p><p>还可以想象到如果在玩一个 3D 解密游戏：</p><ol><li>你拿起了一个可以旋转的物体</li><li>想像这个可旋转物体的在 面向你和反向你的方向（即 W Axis）<br>其实叠加了无数个同样的物体</li><li>但是当其映射到你的眼睛中时，因为重叠所以你只能看到这一个</li><li>当你旋转时，W 轴上的每一片因为本身都是物体本身所以也会跟着旋转<br>最终映射出的依旧是这个物体</li><li>你也无法看到其在4D中的样子</li></ol><h2 id="跨维显示"><a href="#跨维显示" class="headerlink" title="跨维显示"></a>跨维显示</h2><p>我有想过如果如果三维可以映射到二维上并能被好好理解<br>（如2D屏幕玩3D游戏，你依旧能好好的理解深度信息）</p><p>是不是意味着四维也可以好好映射到三维中</p><p>比如 Apple Vision Pro 这种空间计算平台</p><p>后来被朋友提醒这会成为一个更好的表现形式</p><p>但并不能成为一个打破维度理解的方式</p><p>因为人眼本身的上限就是三维，所以认知范围也只有三维。</p>]]></content>
      
      
      <categories>
          
          <category> 研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
            <tag> 设定灵感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Some thoughts on Four-dimensionalSpace</title>
      <link href="/en/44773/"/>
      <url>/en/44773/</url>
      
        <content type="html"><![CDATA[<h1 id="Some-thoughts-on-Four-dimensionalSpace"><a href="#Some-thoughts-on-Four-dimensionalSpace" class="headerlink" title="Some thoughts on Four-dimensionalSpace"></a>Some thoughts on Four-dimensionalSpace</h1><blockquote><p>some time ago, I was chatting with a friend and mentioned a game called “4D Miner”, and he gave me a science popularization by the way</p><p>of course refers to Four-Dimensional Space, not to time</p><p>Because I have not referred to any relevant materials and have no knowledge of the relevant field, the following is my personal understanding</p></blockquote><h2 id="Introduced-from-low-dimensions-to-high-dimensions"><a href="#Introduced-from-low-dimensions-to-high-dimensions" class="headerlink" title="Introduced from low dimensions to high dimensions"></a>Introduced from low dimensions to high dimensions</h2><h3 id="First-Dimensional"><a href="#First-Dimensional" class="headerlink" title="First Dimensional"></a>First Dimensional</h3><p>In the 1-dimension, things only exist on a single axis (e.g. X Axis)</p><p>That is, the object exists in a straight line.</p><p>Imagine a single-line railroad track, with the main character’s perspective being a train</p><p>Character’s maximum movement: only front and back (i.e. X++, X–)</p><p>So the upper limit of the protagonist’s cognition: only before and after (i.e. X&#x3D;N)</p><h3 id="Second-Dimensional"><a href="#Second-Dimensional" class="headerlink" title="Second Dimensional"></a>Second Dimensional</h3><p>In 2 dimensions, things exist on two axes (e.g. X Axis, Y Axis)</p><p>Because two axes can form a plane, that is, the object exists in a plane.</p><p>Imagine a blank piece of paper with the main character’s perspective on a black dot that can be moved</p><p>The main character’s upper limit of movement: only up, down, left, right (i.e. X+N, Y+N)</p><p>So the upper limit of the protagonist’s cognition: only up, down, left and right (i.e. X&#x3D;N, Y&#x3D;N)</p><h3 id="Third-Dimensional"><a href="#Third-Dimensional" class="headerlink" title="Third Dimensional"></a>Third Dimensional</h3><p>In the 3 dimensions, things exist on three axes (e.g. X Axis, Y Axis, Z Axis)</p><p>The three axes form a space, so the object exists in a three-dimensional space.</p><p>That is, in our world, the protagonist is yourself</p><p>The upper limit of the protagonist’s movement: only up, down, left, right, front and back (i.e. X+N, Y+N, Z+N)</p><blockquote><p>if you don’t understand the upper limit of exercise at this point, you may be able to understand it at this point</p><p>you can change the state of movement: you can indeed run in any direction (X+N, Y+N) and jump (Z+N),<br>but they are all confined to three-dimensional space</p><p>can also change the way of movement: walking, riding in a car, or even riding a rocket can be marked by the XYZ triaxes</p><p>but you can’t change the upper limit of movement: you’re not on the fourth axis and you can’t have more movement</p></blockquote><p>The upper limit of the protagonist’s cognition: only up, down, left, right, front and back (i.e. X&#x3D;N, Y&#x3D;N, Z&#x3D;N)</p><blockquote><p>also better understand the upper limit of cognition at this time, as mentioned above, the upper limit of exercise cannot be changed.<br>even if you were told that you could have a new axis for you to move, you wouldn’t know where that axis was for a while<br>this is the upper limit of cognition, and it is not natural to think of movement patterns beyond three dimensions</p><p>more vivid example, the ant has always been known as a cognitive two-dimensional creature, and for humans it is a three-dimensional individual<br>But for ants, crawling on another plane, there are only two axial movements of XY<br>That’s why if you draw a circle to enclose an ant, it will hesitate when it touches it</p></blockquote><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>Having said a lot, let’s take a look</p><p>We can find some fixed patterns:</p><ol><li>The existence of a dimension is irrelevant to the existence of such a dimension in a biological cognition</li><li>A high-dimensional worldview that cannot be naturally cognitive</li><li>When a dimension is upgraded to a higher dimension, only one coordinate axis is added to it</li></ol><h2 id="The-Four-Dimentional-Space"><a href="#The-Four-Dimentional-Space" class="headerlink" title="The Four-Dimentional Space"></a>The Four-Dimentional Space</h2><p>Okay, so I’ve built some settings upfront, and then here’s my 4th Dimentional Space understanding</p><p>Now it’s the tricky part hehe</p><p>Based on the 3D, add one more axis (W axis), which is now XYZW four axes</p><ol><li>Imagine a 3D coordinate system with three axes XYZ centered on the origin</li><li>But you’re looking at this 3D coordinate system on a screen (2D).</li><li>Imagine a square with X&#x3D;0 Y&#x3D;0 Z&#x3D;0</li><li>Then this screen itself is W&#x3D;0</li><li>Then we overlay the front and back of this side of the screen</li><li>It’s basically what a four-dimensional coordinate system looks like</li></ol><p>It can also be understood as: the directional superposition of a three-dimensional object</p><p>It is also conceivable if you are playing a 3D puzzle game:</p><ol><li>You pick up an object that can be rotated</li><li>Imagine the rotatable object facing you and facing you in the opposite direction (i.e. W Axis)<br>In fact, there are countless of the same objects superimposed</li><li>But when it is mapped to your eye, you can only see this one because it overlaps</li><li>When you rotate, each piece on the W axis rotates because it is the object itself<br>In the end, it was still the object that was mapped</li><li>You can’t see what it looks like in 4D</li></ol><h2 id="Cross-dimensional-display"><a href="#Cross-dimensional-display" class="headerlink" title="Cross-dimensional display"></a>Cross-dimensional display</h2><p>I’ve thought about what if 3D could be mapped to 2D and be well understood<br>(For example, if you play a 3D game on a 2D screen, you can still understand the depth information well)</p><p>Does it mean that 4D can also be mapped to 3D well?</p><p>For example, the Apple Vision Pro is a spatial computing platform</p><p>Later I was reminded by a friend that this would be a better form of expression</p><p>But it doesn’t become a way to break down dimensional understanding</p><p>Because the upper limit of the human eye itself is three-dimensional, the cognitive range is only three-dimensional.</p>]]></content>
      
      
      <categories>
          
          <category> Studing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thinking </tag>
            
            <tag> SettingsInspiration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抑郁、症与人格分裂</title>
      <link href="/cn/48579/"/>
      <url>/cn/48579/</url>
      
        <content type="html"><![CDATA[<h2 id="预计发布日期-2024-12-X"><a href="#预计发布日期-2024-12-X" class="headerlink" title="预计发布日期 2024-12-X"></a>预计发布日期 2024-12-X</h2>]]></content>
      
      
      <categories>
          
          <category> 研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
            <tag> 心理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Depressions, Disorders &amp; Split Personalities</title>
      <link href="/en/36146/"/>
      <url>/en/36146/</url>
      
        <content type="html"><![CDATA[<h2 id="Scheduled-2024-12-X"><a href="#Scheduled-2024-12-X" class="headerlink" title="Scheduled 2024-12-X"></a>Scheduled 2024-12-X</h2>]]></content>
      
      
      <categories>
          
          <category> Studing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thinking </tag>
            
            <tag> Mental </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小记</title>
      <link href="/cn/56192/"/>
      <url>/cn/56192/</url>
      
        <content type="html"><![CDATA[<blockquote><p>请无视这篇仅为新坑的预备</p></blockquote><h2 id="一天怎么过的"><a href="#一天怎么过的" class="headerlink" title="一天怎么过的"></a>一天怎么过的</h2><h2 id="有没有压力产生"><a href="#有没有压力产生" class="headerlink" title="有没有压力产生"></a>有没有压力产生</h2><h3 id="压力产生来源"><a href="#压力产生来源" class="headerlink" title="压力产生来源"></a>压力产生来源</h3><h4 id="是否有来自于未来的生活压力"><a href="#是否有来自于未来的生活压力" class="headerlink" title="是否有来自于未来的生活压力"></a>是否有来自于未来的生活压力</h4><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><h3 id="工作环境"><a href="#工作环境" class="headerlink" title="工作环境"></a>工作环境</h3><h3 id="薪资待遇"><a href="#薪资待遇" class="headerlink" title="薪资待遇"></a>薪资待遇</h3><h4 id="满足对未来生活开支的全部需求"><a href="#满足对未来生活开支的全部需求" class="headerlink" title="满足对未来生活开支的全部需求"></a>满足对未来生活开支的全部需求</h4><h3 id="付出"><a href="#付出" class="headerlink" title="付出"></a>付出</h3><h4 id="付出方式"><a href="#付出方式" class="headerlink" title="付出方式"></a>付出方式</h4><h5 id="投入产出比（投入：学习成本，产出：竞争力）"><a href="#投入产出比（投入：学习成本，产出：竞争力）" class="headerlink" title="投入产出比（投入：学习成本，产出：竞争力）"></a>投入产出比（投入：学习成本，产出：竞争力）</h5><h5 id="投入量"><a href="#投入量" class="headerlink" title="投入量"></a>投入量</h5><h4 id="付出量"><a href="#付出量" class="headerlink" title="付出量"></a>付出量</h4><h5 id="时间成本（工作时间，获取工作时间）"><a href="#时间成本（工作时间，获取工作时间）" class="headerlink" title="时间成本（工作时间，获取工作时间）"></a>时间成本（工作时间，获取工作时间）</h5><h5 id="精力成本（给你情绪带来多大的负面影响）"><a href="#精力成本（给你情绪带来多大的负面影响）" class="headerlink" title="精力成本（给你情绪带来多大的负面影响）"></a>精力成本（给你情绪带来多大的负面影响）</h5><h3 id="风险率"><a href="#风险率" class="headerlink" title="风险率"></a>风险率</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>你好吖陌生人，点击查看 Sacilave 写给你的这封信</title>
      <link href="/cn/5014/"/>
      <url>/cn/5014/</url>
      
        <content type="html"><![CDATA[<blockquote><p>hihi 陌生人，感谢你的点开查看 ヾ(•ω•&#96;)o</p></blockquote><blockquote><p>中心：加密货币投资、游戏开发、独立开发、文学、摄影、创业变现</p></blockquote><h3 id="最近在忙什么呢"><a href="#最近在忙什么呢" class="headerlink" title="最近在忙什么呢"></a>最近在忙什么呢</h3><ol><li><p>开发 Galgame，同时学习其他独游开发（有没有想做游戏的一起做独游呀，快联系我！）</p><p>（主要偏艺术风格，好的音乐，好的故事，和好的画面，类似OneShot情感叙事风格）</p></li><li><p>找到了个没人做的细分赛道，尝试用 web app 实现，同时接入大模型，项目比较大，准备做到盈利和去打比赛</p></li><li><p>打算过段时间深度学学数据结构与算法，已经大二了还没真正的系统学过</p><p>（虽然已经大一蓝桥杯拿了省奖，蓝桥杯真水啊www）</p></li><li><p>想要去散散心了，尝试拍点动态明信片</p></li><li><p>什么时候去借几本书看看，好久没空闲下来看看书了</p></li></ol><h2 id="Hi-There-ヾ-•ω•-o-自我介绍"><a href="#Hi-There-ヾ-•ω•-o-自我介绍" class="headerlink" title="Hi There~ ヾ(•ω•&#96;)o 自我介绍"></a>Hi There~ ヾ(•ω•&#96;)o 自我介绍</h2><p>我先做个自我介绍？</p><p>这里是 Sacilave 或者…</p><p>可以叫我 Lave，我自己起的名字。</p><p>Sacilave 的意思是 “Sacrifice for what I love”，而 Lave 是简称啦。</p><p>是一个主修计算机的学生，有一点…… 嗯…… 社恐？</p><p>但可能并没有听起来那么严重：)</p><p>虽然不擅长聊天，但还是倾向于认识更多朋友的呢</p><p>最喜欢可爱的东西。目标是成为一个多领域的创作者。(〃￣︶￣)人(￣︶￣〃)</p><h2 id="我想说的是…"><a href="#我想说的是…" class="headerlink" title="我想说的是…"></a>我想说的是…</h2><p>虽然不知道你身处世界何处，也不知什么样的机缘巧合下能被你看到这个小站</p><p>但既然来了就是缘分，如果亲爱的陌生人，你发现我们会很合拍，欢迎联系我哦，无论是留言还是通过 SNS 联系到我</p><p><strong>以及最重要的：</strong> 如果需要任何的心理咨询，想要找个人诉说自己的故事，我会十分欢迎！(。・ω・。)</p><p>这份缘分让我们在此相遇，身为曾经经历过严重抑郁的人</p><blockquote><p>这里会是个面向所有经历痛苦中的小孩们的树洞~</p><p>另外，我也很喜欢陌生人的故事，我喜欢倾听，喜欢做个世界记录者。期待你分享的故事~</p></blockquote><hr><p>抛开偏向情感的东西，我也是个知道许多事情的人，目前主线在独立开发，独立游戏，创业，投资上。</p><p>可以有很多东西跟我聊哦，我有太多东西涉猎过了，目前是退役男高，所以如果需要一个安心的男声陪聊也可（笑）</p><p>或许有一天会开个频道做博主，终极梦想是：</p><ul><li>能有一个小目标的积蓄，可以到世界各地旅游</li><li>拥有一个双层的独栋小店，一层是花店，还有一套的乐器可以开live；二层是咖啡馆加书屋</li></ul><h2 id="REP"><a href="#REP" class="headerlink" title="REP"></a>REP</h2><ul><li><p>技术</p><ul><li>游戏开发 ( Unity, Renpy ) ~ 5&#x2F;10</li><li>前端 ~ 3&#x2F;10</li><li>RasberryPi ~ 3&#x2F;10</li><li>AIGC ~ 4&#x2F;10</li><li>Linux ~ 2&#x2F;10</li><li>LLM ~ 1&#x2F;10</li><li>微信小程序 2&#x2F;10</li><li>……</li><li>喜欢折腾些小东西</li><li>语言：C#, Java, Python, C&#x2F;C++, JS…</li></ul></li><li><p>ACG</p><ul><li>动漫（致郁番、治愈番、恋爱番）</li><li>Galgame （相同）<ul><li>沙耶之歌</li><li>Summer Pockets</li><li>*Eden</li><li>纸上的魔法使</li><li>Doki Doki Literature Club</li><li>…</li></ul></li></ul></li><li><p>摄影</p><ul><li>可以看看我的 <a href="https://lave.fun/gallery/">Gallery</a></li><li>其实基本没什么时间扫街啦，所以说照片很少</li></ul></li><li><p>游戏</p><ul><li>3A 游戏</li><li>多人游戏</li><li>Top：<ul><li>彩虹六号围攻</li><li>怪物猎人</li><li>喵斯快跑</li><li>刺客信条系列</li><li>OneShot</li><li>… 具体可参考我的 <a href="https://steamcommunity.com/id/sacilave">Steam Page</a></li></ul></li></ul></li><li><p>音乐</p><ol><li>ボカロ，ZUTOMAYO，米津玄師，藤井風，Vaundy，XXXTENTACION</li><li>LUCA，菅田将暉，Billie Eilish，mizuki，TK from 凛として時雨，King Gnu，優里，さユり，Aimer</li><li>以上分两档，以下不分顺序</li></ol><ul><li>雨宮天，鹿乃，花譜，MINNIE，Reol，rionos(ポケットをふくらませて 这首对我真的影响很大)，鎖那，Eve，美波</li><li>tuki，中村遥，ロクデナシ，DAZBEE，imase，GReeeeN，相対性理論，ラブリーサマーちゃん(水星 这首超爱)，理芽，吐息</li><li>ナツノセ，當山みれい，Daoko，JVKE，Ari Abdul，DECO*27，milet，可不，稲葉曇，R3HAB(曾经很喜欢的电音百大)，Vicetone</li></ul></li><li><p>投资<br>PS：只炒现货，但也想丰富下投资组合，挺想认识点玩投资的朋友的</p><ul><li>加密：$BTC, $ETH, $ADA, $DOT, $XRP, $MKR, $SUI, $POL</li><li>外汇：说实话美股圈和加密圈不就是同时也在炒外汇了</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hihi stranger~ Click To View this letter from Sacilave</title>
      <link href="/en/59522/"/>
      <url>/en/59522/</url>
      
        <content type="html"><![CDATA[<h2 id="Hi-There"><a href="#Hi-There" class="headerlink" title="Hi There~"></a>Hi There~</h2><blockquote><p>This is my first post, so… may I do a self intro?</p></blockquote><p>Hoolaaa ~ It’s Sacilave. Or… Lave.</p><p>U can call me「 Lave 」if u like. This name is made by myself.</p><p>Sacilave means “Sacrifice for what I love”, and Lave is the simpler version.</p><p>Here’s a student majoring in CS with a little… ummm… social phobia??</p><p>But it’s actually not that serious as it sounds like :)</p><p>I’m not good at starting a chat, but I’m glad to have fun with u all. q(≧▽≦q)</p><p>I love cute things the most. And I aim to become a multi-field creator. (〃￣︶￣)人(￣︶￣〃)</p><h2 id="What-I-wanna-say-is…"><a href="#What-I-wanna-say-is…" class="headerlink" title="What I wanna say is…"></a>What I wanna say is…</h2><p>Though I don’t know where in the world you are, or what kind of chance has brought you to this Cabin</p><p>But since you’re here, it’s fate. If… dear stranger, you find that we’d be a good match</p><p>Please feel free to contact me, either by leaving a comment or by contacting me through SNS.</p><p><strong>And most importantly:</strong> If you need any counseling and want to find someone to tell your story</p><p>I will be very welcoming! (. ・ω・.)</p><p>This is where fate brought us together, and as someone who has experienced severe depression</p><blockquote><p>This would be a Cozy Cabin for kids who are going through pain~</p><p>Also, I love stories from strangers, I love listening and being a recorder.</p><p>Looking forward to the stories you share ~</p></blockquote><hr><p>Emotionally biased stuff aside, I’m also a guy who knows a lot about lots of things</p><p>With a current main line on indie development, indie games, entrepreneurship, and investing.</p><p>There’s a lot of stuff you can talk to me about, I’ve dabbled in too many things, and…</p><p>I’m currently a retired male high schooler(hehe), so…</p><p>If you need a reassuring boy voice to talk to that’s fine too (lol)</p><p>Maybe one day start a channel as a blogger, the ultimate dream is:</p><ul><li><p>To have a small amount of savings to travel around the world.</p></li><li><p>Own a two-story store, the first floor is a flower store, and a set of musical instruments can be opened live;</p><p>The second floor is a cafe and bookstore!</p></li></ul><h2 id="MY-REP"><a href="#MY-REP" class="headerlink" title="MY REP"></a>MY REP</h2><ul><li><p>Tech</p><ul><li>GameDev ( Unity, Renpy ) ~ 5&#x2F;10</li><li>Front-End ~ 2&#x2F;10</li><li>RasberryPi ~ 3&#x2F;10</li><li>AIGC ~ 4&#x2F;10</li><li>Linux ~ 2&#x2F;10</li><li>LLM ~ 1&#x2F;10</li><li>WechatMiniApp 2&#x2F;10</li><li>……</li><li>like to make little things.</li><li>Lang: C#, Java, Python, C&#x2F;C++, JS…</li></ul></li><li><p>ACG</p><ul><li>Anime (Psychological, Melancholic, Healing, Romance, Lovely)</li><li>Galgame (The same)<ul><li>Saya no Uta</li><li>Summer Pockets</li><li>*Eden</li><li>紙の上の魔法使い</li><li>…</li></ul></li></ul></li><li><p>Photograph</p><ul><li>Take a look at my <a href="https://lave.fun/gallery/">Gallery</a>.</li><li>I didn’t have much time to sweep the streets, so I didn’t take many photos.</li></ul></li><li><p>PC Game</p><ul><li>AAA Games</li><li>Multiplayer</li><li>Top：<ul><li>Rainbow Six Siege</li><li>Monster Hunter World&#x2F;Rise</li><li>Muse Dash</li><li>Assassin’s Creed</li><li>OneShot</li><li>… Detials can be found on my <a href="https://steamcommunity.com/id/sacilave">Steam Page</a></li></ul></li></ul></li><li><p>Music</p><ol><li>ボカロ，ZUTOMAYO，米津玄師，藤井風，Vaundy，XXXTENTACION</li><li>LUCA，菅田将暉，Billie Eilish，mizuki，TK from 凛として時雨，King Gnu，優里，さユり，Aimer</li><li>Above in two grades, below in no particular order</li></ol><ul><li>雨宮天，鹿乃，花譜，MINNIE，Reol，rionos(ポケットをふくらませて 这首对我真的影响很大)，鎖那，Eve，美波</li><li>tuki，中村遥，ロクデナシ，DAZBEE，imase，GReeeeN，相対性理論，ラブリーサマーちゃん(水星 这首超爱)，理芽，吐息</li><li>ナツノセ，當山みれい，Daoko，JVKE，Ari Abdul，DECO*27，milet，可不，稲葉曇，R3HAB(曾经很喜欢的电音百大)，Vicetone</li></ul></li><li><p>Crypto Currency</p><ul><li>$BTC</li><li>$ETH</li><li>$ADA</li><li>$DOT</li><li>$XRP</li><li>$MKR</li><li>$SUI</li><li>$POL</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Casual </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Living </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高校大学生比赛终极指南 - 更新中</title>
      <link href="/cn/34303/"/>
      <url>/cn/34303/</url>
      
        <content type="html"><![CDATA[<blockquote><p>全部比赛汇总可参考 <a href>2024全国普通高校大学生竞赛分析报告.pdf</a></p></blockquote><h1 id="一、高校大学生比赛终极指南👍必看！！！"><a href="#一、高校大学生比赛终极指南👍必看！！！" class="headerlink" title="一、高校大学生比赛终极指南👍必看！！！"></a>一、高校大学生比赛终极指南👍必看！！！</h1><blockquote><p>这些，是在准备比赛前，你必须要知道的信息，待更新中</p></blockquote><h1 id="一、报销指南"><a href="#一、报销指南" class="headerlink" title="一、报销指南"></a>一、报销指南</h1><h3 id="直接跳转到我的另一篇-大学生报销和奖金保姆指南"><a href="#直接跳转到我的另一篇-大学生报销和奖金保姆指南" class="headerlink" title="直接跳转到我的另一篇 大学生报销和奖金保姆指南"></a>直接跳转到我的另一篇 <a href="https://lave.fun/cn/41518/">大学生报销和奖金保姆指南</a></h3><h1 id="二、竞赛列表"><a href="#二、竞赛列表" class="headerlink" title="二、竞赛列表"></a>二、竞赛列表</h1><blockquote><p>这些是更多面向工科专业的比赛。初版，并使用一定 AI 生成信息，后续会进行信息检查</p></blockquote><h2 id="1-中国国际大学生创新大赛（“互联网-”）"><a href="#1-中国国际大学生创新大赛（“互联网-”）" class="headerlink" title="1. 中国国际大学生创新大赛（“互联网+”）"></a>1. 中国国际大学生创新大赛（“互联网+”）</h2><h3 id="官网：http-cy-ncss-org-cn"><a href="#官网：http-cy-ncss-org-cn" class="headerlink" title="官网：http://cy.ncss.org.cn/"></a>官网：<a href="http://cy.ncss.org.cn/">http://cy.ncss.org.cn/</a></h3><h3 id="星级：⭐⭐⭐⭐⭐"><a href="#星级：⭐⭐⭐⭐⭐" class="headerlink" title="星级：⭐⭐⭐⭐⭐"></a>星级：⭐⭐⭐⭐⭐</h3><h4 id="一、基本"><a href="#一、基本" class="headerlink" title="一、基本"></a>一、基本</h4><ul><li><strong>介绍</strong>：中国国际大学生创新大赛（原名“互联网+”大学生创新创业大赛）是中国最具影响力的大学生创新创业竞赛之一，旨在激发学生的创新思维，提高其创业能力和实践技能。大赛鼓励跨学科合作，强调项目的社会价值和可持续发展。</li><li><strong>大概时间</strong>：<ul><li>报名阶段：每年3月至4月</li><li>校级初赛：5月至6月</li><li>省级复赛：7月至8月</li><li>全国总决赛：9月至10月</li></ul></li><li><strong>参赛要求</strong>：<ul><li>参赛对象：在校大学生，包括专科生、本科生、研究生等</li><li>团队组成：成员不限于同一学校，但需指定一名负责人</li><li>作品要求：涵盖“互联网+”现代农业、制造业、信息技术服务等多个领域</li></ul></li><li><strong>准备材料</strong>：<ul><li>商业计划书</li><li>PPT演示文稿</li><li>视频资料（可选）</li><li>市场分析报告</li><li>财务预测</li><li>团队介绍</li><li>指导教师意见</li><li>其他支持材料</li></ul></li><li><strong>奖项</strong>：<ul><li>特等奖、一等奖、二等奖、三等奖、优秀奖等多个级别</li></ul></li></ul><h4 id="二、赛道"><a href="#二、赛道" class="headerlink" title="二、赛道"></a>二、赛道</h4><ul><li>“互联网+”现代农业</li><li>“互联网+”制造业</li><li>“互联网+”信息技术服务</li><li>“互联网+”文化创意服务</li><li>“互联网+”社会服务</li></ul><hr><h2 id="2-挑战杯中国大学生创业计划大赛"><a href="#2-挑战杯中国大学生创业计划大赛" class="headerlink" title="2. 挑战杯中国大学生创业计划大赛"></a>2. 挑战杯中国大学生创业计划大赛</h2><h3 id="官网：http-www-tiaozhanbei-net"><a href="#官网：http-www-tiaozhanbei-net" class="headerlink" title="官网：http://www.tiaozhanbei.net/"></a>官网：<a href="http://www.tiaozhanbei.net/">http://www.tiaozhanbei.net/</a></h3><h3 id="星级：⭐⭐⭐⭐"><a href="#星级：⭐⭐⭐⭐" class="headerlink" title="星级：⭐⭐⭐⭐"></a>星级：⭐⭐⭐⭐</h3><h4 id="一、基本-1"><a href="#一、基本-1" class="headerlink" title="一、基本"></a>一、基本</h4><ul><li><strong>介绍</strong>：挑战杯中国大学生创业计划大赛是中国最高级别的大学生创业竞赛之一，旨在促进青年学生的创新意识和创业能力。</li><li><strong>大概时间</strong>：<ul><li>报名阶段：每年3月至4月</li><li>校级初赛：5月至6月</li><li>省级复赛：7月至8月</li><li>全国总决赛：10月至11月</li></ul></li><li><strong>参赛要求</strong>：<ul><li>参赛对象：全日制普通高等学校在校学生</li><li>团队组成：成员3至10人，需要有一名指导老师</li><li>作品要求：涵盖科技创新、社会企业、公益创业等多个方面</li></ul></li><li><strong>准备材料</strong>：<ul><li>创业计划书</li><li>PPT演示文稿</li><li>项目视频（可选）</li><li>市场分析报告</li><li>财务预测</li><li>团队介绍</li><li>指导教师意见</li><li>其他支持材料</li></ul></li><li><strong>奖项</strong>：<ul><li>金奖、银奖、铜奖、优秀奖等多个级别</li></ul></li></ul><h4 id="二、赛道-1"><a href="#二、赛道-1" class="headerlink" title="二、赛道"></a>二、赛道</h4><ul><li>科技创新</li><li>社会企业</li><li>公益创业</li><li>文化创意产业</li><li>新兴服务业</li></ul><hr><h2 id="3-“挑战杯”全国大学生课外学术科技作品竞赛"><a href="#3-“挑战杯”全国大学生课外学术科技作品竞赛" class="headerlink" title="3. “挑战杯”全国大学生课外学术科技作品竞赛"></a>3. “挑战杯”全国大学生课外学术科技作品竞赛</h2><h3 id="官网：http-www-tiaozhanbei-net-1"><a href="#官网：http-www-tiaozhanbei-net-1" class="headerlink" title="官网：http://www.tiaozhanbei.net/"></a>官网：<a href="http://www.tiaozhanbei.net/">http://www.tiaozhanbei.net/</a></h3><h3 id="星级：⭐⭐⭐⭐-1"><a href="#星级：⭐⭐⭐⭐-1" class="headerlink" title="星级：⭐⭐⭐⭐"></a>星级：⭐⭐⭐⭐</h3><h4 id="一、基本-2"><a href="#一、基本-2" class="headerlink" title="一、基本"></a>一、基本</h4><ul><li><strong>介绍</strong>：挑战杯全国大学生课外学术科技作品竞赛是中国大学生最重要的学术科技竞赛之一，旨在培养大学生的科学研究能力和社会责任感。</li><li><strong>大概时间</strong>：<ul><li>报名阶段：每年2月至3月</li><li>校级初赛：4月至5月</li><li>省级复赛：6月至7月</li><li>全国总决赛：10月至11月</li></ul></li><li><strong>参赛要求</strong>：<ul><li>参赛对象：全日制普通高等学校在校学生</li><li>团队组成：成员不超过10人，需有一名指导老师</li><li>作品要求：涵盖自然科学、社会科学、哲学等多个领域</li></ul></li><li><strong>准备材料</strong>：<ul><li>学术论文或研究报告</li><li>PPT演示文稿</li><li>实验记录或调查问卷</li><li>数据分析结果</li><li>团队介绍</li><li>指导教师意见</li><li>其他支持材料</li></ul></li><li><strong>奖项</strong>：<ul><li>特等奖、一等奖、二等奖、三等奖、优秀奖等多个级别</li></ul></li></ul><h4 id="二、赛道-2"><a href="#二、赛道-2" class="headerlink" title="二、赛道"></a>二、赛道</h4><ul><li>自然科学类学术论文</li><li>哲学社会科学类社会调查报告和学术论文</li><li>科技发明制作A类</li><li>科技发明制作B类</li></ul><hr><h2 id="4-全国大学生电子商务“创新、创意及创业”挑战赛（三创赛）"><a href="#4-全国大学生电子商务“创新、创意及创业”挑战赛（三创赛）" class="headerlink" title="4.全国大学生电子商务“创新、创意及创业”挑战赛（三创赛）"></a>4.全国大学生电子商务“创新、创意及创业”挑战赛（三创赛）</h2><p>官网：<a href="http://www.3chuang.net/">http://www.3chuang.net/</a></p><p>星级：⭐⭐⭐⭐</p><h3 id="一、基本-3"><a href="#一、基本-3" class="headerlink" title="一、基本"></a>一、基本</h3><ul><li>介绍：全国大学生电子商务“创新、创意及创业”挑战赛（简称“三创赛”）是一项高水平学科竞赛，面向全国高校在校生。该赛事重点考察学生的创新能力、团队合作精神及解决实际问题的能力，通过实战项目提升学生的实践经验和就业竞争力。获奖作品不仅能获得丰厚奖励，还能得到行业专家的认可，为参赛者的简历增添亮点，增加未来职业发展的机会。作为一项具有高含金量的比赛，“三创赛”已成为推动高校电子商务教育改革和发展的重要平台。</li><li>大概时间：<ul><li>报名阶段：上一年的11月至次年的2月（并提交初步的项目计划书）</li><li>校级选拔赛：3月至4月</li><li>省级赛：5月至6月</li><li>全国总决赛：7月至8月</li></ul></li><li>参赛要求：<ul><li>参赛对象：参赛者应为全日制普通高等学校在校大学生，包括本科生、研究生等</li><li>团队组成：成员数量一般3至5人，每个团队须一名指导教师。团队成员应来自同一所高校，但不同院系或专业的学生可以组队。</li><li>作品要求：作品需围绕电子商务领域的新技术、新模式、新业态展开，强调创新性、实用性和市场潜力。作品形式可以是技术开发、商业模式设计、市场调研报告等。</li></ul></li><li>准备材料：<ul><li>项目计划书：说明项目的背景、目标、创新点、实施方案和预期效果。</li><li>PPT：包括项目概述、市场分析、技术方案、商业模式和团队介绍。</li><li>视频（可选）：展示产品原型或实际应用的短片。</li><li>市场调研报告：对目标市场的现状、需求和竞争对手进行分析。</li><li>财务预算：项目的启动资金、运营成本和预期收入。</li><li>团队介绍：团队成员的背景、分工和职责。</li><li>指导教师意见：指导教师对项目的评价和建议。</li><li>其他支持材料：用户反馈、合作伙伴证明、专利证书等。</li></ul></li><li>奖项：<ol><li>全国总决赛奖项：</li></ol><ul><li>特等奖：总数的1%</li><li>一等奖：总数的5%</li><li>二等奖：总数的10%</li><li>三等奖：总数的15%</li><li>优秀奖：总数的20%</li></ul><ol start="2"><li>省级赛奖项：</li></ol><ul><li>一等奖：总数的5%</li><li>二等奖：总数的10%</li><li>三等奖：总数的15%</li><li>优秀奖：总数的20%</li></ul><ol start="3"><li>校级赛奖项：</li></ol><ul><li>一等奖：总数的5%</li><li>二等奖：总数的10%</li><li>三等奖：总数的15%</li><li>优秀奖：总数的20%</li></ul><ol start="4"><li>单项奖：</li></ol><ul><li>各单项奖具体比例和数量会根据实际情况而定，但通常较少，约占总数的1%-3%</li></ul></li></ul><h3 id="二、赛道-3"><a href="#二、赛道-3" class="headerlink" title="二、赛道"></a>二、赛道</h3><ul><li>跨境电商实战赛：<ul><li>聚焦于跨境电子商务的实际操作和创新，包括市场分析、产品选择、营销策略等。</li><li>适合专业：国际经济与贸易、物流管理、外语等相关专业</li></ul></li><li>产学用（BUC）实战赛：<ul><li>侧重于企业与高校的合作，通过实际项目解决企业面临的问题，促进产学研用结合。</li><li>适合专业：计算机科学、市场营销、工商管理等相关专业</li></ul></li><li>乡村振兴实战赛：<ul><li>关注农村电子商务的发展，通过创新项目助力乡村振兴，包括农产品销售、乡村旅游等。</li><li>适合专业：农业经济、农村发展、旅游管理等相关专业</li></ul></li><li>商务大数据分析实战赛：<ul><li>侧重于利用大数据技术进行商业分析，包括市场趋势预测、消费者行为分析等。</li><li>适合专业：统计学、数据科学、信息管理等相关专业</li></ul></li><li>直播电商实战赛：<ul><li>聚焦于直播电商的实际操作和创新，包括直播内容策划、互动营销、用户管理等。</li><li>适合专业：市场营销、传媒艺术、新媒体等相关专业</li></ul></li></ul><hr><h2 id="5-中国大学生计算机设计大赛"><a href="#5-中国大学生计算机设计大赛" class="headerlink" title="5. 中国大学生计算机设计大赛"></a>5. 中国大学生计算机设计大赛</h2><h3 id="官网：http-www-jsjds-com"><a href="#官网：http-www-jsjds-com" class="headerlink" title="官网：http://www.jsjds.com/"></a>官网：<a href="http://www.jsjds.com/">http://www.jsjds.com/</a></h3><h3 id="星级：⭐⭐⭐"><a href="#星级：⭐⭐⭐" class="headerlink" title="星级：⭐⭐⭐"></a>星级：⭐⭐⭐</h3><h4 id="一、基本-4"><a href="#一、基本-4" class="headerlink" title="一、基本"></a>一、基本</h4><ul><li><strong>介绍</strong>：中国大学生计算机设计大赛是一项面向全国高校学生的计算机设计比赛，旨在提升学生的计算机应用能力和创新能力。</li><li><strong>大概时间</strong>：<ul><li>报名阶段：每年2月至3月</li><li>校级初赛：4月至5月</li><li>省级复赛：6月至7月</li><li>全国总决赛：8月至9月</li></ul></li><li><strong>参赛要求</strong>：<ul><li>参赛对象：全日制普通高等学校在校学生</li><li>团队组成：成员不超过5人，需有一名指导老师</li><li>作品要求：涵盖软件应用与开发、微课与教学辅助等多个类别</li></ul></li><li><strong>准备材料</strong>：<ul><li>设计文档</li><li>PPT演示文稿</li><li>作品演示视频</li><li>测试报告</li><li>用户手册</li><li>团队介绍</li><li>指导教师意见</li><li>其他支持材料</li></ul></li><li><strong>奖项</strong>：<ul><li>一等奖、二等奖、三等奖、优秀奖等多个级别</li></ul></li></ul><h4 id="二、赛道-4"><a href="#二、赛道-4" class="headerlink" title="二、赛道"></a>二、赛道</h4><ul><li>软件应用与开发</li><li>微课与教学辅助</li><li>物联网应用</li><li>大数据应用</li><li>人工智能应用</li><li>信息可视化设计</li><li>数媒静态设计</li><li>数媒动漫与短片</li><li>数媒游戏与交互设计</li><li>计算机音乐创作</li><li>国际生“汉学”</li><li>…</li></ul><hr><h2 id="6-蓝桥杯大赛"><a href="#6-蓝桥杯大赛" class="headerlink" title="6. 蓝桥杯大赛"></a>6. 蓝桥杯大赛</h2><h3 id="官网：http-www-lanqiao-org"><a href="#官网：http-www-lanqiao-org" class="headerlink" title="官网：http://www.lanqiao.org/"></a>官网：<a href="http://www.lanqiao.org/">http://www.lanqiao.org/</a></h3><h3 id="星级：⭐⭐⭐-1"><a href="#星级：⭐⭐⭐-1" class="headerlink" title="星级：⭐⭐⭐"></a>星级：⭐⭐⭐</h3><h4 id="一、基本-5"><a href="#一、基本-5" class="headerlink" title="一、基本"></a>一、基本</h4><ul><li><strong>介绍</strong>：蓝桥杯大赛是一项面向全国高校学生的IT学科竞赛，旨在提升学生的编程能力和技术创新能力。</li><li><strong>大概时间</strong>：<ul><li>报名阶段：每年9月至10月</li><li>校级初赛：11月至12月</li><li>省级复赛：次年3月至4月</li><li>全国总决赛：次年5月至6月</li></ul></li><li><strong>参赛要求</strong>：<ul><li>参赛对象：全日制普通高等学校在校学生</li><li>团队组成：个人或团队形式参赛</li><li>作品要求：涵盖软件开发、移动应用开发等多个领域</li></ul></li><li><strong>准备材料</strong>：<ul><li>编程代码</li><li>解题报告</li><li>PPT演示文稿</li><li>视频演示</li><li>测试案例</li><li>团队介绍（团队参赛）</li><li>指导教师意见（如有）</li><li>其他支持材料</li></ul></li><li><strong>奖项</strong>：<ul><li>一等奖、二等奖、三等奖、优秀奖等多个级别</li></ul></li></ul><h4 id="二、赛道-5"><a href="#二、赛道-5" class="headerlink" title="二、赛道"></a>二、赛道</h4><ul><li>C&#x2F;C++程序设计</li><li>Java软件开发</li><li>Python程序设计</li><li>Web应用开发</li><li>大数据算法与应用</li></ul><hr><h2 id="7-团体程序设计天梯赛"><a href="#7-团体程序设计天梯赛" class="headerlink" title="7. 团体程序设计天梯赛"></a>7. 团体程序设计天梯赛</h2><h3 id="官网：https-gplt-patest-cn"><a href="#官网：https-gplt-patest-cn" class="headerlink" title="官网：https://gplt.patest.cn/"></a>官网：<a href="https://gplt.patest.cn/">https://gplt.patest.cn/</a></h3><h3 id="星级：⭐⭐⭐-2"><a href="#星级：⭐⭐⭐-2" class="headerlink" title="星级：⭐⭐⭐"></a>星级：⭐⭐⭐</h3><h4 id="一、基本-6"><a href="#一、基本-6" class="headerlink" title="一、基本"></a>一、基本</h4><ul><li><strong>介绍</strong>：团体程序设计天梯赛是一项面向全国高校学生的编程竞赛，旨在检验学生的编程基础和团队协作能力。</li><li><strong>大概时间</strong>：<ul><li>报名阶段：每年3月至4月</li><li>比赛阶段：4月至5月</li></ul></li><li><strong>参赛要求</strong>：<ul><li>参赛对象：全日制普通高等学校在校学生</li><li>团队组成：每队10人，需有一名指导老师</li><li>作品要求：现场编程解题</li></ul></li><li><strong>准备材料</strong>：<ul><li>编程代码</li><li>解题报告</li><li>团队介绍</li><li>指导教师意见（如有）</li><li>其他支持材料</li></ul></li><li><strong>奖项</strong>：<ul><li>一等奖、二等奖、三等奖、优秀奖等多个级别</li></ul></li></ul><h4 id="二、赛道-6"><a href="#二、赛道-6" class="headerlink" title="二、赛道"></a>二、赛道</h4><ul><li>团体赛</li></ul><hr><h2 id="8-ACM-ICPC国际大学生程序设计竞赛"><a href="#8-ACM-ICPC国际大学生程序设计竞赛" class="headerlink" title="8. ACM-ICPC国际大学生程序设计竞赛"></a>8. ACM-ICPC国际大学生程序设计竞赛</h2><h3 id="官网：https-icpc-global"><a href="#官网：https-icpc-global" class="headerlink" title="官网：https://icpc.global/"></a>官网：<a href="https://icpc.global/">https://icpc.global/</a></h3><h3 id="星级：⭐⭐⭐⭐⭐-1"><a href="#星级：⭐⭐⭐⭐⭐-1" class="headerlink" title="星级：⭐⭐⭐⭐⭐"></a>星级：⭐⭐⭐⭐⭐</h3><h4 id="一、基本-7"><a href="#一、基本-7" class="headerlink" title="一、基本"></a>一、基本</h4><ul><li><strong>介绍</strong>：ACM-ICPC国际大学生程序设计竞赛是一项全球性的编程竞赛，旨在评估学生的编程技巧和团队合作能力。</li><li><strong>大概时间</strong>：<ul><li>报名阶段：每年9月至10月</li><li>区域赛：11月至12月</li><li>全球总决赛：次年5月至6月</li></ul></li><li><strong>参赛要求</strong>：<ul><li>参赛对象：全日制普通高等学校在校学生</li><li>团队组成：每队3人，需有一名指导老师</li><li>作品要求：现场编程解题</li></ul></li><li><strong>准备材料</strong>：<ul><li>编程代码</li><li>解题报告</li><li>团队介绍</li><li>指导教师意见（如有）</li><li>其他支持材料</li></ul></li><li><strong>奖项</strong>：<ul><li>金牌、银牌、铜牌、优秀奖等多个级别</li></ul></li></ul><h4 id="二、赛道-7"><a href="#二、赛道-7" class="headerlink" title="二、赛道"></a>二、赛道</h4><ul><li>团体赛</li></ul><hr><h2 id="9-“外研社·国才杯”“理解当代中国”全国大学生外语能力大赛"><a href="#9-“外研社·国才杯”“理解当代中国”全国大学生外语能力大赛" class="headerlink" title="9. “外研社·国才杯”“理解当代中国”全国大学生外语能力大赛"></a>9. “外研社·国才杯”“理解当代中国”全国大学生外语能力大赛</h2><h3 id="官网：http-uchallenge-unipus-cn"><a href="#官网：http-uchallenge-unipus-cn" class="headerlink" title="官网：http://uchallenge.unipus.cn/"></a>官网：<a href="http://uchallenge.unipus.cn/">http://uchallenge.unipus.cn/</a></h3><h3 id="星级：⭐⭐⭐⭐-2"><a href="#星级：⭐⭐⭐⭐-2" class="headerlink" title="星级：⭐⭐⭐⭐"></a>星级：⭐⭐⭐⭐</h3><h4 id="一、基本-8"><a href="#一、基本-8" class="headerlink" title="一、基本"></a>一、基本</h4><ul><li><strong>介绍</strong>：外研社·国才杯“理解当代中国”全国大学生外语能力大赛是一项面向全国高校学生的外语竞赛，旨在提升学生的外语水平和跨文化交际能力。</li><li><strong>大概时间</strong>：<ul><li>报名阶段：每年9月至10月</li><li>校级初赛：10月至11月</li><li>省级复赛：11月至12月</li><li>全国总决赛：次年4月至5月</li></ul></li><li><strong>参赛要求</strong>：<ul><li>参赛对象：全日制普通高等学校在校学生</li><li>团队组成：个人或团队形式参赛</li><li>作品要求：涵盖演讲、写作、阅读等多个方面</li></ul></li><li><strong>准备材料</strong>：<ul><li>演讲稿</li><li>写作稿件</li><li>阅读理解答案</li><li>视频资料（可选）</li><li>团队介绍（团队参赛）</li><li>指导教师意见（如有）</li><li>其他支持材料</li></ul></li><li><strong>奖项</strong>：<ul><li>特等奖、一等奖、二等奖、三等奖、优秀奖等多个级别</li></ul></li></ul><h4 id="二、赛道-8"><a href="#二、赛道-8" class="headerlink" title="二、赛道"></a>二、赛道</h4><ul><li>英语演讲比赛</li><li>英语写作比赛</li><li>英语阅读比赛</li></ul><blockquote><p>To be Updated…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 实用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 推荐文章 </tag>
            
            <tag> 自我提高 </tag>
            
            <tag> 竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恋爱心理的思考</title>
      <link href="/cn/18911/"/>
      <url>/cn/18911/</url>
      
        <content type="html"><![CDATA[<h1 id="一、对恋爱的理解"><a href="#一、对恋爱的理解" class="headerlink" title="一、对恋爱的理解"></a>一、对恋爱的理解</h1><h2 id="情感行为"><a href="#情感行为" class="headerlink" title="情感行为"></a>情感行为</h2><p>恋爱是一个愈加强烈的情感行为，想要为对方付出，依偎在对方身边，占有对方的行为</p><p>最能诠释出这样行为的，或许是初高中彼此皆是初恋的那段恋爱。</p><p>两个善良纯洁的人顺着彼此对着对方的冲动和青涩的小心翼翼逐渐和彼此一起做的一件又一件事。</p><p>最初恋爱的样子或许就是借着情感的驱动，将自己的一部分逐渐交付给对方，也想着守护着对方。</p><h2 id="多重的状态"><a href="#多重的状态" class="headerlink" title="多重的状态"></a>多重的状态</h2><p>恋爱也是一个在漫无目的，有目的，多变的目的等等状态中切换的状态。</p><p>这或许是一个很令人费解的状态，但仔细想想自己对 Ta 产生恋爱的冲动或许就有从分析了。</p><p>一开始为何对 Ta 有好感，逐渐熟络之后开始思考的未来，选择是否继续下去，是否为了什么而接受 Ta 的各个方面。</p><p>一路下来，如果自己没有隐约的目的性或许早会不再爱慕。</p><p>为了满足自己而和 Ta 的开始；为了能得到 Ta 的陪伴而接受了 Ta 的缺点。</p><p>新鲜感过去后平静下来的自己或许又成了漫无目的，选择结束重开一个，亦或是选择打破喜新厌旧。</p><p>重新喜欢上为了 Ta 做出的付出。这都是目的，不一定为了自己，但在一路上一定会经历很多的目的改变。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>恋爱更是一个过程，一个从互相有好感或互相被优点所吸引，到互相喜欢上对方几乎一切的过程。</p><p>一个从为了自我满足，到满足对方而会感到满足的过程。</p><p>正如提过的，行为的渐进，目的的渐进，都体现着恋爱是一个过程。</p><p>无论选择长期还是短期，无论经验丰富多少，无论人品好坏，都终将是一个过程。</p><p>只是过程中经历的或许大相径庭，只是在我的观点中恋爱应该会是正如标题所写的过程。</p><p>总而言之，对恋爱的主观理解，这三者不是组成部分，而均是从一个方向的切入思考。</p><h1 id="二、恋爱心理"><a href="#二、恋爱心理" class="headerlink" title="二、恋爱心理"></a>二、恋爱心理</h1><p><em>恋爱中的部分常常产生的心理分析</em></p><h2 id="1-依恋和归属感"><a href="#1-依恋和归属感" class="headerlink" title="1. 依恋和归属感"></a>1. 依恋和归属感</h2><p>这样的情感或许本应是家人最能给予的东西，但总所周知并非所有家庭都如此美满和正向。</p><p>即使拥有美满家庭，恋人能给予的依恋和归属感也可能是家人无法给予的另一种情感。</p><p>在一个家人能给予依恋和归属感的环境下，恋人能给予的便是作为一个没有必要却愿意给予肯定和依靠的感觉</p><p>而在一个家人不能给予依恋和归属感的环境下，成长出来的人或许会是对感情冷淡的，对周边人的感知会低于一般水平；</p><p>另一种便可能会是极度缺爱的一类人，他们所需的依恋和归属感便很容易的寄托到了恋人身上。</p><p>这是一种作为群居生物的本能需求，也更是在面对挫折和困难时能获得到支柱感的途径。</p><p>依恋和被依恋的感情或许正是他们需要的。</p><h2 id="2-嫉妒和猜疑"><a href="#2-嫉妒和猜疑" class="headerlink" title="2. 嫉妒和猜疑"></a>2. 嫉妒和猜疑</h2><p>恋爱大多数是二人世界，不仅因为人生来具有的占有欲，也因为二人世界是最安全最不容易破坏两人感情的关系。</p><p>所以出现了可能得第三者，难免会产生危机意识，也就是嫉妒和猜疑，这种心理的产生一般会发生在所有人身上，只是处理的方式各有千秋。</p><p>处理方式决定着是否会将嫉妒和猜疑的心理转化为对立的关系。</p><h2 id="3-浪漫"><a href="#3-浪漫" class="headerlink" title="3. 浪漫"></a>3. 浪漫</h2><p>浪漫或许是最复杂的恋爱情感之一，很难从生理角度切入，只能靠其他基本的情感整合出浪漫可能得构成。</p><h3 id="PS-后面越写越水啊，可能有空了会再继续写吧…"><a href="#PS-后面越写越水啊，可能有空了会再继续写吧…" class="headerlink" title="PS: 后面越写越水啊，可能有空了会再继续写吧…"></a>PS: 后面越写越水啊，可能有空了会再继续写吧…</h3>]]></content>
      
      
      <categories>
          
          <category> 研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
            <tag> 心理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
